// this script was compiled with wurst 1.8.0.0-jenkins-Wurst-949
globals
// real bj_UNIT_FACING=0.
// real bj_RADTODEG=0.
// real bj_DEGTORAD=0.
// real bj_GAME_STARTED_THRESHOLD=0.
// integer bj_MAX_INVENTORY=0
// integer bj_MAX_PLAYERS=0
// integer bj_PLAYER_NEUTRAL_VICTIM=0
// integer bj_MAX_PLAYER_SLOTS=0
// integer bj_MAX_SKELETONS=0
// integer bj_MAX_STOCK_ITEM_SLOTS=0
// integer bj_MAX_STOCK_UNIT_SLOTS=0
// integer bj_MAX_ITEM_LEVEL=0
// real bj_TOD_DAWN=0.
// real bj_TOD_DUSK=0.
// real bj_STOCK_RESTOCK_INITIAL_DELAY=0.
// real bj_STOCK_RESTOCK_INTERVAL=0.
// integer bj_STOCK_MAX_ITERATIONS=0
// real bj_RESCUE_PING_TIME=0.
// integer bj_MAX_QUEUED_TRIGGERS=0
// real bj_QUEUED_TRIGGER_TIMEOUT=0.
// integer bj_ALLIANCE_UNALLIED=0
// integer bj_ALLIANCE_UNALLIED_VISION=0
// integer bj_ALLIANCE_ALLIED=0
// integer bj_ALLIANCE_ALLIED_VISION=0
// integer bj_ALLIANCE_ALLIED_UNITS=0
// integer bj_ALLIANCE_ALLIED_ADVUNITS=0
// integer bj_ALLIANCE_NEUTRAL=0
// integer bj_ALLIANCE_NEUTRAL_VISION=0
// integer bj_GATEOPERATION_CLOSE=0
// integer bj_GATEOPERATION_OPEN=0
// integer bj_GATEOPERATION_DESTROY=0
// real bj_CORPSE_MAX_DEATH_TIME=0.
// force bj_FORCE_ALL_PLAYERS=null
// rect bj_mapInitialPlayableArea=null
// integer bj_forLoopAIndex=0
// integer bj_forLoopAIndexEnd=0
// timer bj_gameStartedTimer=null
// trigger bj_dncSoundsDay=null
// trigger bj_dncSoundsNight=null
// sound bj_dayAmbientSound=null
// sound bj_nightAmbientSound=null
// trigger bj_dncSoundsDawn=null
// trigger bj_dncSoundsDusk=null
// sound bj_dawnSound=null
// sound bj_duskSound=null
// boolean bj_useDawnDuskSounds=false
// boolean bj_dncIsDaytime=false
// sound bj_rescueSound=null
// trigger bj_stockItemPurchased=null
// timer bj_stockUpdateTimer=null
// integer bj_stockPickedItemLevel=0
// itemtype bj_stockPickedItemType=null
// trigger bj_rescueUnitBehavior=null
// boolean bj_rescueChangeColorUnit=false
// boolean bj_rescueChangeColorBldg=false
// integer bj_queuedExecTotal=0
// timer bj_queuedExecTimeoutTimer=null
// trigger bj_queuedExecTimeout=null
// integer bj_groupEnumTypeId=0
// player bj_groupEnumOwningPlayer=null
// group bj_groupAddGroupDest=null
// location bj_enumDestructableCenter=null
// real bj_enumDestructableRadius=0.
// group bj_suspendDecayFleshGroup=null
// group bj_suspendDecayBoneGroup=null
// timer bj_delayedSuspendDecayTimer=null
// trigger bj_delayedSuspendDecayTrig=null
// integer bj_livingPlayerUnitsTypeId=0
// unit bj_lastCreatedUnit=null
// group bj_lastCreatedGroup=null
// effect bj_lastCreatedEffect=null
// timer bj_lastStartedTimer=null
// boolean bj_wantDestroyGroup=false
// integer PLAYER_NEUTRAL_PASSIVE=0
// integer PLAYER_NEUTRAL_AGGRESSIVE=0
// playercolor PLAYER_COLOR_LIGHT_BLUE=null
// alliancetype ALLIANCE_PASSIVE=null
// alliancetype ALLIANCE_HELP_REQUEST=null
// alliancetype ALLIANCE_HELP_RESPONSE=null
// alliancetype ALLIANCE_SHARED_XP=null
// alliancetype ALLIANCE_SHARED_SPELLS=null
// alliancetype ALLIANCE_SHARED_VISION=null
// alliancetype ALLIANCE_SHARED_CONTROL=null
// alliancetype ALLIANCE_SHARED_ADVANCED_CONTROL=null
// version VERSION_REIGN_OF_CHAOS=null
// attacktype ATTACK_TYPE_NORMAL=null
// attacktype ATTACK_TYPE_CHAOS=null
// damagetype DAMAGE_TYPE_NORMAL=null
// damagetype DAMAGE_TYPE_LIGHTNING=null
// damagetype DAMAGE_TYPE_MAGIC=null
// damagetype DAMAGE_TYPE_UNIVERSAL=null
// weapontype WEAPON_TYPE_WHOKNOWS=null
// racepreference RACE_PREF_HUMAN=null
// mapcontrol MAP_CONTROL_USER=null
// mapcontrol MAP_CONTROL_RESCUABLE=null
// placement MAP_PLACEMENT_USE_MAP_SETTINGS=null
// playerslotstate PLAYER_SLOT_STATE_PLAYING=null
// fgamestate GAME_STATE_TIME_OF_DAY=null
// playerstate PLAYER_STATE_RESOURCE_LUMBER=null
// playerstate PLAYER_STATE_GIVES_BOUNTY=null
// unitstate UNIT_STATE_LIFE=null
// unitstate UNIT_STATE_MAX_LIFE=null
// unitstate UNIT_STATE_MANA=null
// unitstate UNIT_STATE_MAX_MANA=null
// playerevent EVENT_PLAYER_END_CINEMATIC=null
// playerunitevent EVENT_PLAYER_UNIT_RESCUED=null
// playerunitevent EVENT_PLAYER_UNIT_DEATH=null
// playerunitevent EVENT_PLAYER_UNIT_ISSUED_ORDER=null
// playerunitevent EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER=null
// playerunitevent EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER=null
// playerunitevent EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER=null
// playerunitevent EVENT_PLAYER_UNIT_PICKUP_ITEM=null
// playerunitevent EVENT_PLAYER_UNIT_USE_ITEM=null
// unitevent EVENT_UNIT_SELECTED=null
// unitevent EVENT_UNIT_ATTACKED=null
// playerevent EVENT_PLAYER_MOUSE_MOVE=null
// playerunitevent EVENT_PLAYER_UNIT_SELL_ITEM=null
// playerunitevent EVENT_PLAYER_UNIT_SPELL_EFFECT=null
// playerunitevent EVENT_PLAYER_UNIT_SPELL_ENDCAST=null
// limitop LESS_THAN=null
// limitop EQUAL=null
// limitop GREATER_THAN_OR_EQUAL=null
// unittype UNIT_TYPE_HERO=null
// unittype UNIT_TYPE_STRUCTURE=null
// unittype UNIT_TYPE_ANCIENT=null
// itemtype ITEM_TYPE_PERMANENT=null
// itemtype ITEM_TYPE_CHARGED=null
// itemtype ITEM_TYPE_ARTIFACT=null
// camerafield CAMERA_FIELD_TARGET_DISTANCE=null
// blendmode BLEND_MODE_BLEND=null
// fogstate FOG_OF_WAR_VISIBLE=null
// integer CAMERA_MARGIN_LEFT=0
// integer CAMERA_MARGIN_RIGHT=0
// integer CAMERA_MARGIN_TOP=0
// integer CAMERA_MARGIN_BOTTOM=0
location udg_tempPoint=null
unit udg_tempUnit=null
unit udg_RedHero=null
boolean array udg_MorbenFell_Booleans
integer udg_TempInt=0
real udg_TempReal=0.
group udg_tempUGroup=null
location udg_tempPoint2=null
integer udg_tempInt=0
boolean udg_ArcaneEmpower=false
effect array udg_ArcaneEmp_SFX
location udg_BlizzardPoint=null
timer array udg_Blizzard_Timer
unit udg_Blizzard_Dummy=null
timer array udg_UnstableMagic_Timer
boolean udg_tempBool=false
timer udg_Shock_Timer=null
effect udg_Shock_SFX=null
timer array udg_ArcaneBarrage_Timer
effect udg_ArcaneBarrage_SFX=null
unit udg_ArcaneBarrage_Target=null
integer array udg_ArcaneBarrage_Counter
effect udg_ArcaneBarrage_BuffSFX=null
effect array udg_IceLance_MissileSFX
real array udg_IceLance_MissilePos
group udg_IceLance_Hits=null
timer array udg_IceLance_Timer
real udg_IceLance_DistTrav=0.
real udg_IceLance_Direction=0.
real array udg_IceLance_Velocity
real udg_tempReal=0.
integer udg_IceLance_EnemyCheckCounter=0
timer array udg_ArcaneEmp_Timer
effect array udg_MagicWard_SFX
timer array udg_MagicWard_Timer
boolean udg_MagicWard_Running=false
rect gg_rct_MorbentAttackZone=null
rect gg_rct_MF_Exit1=null
rect gg_rct_MorbentFel=null
rect gg_rct_MF_Camp=null
rect gg_rct_TheNec_CamBounds=null
rect gg_rct_Earthquake_TestRegion=null
rect gg_rct_Region_014=null
rect gg_rct_Region_016=null
rect gg_rct_VisionZone_Hunters_Lair=null
rect gg_rct_TM_BossSpawn=null
rect gg_rct_TM_HeroSpawn=null
rect gg_rct_TM_ArcaneBeingSpawn=null
rect gg_rct_TM_VisionRect=null
rect gg_rct_TM_MagicCrystal1=null
rect gg_rct_TM_MagicCrystal3=null
rect gg_rct_TM_MagicCrystal2=null
rect gg_rct_HunterStart=null
rect gg_rct_TM_Fog_Zone=null
rect gg_rct_TheBear_CamBounds=null
rect gg_rct_TheBear_Effect1=null
rect gg_rct_TheNec_MobSpawn=null
sound gg_snd_Error=null
sound gg_snd_BlizzardLoop1=null
sound gg_snd_Hint=null
sound gg_snd_QuestCompleted=null
sound gg_snd_KelThuzadDeath1=null
sound gg_snd_GoodJob=null
sound gg_snd_PursuitTheme=null
sound gg_snd_DarkAgents=null
sound gg_snd_AbominationPissed5=null
sound gg_snd_O04Mannoroth38=null
sound gg_snd_SpellStealMissile=null
sound gg_snd_IceLanceFire=null
sound gg_snd_IceLanceHit=null
sound gg_snd_SiphonManaLoop=null
sound gg_snd_ObsidianAvengerWhat2=null
sound gg_snd_QuestActivateWhat1=null
sound gg_snd_UndeadGlueScreenLoop1=null
sound gg_snd_WaterStreamLoop1=null
sound gg_snd_OrcVictory=null
trigger gg_trg_Custom_Init=null
trigger gg_trg_Untitled_Trigger_005=null
trigger gg_trg_Untitled_Trigger_006=null
trigger gg_trg_Untitled_Trigger_007=null
trigger gg_trg_Repeat_Music=null
trigger gg_trg_Untitled_Trigger_001=null
trigger gg_trg_Mana_Regeneration=null
trigger gg_trg_Healing_Potion_Effect=null
trigger gg_trg_Buy_SPells=null
trigger gg_trg_Remove_Q_Spells=null
trigger gg_trg_Remove_E_Spells=null
trigger gg_trg_Remove_W_Spells=null
trigger gg_trg_Remove_R_Spells=null
trigger gg_trg_Untitled_Trigger_003=null
trigger gg_trg_Healing_Stone=null
trigger gg_trg_Volcano_Strike=null
trigger gg_trg_Blizzard_Start=null
trigger gg_trg_Blizzard_Stop=null
trigger gg_trg_Blizzard_Slow=null
trigger gg_trg_Arcane_Power=null
trigger gg_trg_Arcane_Emp_End=null
trigger gg_trg_Arcane_Emp_Move_Sfx=null
trigger gg_trg_Arcane_Discharge=null
trigger gg_trg_Arcane_Depletion=null
trigger gg_trg_Burn=null
trigger gg_trg_Shock=null
trigger gg_trg_Shock_Destory_Effect=null
trigger gg_trg_Magic_Ward_Start=null
trigger gg_trg_Untitled_Trigger_002=null
trigger gg_trg_Magic_Ward_Update=null
trigger gg_trg_Magic_Ward_Pause_Effect=null
trigger gg_trg_Magic_Ward_End=null
trigger gg_trg_Magic_Ward_Delayed_SFX_Destruction=null
trigger gg_trg_Ice_Lance_Start=null
trigger gg_trg_Ice_Lance_Move=null
trigger gg_trg_Ice_Lance_Damage=null
trigger gg_trg_Arcane_Barrage_Start=null
trigger gg_trg_Arcane_Barrage_Buff=null
trigger gg_trg_Arcane_Barrage_Fall=null
trigger gg_trg_Arcane_Barrage_Damage=null
trigger gg_trg_Arcane_Barrage_End=null
trigger gg_trg_Unstable_Magic_Start=null
trigger gg_trg_Unstable_Magic_Stop=null
trigger gg_trg_Untitled_Trigger_008=null
trigger gg_trg_Ghoul_Spawn=null
trigger gg_trg_Plague_Zombie_Spawn=null
trigger gg_trg_Skeletal_Mages=null
trigger gg_trg_Skeleton_Spawns=null
trigger gg_trg_Lightning_Enhancement_Effect=null
trigger gg_trg_Earthquake=null
destructable gg_dest_DTc2_2577=null
trigger gg_trg_Untitled_Trigger_009=null
string Abilities_farseerMissile=null
string Abilities_forkedLightningTarget=null
real Angle_DEGTORAD=0.
real Angle_RADTODEG=0.
real Basics_ANIMATION_PERIOD=0.
integer Basics_HEIGHT_ENABLER=0
integer Basics_LOCUST_ID=0
player Basics_DUMMY_PLAYER=null
integer array AddSpawner_adds
timer array AddSpawner_timer_Spawn
integer array AddSpawner_damage
real array AddSpawner_armor
integer array AddSpawner_health
integer array AddSpawner_mana
real array AddSpawner_moveSpeed
real array AddSpawner_attackSpeed
real array AddSpawner_spawnFreq
player array AddSpawner_owner
integer array AddSpawner_addId
rect array AddSpawner_spawnRect
string array AddSpawner_spawnSfx
unit array AddSpawner_target
integer array AddSpawner_funcOnSpawn
unit array Add_mob
unit array Add_target
timer array Add_timer_Attack
real array Add_spawnPoint
real array Add_spawnPoint_2
real Add_UPDATE_FREQ=0.
boolean BossEvent_canLeave=false
timer BossEvent_miscTimer=null
code BossEvent_codeOnFade=null
integer BossEvent_sound_Fail=0
integer BossEvent_sound_Win=0
integer BossEvent_sound_Leave=0
code BossEvent_codeOnInit=null
boolean BossEvent_isRunning=false
integer ClickableObject_placeholderId=0
trigger ClickableObject_clickTrg=null
trigger ClickableObject_attackTrg=null
integer array ClickableObject_classIds
unit array ClickableObject_object
string array ClickableObject_objectAnimation
unit array ClickableObject_unitSfx
string array ClickableObject_unitSfxAnimation
string array ClickableObject_name
string array ClickableObject_description
string array ClickableObject_objType
real array ClickableObject_pos
real array ClickableObject_pos_2
integer array ClickableObject_soundOnClick
integer Mechanic_classId=0
integer array Mechanic_instances
integer array Mechanic_index
string array Mechanic_castBy
integer UnitObject_classId=0
integer array UnitObject_instances
real array UnitObject_movespeed
real array UnitObject_attackspeed
integer array ClosureForGroups_tempCallbacks
integer ClosureForGroups_tempCallbacksCount=0
integer ClosureTimers_x=0
timer array CallbackSingle_t
integer Colors_COLOR_WHITE_red=0
integer Colors_COLOR_WHITE_green=0
integer Colors_COLOR_WHITE_blue=0
integer Colors_COLOR_WHITE_alpha=0
string array Colors_hexs
integer Colors_decs=0
real DayCycle_time=0.
real DayCycle_timeScale=0.
boolean DayCycle_enabled=false
real DiseaseCloud_DAMAGEFREQ=0.
boolean DiseaseCloud_STACKDAMAGE=false
string DiseaseCloud_SFX=null
boolean DiseaseCloud_DEBUG=false
unit array DiseaseCloud_hitTargets
integer DiseaseCloud_hitTargets_HighestIndex=0
integer DiseaseCloud_instances=0
boolean DiseaseCloud_hasBeenInitialized=false
timer array DiseaseCloud_timer_Damage
timer array DiseaseCloud_timer_Duration
real array DiseaseCloud_damage
real array DiseaseCloud_pos
real array DiseaseCloud_pos_2
unit array DiseaseCloud_dummy
real array DiseaseCloud_range
effect array DiseaseCloud_sfx
integer Disease_instances=0
integer Disease_instanceCount=0
trigger Disease_trg_UnitDies=null
trigger Disease_trg_UnitIsRemoved=null
boolean Disease_hasBeenInitialized=false
boolean array Disease_leaveCloud
real array Disease_diseaseDamage
real array Disease_diseaseRange
real array Disease_cloudDamage
real array Disease_cloudDuration
real array Disease_cloudRange
unit array Disease_unitWithAbility
effect array Disease_sfx
timer array Disease_timer_Damage
integer DummyRecycler_DUMMY_UNIT_ID=0
integer DummyRecycler_DIFFERENT_ANGLES=0
real DummyRecycler_ANGLE_DEGREE=0.
integer DummyRecycler_SAVED_UNITS_PER_ANGLE=0
integer array ArrayQueue_rp
integer array ArrayQueue_size
timer DelayNode_t=null
unit array DelayNode_u
real array DelayNode_delayTime
integer array DelayNode_next
integer DelayNode_first=0
integer array DummyRecycler_angleQueues
integer ErrorHandling_MUTE_ERROR_DURATION=0
integer ErrorHandling_PRIMARY_ERROR_KEY=0
hashtable ErrorHandling_HT=null
boolean ErrorHandling_suppressErrorMessages=false
real ExecutableEffect_DURATION=0.
integer array ExecutableEffect_instances
integer ExecutableEffect_instanceCount=0
integer array ExecutableEffect_index
effect array ExecutableEffect_sfx
string array ExecutableEffect_sfxModel
real array ExecutableEffect_pos
real array ExecutableEffect_pos_2
real array ExecutableEffect_pos_3
timer array ExecutableEffect_t
boolean array ExecutableEffect_destroyOnStart
integer FadeAndFilters_FADEOUT=0
integer FadeAndFilters_FADEIN=0
integer FadeAndFilters_FADEOUTIN=0
integer array Fade_typeOfFade
code Fade_codeOnFadeOut=null
code Fade_codeOnFadeIn=null
real array Fade_fadeOutDuration
real array Fade_fadeInDuration
real array Fade_startDelay
real array Fade_midDelay
real array Fade_endDelay
boolean array Fade_stayFadedOut
boolean array Fade_cinematicMode
timer array Fade_t1
timer array Fade_t2
timer GameTimer_gameTimer=null
real GameTimer_currentTime=0.
boolean General_PRESETHERO=false
boolean General_LOCKCAMONINIT=false
unit General_hero=null
unit General_hunter=null
boolean General_doCheckCoordinates=false
boolean General_hunterIsDead=false
group Group_ENUM_GROUP=null
integer Group_unitCounter=0
integer Group_randomCounter=0
unit Group_randomSelected=null
group Group_iterGroup=null
hashtable HashList_ht=null
hashtable HashList_occurences=null
integer array HashList_size
integer array IterableMap_keys
integer InstantDummyCaster_DUMMY_CASTER_UNIT_ID=0
unit InstantDummyCaster_caster=null
unit InteractableObjects_orderTarget=null
real InteractableObject_STANDARD_ACTIVATEDISTANCE=0.
real InteractableObject_STANDARD_MODELSIZE=0.
integer InteractableObject_UNITID=0
integer InteractableObject_MARKERID=0
integer InteractableObject_SFXID=0
integer InteractableObject_STANDARDSOUND=0
group InteractableObject_filterGroup=null
integer InteractableObject_SERIES_THEMONSTER=0
integer array InteractableObject_instances
integer InteractableObject_instanceCount=0
integer array InteractableObject_index
integer array InteractableObject_customSound
boolean array InteractableObject_soundOnPoint
boolean array InteractableObject_playSound
boolean array InteractableObject_removeOnInteract
real array InteractableObject_activateDist
unit array InteractableObject_object
unit array InteractableObject_sfx
string array InteractableObject_name
string array InteractableObject_info
integer array InteractableObject_series
string array InteractableObject_infoName
real array InteractableObject_scale
real array InteractableObject_SFXZ
timer array InteractableObject_t
real array InteractableObject_pos
real array InteractableObject_pos_2
integer array LLEntry_elem
integer array LLEntry_prev
integer array LLEntry_next
integer array LLIterator_dummy
integer array LLIterator_current
integer array LLIterator_parent
boolean array LLIterator_destroyOnClose
integer array LinkedList_dummy
integer array LinkedList_size
integer array LinkedList_staticItr
integer array LinkedList_staticBackItr
boolean MagicFunctions_compiletime=false
rect MapBounds_playableMapRect=null
rect MapBounds_boundRect=null
region MapBounds_boundRegion=null
real MapBounds_playableMin_x=0.
real MapBounds_playableMin_y=0.
real MapBounds_playableMax_x=0.
real MapBounds_playableMax_y=0.
real MapBounds_boundMin_x=0.
real MapBounds_boundMin_y=0.
real MapBounds_boundMax_x=0.
real MapBounds_boundMax_y=0.
real Maths_PI=0.
real Maths_PI2=0.
real Maths_PIHALF=0.
string Music_currentMusic=null
real Music_musicLength=0.
timer Music_loopTimer=null
string ObjectIds_CHARMAP=null
trigger OnUnitEnterLeave_eventTrigger=null
group OnUnitEnterLeave_preplacedUnits=null
unit array OnUnitEnterLeave_tempUnits
integer OnUnitEnterLeave_tempUnitsCount=0
integer OnUnitEnterLeave_ABILITY_ID=0
integer Orders_carrionswarm=0
integer Orders_fingerofdeath=0
integer Orders_frostnova=0
integer Orders_move=0
integer Orders_slow=0
integer SpecialOrders_smart=0
player array Player_players
player Player_localPlayer=null
boolean Preloader_autoFinish=false
group Preloader_dumg=null
unit Preloader_dum=null
integer Printing_DEBUG_LEVEL=0
real Printing_DEBUG_MSG_DURATION=0.
real Real_REAL_MAX=0.
trigger array RegisterEvents_t
integer RegisterEvents_onCastMap=0
integer SoundUtils_DEFAULT_SOUND_FADE_IN_RATE=0
integer SoundUtils_DEFAULT_SOUND_FADE_OUT_RATE=0
string SoundUtils_DEFAULT_SOUND_EAX_SETTINGS=null
integer SoundUtils_DEFAULT_SOUND_VOLUME=0
real SoundUtils_DEFAULT_SOUND_PITCH=0.
integer SoundUtils_DEFAULT_SOUND_DURATION=0
integer SoundUtils_SOUND_CHANNEL=0
real SoundUtils_SOUND_MIN_DIST=0.
real SoundUtils_SOUND_MAX_DIST=0.
real SoundUtils_SOUND_DIST_CUT=0.
real array DynamicSound_targetPitch
real array DynamicSound_currentPitch
real array DynamicSound_smoothness
real array DynamicSound_minimumLength
integer array DynamicSound_soundData
integer array DynamicSound_TimedLoop_instances
integer DynamicSound_TimedLoop_instanceCount=0
triggercondition DynamicSound_TimedLoop_triggerCond=null
integer array DynamicSound_TimedLoop_mode
integer array SoundDefinition_soundStack
string array SoundDefinition_file
integer array SoundDefinition_duration
boolean array SoundDefinition_looping
boolean array SoundDefinition_is3D
boolean array SoundDefinition_stopOnLeaveRange
integer array SoundDefinition_fadeIn
integer array SoundDefinition_fadeOut
string array SoundDefinition_eaxSetting
real array SoundInstance_pos
real array SoundInstance_pos_2
real array SoundInstance_pos_3
sound array SoundInstance_snd
integer array SoundInstance_soundDef
unit array SoundInstance_onUnit
player array SoundInstance_p
integer array SoundInstance_s3s
string Sounds_arcaneVaultWhat1=null
string Sounds_battleRoar1=null
string Sounds_catapultMissile4=null
string Sounds_comradeship=null
string Sounds_frostArrowHit1=null
string Sounds_grizzlyBearReady1=null
string Sounds_koboldWhat2=null
string Sounds_mouseClick1=null
string Sounds_nightElfX1=null
string Sounds_obsidianAvengerWhat2=null
string Sounds_orcVictory=null
string Sounds_questActivateWhat1=null
string Sounds_questCompleted=null
string Sounds_questFailed=null
string Sounds_questNew=null
string Sounds_siphonManaLoop=null
string Sounds_undeadGlueScreenLoop1=null
string Sounds_wayPointBling=null
string Sounds_woodHeavyBashFlesh1=null
string Sounds_woodHeavyBashFlesh2=null
string Sounds_woodHeavyBashFlesh3=null
integer Stats_SHOP_ID=0
integer Stats_START_STATPOINTS=0
integer Stats_TRAININGID_INT1=0
integer Stats_TRAININGID_INT5=0
integer Stats_TRAININGID_STR1=0
integer Stats_TRAININGID_STR5=0
integer Stats_TRAININGID_AGI1=0
integer Stats_TRAININGID_AGI5=0
integer Stats_TRAININGID_RESET=0
integer Stats_INT=0
integer Stats_STR=0
integer Stats_AGI=0
integer Stats_startInt=0
integer Stats_startStr=0
integer Stats_startAgi=0
boolean Stats_firstTime=false
string array StringUtils_c2s
integer StringUtils_MAX_INDEX=0
string String_charset=null
string String_numberset=null
hashtable Table_ht=null
effect array EffectDuration_SFX
timer array EffectDuration_t
timer array TimerUtils_freeTimers
integer TimerUtils_freeTimersCount=0
integer TimerUtils_timerData=0
integer TimerUtils_HELD=0
trigger TimerUtils_timedLoopTrig=null
integer TimerUtils_conditionCount=0
integer TypeCasting_typecastdata=0
real TypeCasting_R2I_PRECISION=0.
trigger UnitIndexer_onIndexTrigger=null
trigger UnitIndexer_onDeindexTrigger=null
unit array UnitIndex__unit
real UnitLightning_UPDATE_FREQ=0.
lightning array UnitLightning_sfx
unit array UnitLightning_source
unit array UnitLightning_target
real array UnitLightning_sourceZ
real array UnitLightning_targetZ
timer array UnitLightning_updateTimer
timer array UnitLightning_durationTimer
real Vectors_ZERO2_x=0.
real Vectors_ZERO2_y=0.
location Vectors_tempLoc=null
real array ZoneTransit_landing
real array ZoneTransit_landing_2
real array ZoneTransit_camPanPoint
real array ZoneTransit_camPanPoint_2
rect array ZoneTransit_camBounds
boolean array ZoneTransit_alwaysNight
integer array Attack_hitSounds
real Attack_ATTACKRANGE=0.
real Attack_UPDATEMOVE_FREQ=0.
boolean Attack_onCooldown=false
boolean Attack_updateMove=false
timer Attack_timer_UpdateMove=null
timer Attack_timer_AttackCD=null
boolean Bleed_ENABLED=false
real Bleed_DMG=0.
real Bleed_DMG_FREQ=0.
real Bleed_DURATION=0.
boolean Bleed_RESETFREQONSTACK=false
integer Bleed_stacks=0
timer Bleed_timer_UpdateText=null
timer Bleed_timer_Damage=null
timer Bleed_timer_Duration=null
texttag Bleed_text=null
string Bleed_EFFECT=null
boolean Charge_ENABLED=false
boolean Charge_STARTWITHCOOLDOWN=false
real Charge_COOLDOWN=0.
real Charge_DAMAGE=0.
real Charge_STUN_DURATION_BEAR=0.
integer Charge_STUN_DURATION_HUNTER=0
real Charge_SPEED=0.
real Charge_HITRANGE=0.
real Charge_MOVE_ADJUSTPERSEC=0.
real Charge_MOVE_UPDATEFREQ=0.
real Charge_MOVE_RANGEPERUPDATE=0.
boolean Charge_isReady=false
real Charge_targetPoint_x=0.
real Charge_targetPoint_y=0.
timer Charge_timer_Misc=null
timer Charge_timer_Animation=null
timer Charge_timer_SFX=null
timer Charge_timer_Shake=null
effect Charge_stunSFX=null
integer Charge_effectSound1=0
integer Charge_effectSound2=0
integer array Rock_objects
integer array Rock_index
real array Rock_pos
real array Rock_pos_2
real array Rock_POS
real array Rock_POS_2
string array Rock_models
effect array Rock_model
unit array Rock_collisionDummy
real Enrage_damageInc=0.
real Enrage_sizeInc=0.
real Enrage_greenPercReduc=0.
real Enrage_bluePercReduc=0.
real Enrage_count=0.
boolean Frenzy_ENABLED=false
real Frenzy_MOVESPEEDINC=0.
real Frenzy_ATTACKSPEEDINC=0.
real Frenzy_SIZEINC=0.
real Frenzy_DURATION=0.
real Frenzy_COOLDOWN=0.
real Frenzy_FINISH_DELAY=0.
boolean Frenzy_STARTWITHCOOLDOWN=false
real Frenzy_GROWTHFREQ=0.
real Frenzy_GROWTHTIME=0.
boolean Frenzy_isReady=false
boolean Frenzy_isActive=false
boolean Frenzy_shrink=false
real Frenzy_sizeInc=0.
real Frenzy_GROWTHPRTICK=0.
timer Frenzy_timer_Misc=null
timer Frenzy_timer_Duration=null
integer Frenzy_effectSound1=0
integer Frenzy_effectSound2=0
effect array Frenzy_sfx
integer TheBear_HP=0
real TheBear_ARMOR=0.
real TheBear_MOVESPEED=0.
real TheBear_ATTACKSPEED=0.
integer TheBear_ATTACKDMG=0
real TheBear_MAINLOOP_FREQ=0.
integer TheBear_BOSSID=0
integer TheBear_startRed=0
integer TheBear_startGreen=0
integer TheBear_startBlue=0
real TheBear_startScale=0.
real TheBear_currentAttackSpeed=0.
real TheBear_damageInc=0.
trigger TheBear_trg_Death=null
boolean TheBear_isIdle=false
boolean TheBear_canAttack=false
unit TheBear_theBear=null
timer TheBear_mainLoopTimer=null
timer TheBear_idleDelayTimer=null
rect TheBear_camBounds=null
boolean Shockwave_ENABLED=false
real Shockwave_DAMAGE=0.
real Shockwave_COOLDOWN=0.
real Shockwave_WIDTH=0.
real Shockwave_SPEED=0.
real Shockwave_MIN_DIST=0.
real Shockwave_DISTANCE=0.
real Shockwave_STARTDELAY=0.
real Shockwave_DELAYRESETTIME=0.
real Shockwave_IDLE_DELAY=0.
boolean Shockwave_isReady=false
boolean Shockwave_delayHasRun=false
boolean Shockwave_delayIsRunning=false
group Shockwave_targetsHit=null
group Shockwave_tempGroup=null
real Shockwave_dist=0.
real Shockwave_direction_radians=0.
real Shockwave_pos_x=0.
real Shockwave_pos_y=0.
real Shockwave_pos_z=0.
timer Shockwave_timer_DmgTimer=null
timer Shockwave_timer_Cooldown=null
timer Shockwave_timer_Status=null
unit Shockwave_caster=null
integer Archer_DAMAGE=0
real Archer_ARMOR=0.
integer Archer_HEALTH=0
integer Archer_MANA=0
real Archer_MOVESPEED=0.
real Archer_ATTACKSPEED=0.
real Archer_SPAWNFREQ=0.
integer Archer_ID=0
integer Archer_spawner=0
rect Archer_spawnRect=null
integer Cauldron_HP=0
real Cauldron_SUMMONTIME=0.
integer Cauldron_ID=0
real Cauldron_POS_x=0.
real Cauldron_POS_y=0.
timer Cauldron_timer_Countdown=null
timerdialog Cauldron_timerDialog_Countdown=null
integer Ghoul_DAMAGE=0
real Ghoul_ARMOR=0.
integer Ghoul_HEALTH=0
integer Ghoul_MANA=0
real Ghoul_MOVESPEED=0.
real Ghoul_ATTACKSPEED=0.
real Ghoul_SPAWNFREQ=0.
integer Ghoul_ID=0
integer Ghoul_spawner=0
rect Ghoul_spawnRect=null
integer Mage_DAMAGE=0
real Mage_ARMOR=0.
integer Mage_HEALTH=0
real Mage_MOVESPEED=0.
real Mage_ATTACKSPEED=0.
real Mage_SPAWNFREQ=0.
integer Mage_ID=0
integer Mage_spawner=0
rect Mage_spawnRect=null
real TheNecromancer_hunterSpawn_x=0.
real TheNecromancer_hunterSpawn_y=0.
timer TheNecromancer_timer_MainLoop=null
rect TheNecromancer_camBounds=null
integer Zombie_DAMAGE=0
real Zombie_ATTACKSPEED=0.
integer Zombie_HEALTH=0
real Zombie_ARMOR=0.
real Zombie_MOVESPEED=0.
real Zombie_SPAWNFREQ=0.
integer Zombie_ID=0
integer Zombie_spawner=0
rect Zombie_spawnRect=null
group ArcaneBeing_allMobs=null
rect ArcaneBeing_SPAWNAREA=null
integer ArcaneBeing_UNITID=0
integer ArcaneBeing_HP=0
real ArcaneBeing_ARMOR=0.
real ArcaneBeing_MOVESPEED=0.
real ArcaneBeing_ATTACKSPEED=0.
real ArcaneBeing_STARTDMG=0.
real ArcaneBeing_GROWTH_DURATION=0.
real ArcaneBeing_GROWTH_SCALE=0.
real ArcaneBeing_GROWTH_DMG=0.
real ArcaneBeing_GROWTH_FREQ=0.
integer ArcaneBeing_GROWTH_MAXCOUNT=0
real ArcaneBeing_GROWTH_DMG_PER_GROWTH=0.
real ArcaneBeing_GROWTH_SCALE_PER_GROWTH=0.
real ArcaneBeing_STARTSCALE=0.
real ArcaneBeing_COOLDOWN=0.
integer ArcaneBeing_sound_Spawn=0
integer array ArcaneBeing_growthCounter
unit array ArcaneBeing_mob
real array ArcaneBeing_dmg
timer array ArcaneBeing_miscTimer
real array ArcaneBeing_scale
real array ArcaneBeing_pos
real array ArcaneBeing_pos_2
timer ArcaneBeing_cooldownTimer=null
boolean FlameStrike_isReady=false
integer FlameStrike_INITDMG_REPEATS=0
real FlameStrike_INITDMG_FREQ=0.
real FlameStrike_INITDMG_AMOUNT=0.
real FlameStrike_INITDMG_DELAY=0.
real FlameStrike_COOLDOWN=0.
real FlameStrike_AOERANGE=0.
real FlameStrike_BURN_DMG=0.
real FlameStrike_BURN_CHECK_FREQ=0.
real FlameStrike_BURN_FREQ=0.
integer array FlameStrike_instances
integer FlameStrike_instanceCounter=0
boolean array FlameStrike_readyToBurn
real array FlameStrike_pos
real array FlameStrike_pos_2
integer array FlameStrike_initDmgCount
timer array FlameStrike_miscTimer
timer FlameStrike_cooldownTimer=null
timer FlameStrike_burnTimer=null
boolean FlameStrike_burnIsActive=false
real IceBlast_COOLDOWN=0.
real IceBlast_DAMAGE=0.
integer IceBlast_sound_Hit=0
boolean IceBlast_isReady=false
timer IceBlast_cooldownTimer=null
real MagicCrystal_ABSORB_DUR=0.
integer MagicCrystal_CRYSTAL_HP=0
real MagicCrystal_LIGHTNING_DMG=0.
real MagicCrystal_LIGHTNING_FREQ=0.
real array MagicCrystal_activationHp
integer array MagicCrystal_crystals
rect array MagicCrystal_spawnRect
integer MagicCrystal_placeholderId=0
integer MagicCrystal_sfxId=0
integer MagicCrystal_sound_AbsorbCrystal=0
real MagicCrystal_standardMoveSpeed=0.
real array MagicCrystal_pos
real array MagicCrystal_pos_2
unit array MagicCrystal_crystal
effect array MagicCrystal_crystalSFX
unit array MagicCrystal_placeholder
timer array MagicCrystal_lightningTimer
integer array MagicCrystal_index
boolean array MagicCrystal_hasRun
effect MagicCrystal_sfx_Shield=null
effect array MagicCrystal_absorbSFX
timer MagicCrystal_runTimer1=null
timer MagicCrystal_runTimer2=null
timer MagicCrystal_runTimer3=null
effect array MagicCrystal_enrageSFX
unit tm_Main_theMonster=null
integer tm_Main_bossId=0
boolean tm_Main_bossIsEnraged=false
boolean tm_Main_bossHasAbsorbed=false
boolean tm_Main_FLAMESTRIKE_TOGGLE=false
boolean tm_Main_ARCANEBEING_TOGGLE=false
boolean tm_Main_ICEBLAST_TOGGLE=false
boolean tm_Main_MAGICCRYSTAL_TOGGLE=false
boolean tm_Main_ENRAGE_TOGGLE=false
real tm_Main_bossSpawn_x=0.
real tm_Main_bossSpawn_y=0.
real tm_Main_heroSpawn_x=0.
real tm_Main_heroSpawn_y=0.
rect tm_Main_visionRect=null
timer tm_Main_loopTimer=null
real tm_Main_LOOP_FREQ=0.
timer tm_Main_busyDelayTimer=null
boolean tm_Main_bossIsIdle=false
real tm_Main_bossDmgInc=0.
integer tm_Main_THEMONSTER_HP=0
integer tm_Main_THEMONSTER_DAMAGE=0
real tm_Main_THEMONSTER_ATTACKSPEED=0.
real tm_Main_THEMONSTER_MOVESPEED=0.
real tm_Main_ENRAGE_DMGINC=0.
real tm_Main_CRYSTALABSORBED_DMGINC=0.
boolean tm_Main_thisEventIsRunning=false
integer array Add_nextFree
integer Add_firstFree=0
integer Add_maxIndex=0
integer array Add_typeId
integer array AddSpawner_nextFree
integer AddSpawner_firstFree=0
integer AddSpawner_maxIndex=0
integer array AddSpawner_typeId
integer array RemoteFunction_nextFree
integer RemoteFunction_firstFree=0
integer RemoteFunction_maxIndex=0
integer array RemoteFunction_typeId
integer array ClickableObject_nextFree
integer ClickableObject_firstFree=0
integer ClickableObject_maxIndex=0
integer array ClickableObject_typeId
integer array ForGroupCallback_nextFree
integer ForGroupCallback_firstFree=0
integer ForGroupCallback_maxIndex=0
integer array ForGroupCallback_typeId
integer array CallbackSingle_nextFree
integer CallbackSingle_firstFree=0
integer CallbackSingle_maxIndex=0
integer array CallbackSingle_typeId
integer array Disease_nextFree
integer Disease_firstFree=0
integer Disease_maxIndex=0
integer array Disease_typeId
integer array DiseaseCloud_nextFree
integer DiseaseCloud_firstFree=0
integer DiseaseCloud_maxIndex=0
integer array DiseaseCloud_typeId
integer array ArrayQueue_nextFree
integer ArrayQueue_firstFree=0
integer ArrayQueue_maxIndex=0
integer array ArrayQueue_typeId
integer DelayNode_firstFree=0
integer array DelayNode_typeId
integer array ExecutableEffect_nextFree
integer ExecutableEffect_firstFree=0
integer ExecutableEffect_maxIndex=0
integer array ExecutableEffect_typeId
integer array Fade_nextFree
integer Fade_firstFree=0
integer Fade_maxIndex=0
integer array Fade_typeId
integer array HashList_nextFree
integer HashList_firstFree=0
integer HashList_maxIndex=0
integer array HashList_typeId
integer array Table_nextFree
integer Table_firstFree=0
integer Table_maxIndex=0
integer array Table_typeId
integer array InteractableObject_nextFree
integer InteractableObject_firstFree=0
integer InteractableObject_maxIndex=0
integer array InteractableObject_typeId
integer array Comparator_nextFree
integer Comparator_firstFree=0
integer Comparator_maxIndex=0
integer LLBackIterator_firstFree=0
integer array LLBackIterator_typeId
integer array LLEntry_nextFree
integer LLEntry_firstFree=0
integer LLEntry_maxIndex=0
integer array LLEntry_typeId
integer array LLIterator_nextFree
integer LLIterator_firstFree=0
integer LLIterator_maxIndex=0
integer array LLIterator_typeId
integer array LinkedList_nextFree
integer LinkedList_firstFree=0
integer LinkedList_maxIndex=0
integer array LinkedList_typeId
integer array IdGenerator_nextFree
integer IdGenerator_firstFree=0
integer IdGenerator_maxIndex=0
integer Sim3DSound_firstFree=0
integer array Sim3DSound_typeId
integer DynamicSound_firstFree=0
integer array DynamicSound_typeId
integer array SoundDefinition_nextFree
integer SoundDefinition_firstFree=0
integer SoundDefinition_maxIndex=0
integer array SoundDefinition_typeId
integer array SoundInstance_nextFree
integer SoundInstance_firstFree=0
integer SoundInstance_maxIndex=0
integer array SoundInstance_typeId
integer array EffectDuration_nextFree
integer EffectDuration_firstFree=0
integer EffectDuration_maxIndex=0
integer array EffectDuration_typeId
integer array UnitIndex_nextFree
integer UnitIndex_firstFree=0
integer UnitIndex_maxIndex=0
integer array UnitIndex_typeId
integer array UnitLightning_nextFree
integer UnitLightning_firstFree=0
integer UnitLightning_maxIndex=0
integer array UnitLightning_typeId
integer array Rock_nextFree
integer Rock_firstFree=0
integer Rock_maxIndex=0
integer array Rock_typeId
integer array ArcaneBeing_nextFree
integer ArcaneBeing_firstFree=0
integer ArcaneBeing_maxIndex=0
integer array ArcaneBeing_typeId
integer array FlameStrike_nextFree
integer FlameStrike_firstFree=0
integer FlameStrike_maxIndex=0
integer array FlameStrike_typeId
integer array MagicCrystal_nextFree
integer MagicCrystal_firstFree=0
integer MagicCrystal_maxIndex=0
integer array MagicCrystal_typeId
effect array ClickableObject_sfx_0
effect array ClickableObject_sfx_1
effect array ClickableObject_sfx_2
integer array ClickableObject_sfxOnClick_0
integer array ClickableObject_sfxOnClick_1
integer array ClickableObject_sfxOnClick_2
integer array ExecutableEffect_color_0
integer array ExecutableEffect_color_1
integer array ExecutableEffect_color_2
integer array ExecutableEffect_color_3
integer array Fade_startColor_0
integer array Fade_startColor_1
integer array Fade_startColor_2
effect array FlameStrike_sfx_0
effect array FlameStrike_sfx_1
effect array FlameStrike_sfx_2
effect array FlameStrike_sfx_3
effect array FlameStrike_sfx_4
effect array FlameStrike_sfx_5
effect array FlameStrike_sfx_6
effect array FlameStrike_sfx_7
effect array FlameStrike_sfx_8
effect array FlameStrike_sfx_9
effect array FlameStrike_sfx_10
effect array FlameStrike_sfx_11
effect array FlameStrike_sfx_12
effect array FlameStrike_sfx_13
effect array FlameStrike_sfx_14
effect array FlameStrike_sfx_15
integer wurst_stack_depth=0
string array wurst_stack
real rect_randomPoint_return_x=0.
real rect_randomPoint_return_y=0.
real rect_getCenter_return_x=0.
real rect_getCenter_return_y=0.
real vec2_withTerrainZ_return_x=0.
real vec2_withTerrainZ_return_y=0.
real vec2_withTerrainZ_return_z=0.
real vec2_withTerrainZ_return_x_2=0.
real vec2_withTerrainZ_return_y_2=0.
real vec2_withTerrainZ_return_z_2=0.
real vec2_withZ_return_x=0.
real vec2_withZ_return_y=0.
real vec2_withZ_return_z=0.
real vec3_toVec2_return_x=0.
real vec3_toVec2_return_y=0.
real unit_getPos_return_x=0.
real unit_getPos_return_y=0.
real vec2_toVec3_return_x=0.
real vec2_toVec3_return_y=0.
real vec2_toVec3_return_z=0.
real item_getPos_return_x=0.
real item_getPos_return_y=0.
real widget_getPos_return_x=0.
real widget_getPos_return_y=0.
real vec2_op_plus_return_x=0.
real vec2_op_plus_return_y=0.
real vec2_op_mult_return_x=0.
real vec2_op_mult_return_y=0.
real vec2_withRealZ_return_x=0.
real vec2_withRealZ_return_y=0.
real vec2_withRealZ_return_z=0.
real angle_toVec_return_x=0.
real angle_toVec_return_y=0.
real vec2_op_minus_return_x=0.
real vec2_op_minus_return_y=0.
real vec2_normalizedPointerTo_return_x=0.
real vec2_normalizedPointerTo_return_y=0.
real vec3_op_plus_return_x=0.
real vec3_op_plus_return_y=0.
real vec3_op_plus_return_z=0.
real vec2_moveTowards_return_x=0.
real vec2_moveTowards_return_y=0.
real unit_getPos3Real_return_x=0.
real unit_getPos3Real_return_y=0.
real unit_getPos3Real_return_z=0.
real vec3_offset2d_return_x=0.
real vec3_offset2d_return_y=0.
real vec3_offset2d_return_z=0.
real vec2_polarOffset_return_x=0.
real vec2_polarOffset_return_y=0.
real unit_getPos3Fly_return_x=0.
real unit_getPos3Fly_return_y=0.
real unit_getPos3Fly_return_z=0.
real dispatch_ExecutableEffect_ExecutableEffect_ExecutableEffect_setZ_return_x=0.
real unit_getPos3with_return_x=0.
real unit_getPos3with_return_y=0.
real unit_getPos3with_return_z=0.
real ExecutableEffect_setZ_return_x=0.
real ExecutableEffect_setZ_return_y=0.
real ExecutableEffect_setZ_return_z=0.
code ref_function_Trig_Custom_Init_Actions=null
code ref_function_Trig_Untitled_Trigger_005_Actions=null
code ref_function_Trig_Untitled_Trigger_006_Actions=null
code ref_function_Trig_Untitled_Trigger_007_Actions=null
code ref_function_Trig_Repeat_Music_Actions=null
code ref_function_Trig_Untitled_Trigger_001_Actions=null
code ref_function_Trig_Mana_Regeneration_Actions=null
code ref_function_Trig_Healing_Potion_Effect_Conditions=null
code ref_function_Trig_Healing_Potion_Effect_Actions=null
code ref_function_Trig_Buy_SPells_Conditions=null
code ref_function_Trig_Buy_SPells_Actions=null
code ref_function_Trig_Remove_Q_Spells_Actions=null
code ref_function_Trig_Remove_E_Spells_Actions=null
code ref_function_Trig_Remove_W_Spells_Actions=null
code ref_function_Trig_Remove_R_Spells_Actions=null
code ref_function_Trig_Untitled_Trigger_003_Actions=null
code ref_function_Trig_Healing_Stone_Conditions=null
code ref_function_Trig_Healing_Stone_Actions=null
code ref_function_Trig_Volcano_Strike_Func003001003=null
code ref_function_Trig_Volcano_Strike_Func003A=null
code ref_function_Trig_Volcano_Strike_Conditions=null
code ref_function_Trig_Volcano_Strike_Actions=null
code ref_function_Trig_Blizzard_Start_Conditions=null
code ref_function_Trig_Blizzard_Start_Actions=null
code ref_function_Trig_Blizzard_Stop_Actions=null
code ref_function_Trig_Blizzard_Slow_Func001Func001002003=null
code ref_function_Trig_Blizzard_Slow_Func001Func004A=null
code ref_function_Trig_Blizzard_Slow_Actions=null
code ref_function_Trig_Arcane_Power_Conditions=null
code ref_function_Trig_Arcane_Power_Actions=null
code ref_function_Trig_Arcane_Emp_End_Actions=null
code ref_function_Trig_Arcane_Emp_Move_Sfx_Actions=null
code ref_function_Trig_Arcane_Discharge_Conditions=null
code ref_function_Trig_Arcane_Discharge_Actions=null
code ref_function_Trig_Arcane_Depletion_Conditions=null
code ref_function_Trig_Arcane_Depletion_Actions=null
code ref_function_Trig_Burn_Conditions=null
code ref_function_Trig_Burn_Actions=null
code ref_function_Trig_Shock_Conditions=null
code ref_function_Trig_Shock_Actions=null
code ref_function_Trig_Shock_Destory_Effect_Actions=null
code ref_function_Trig_Magic_Ward_Start_Conditions=null
code ref_function_Trig_Magic_Ward_Start_Actions=null
code ref_function_Trig_Untitled_Trigger_002_Conditions=null
code ref_function_Trig_Untitled_Trigger_002_Actions=null
code ref_function_Trig_Magic_Ward_Update_Actions=null
code ref_function_Trig_Magic_Ward_Pause_Effect_Conditions=null
code ref_function_Trig_Magic_Ward_Pause_Effect_Actions=null
code ref_function_Trig_Magic_Ward_End_Actions=null
code ref_function_Trig_Magic_Ward_Delayed_SFX_Destruction_Actions=null
code ref_function_Trig_Ice_Lance_Start_Conditions=null
code ref_function_Trig_Ice_Lance_Start_Actions=null
code ref_function_Trig_Ice_Lance_Move_Actions=null
code ref_function_Trig_Ice_Lance_Damage_Func002002003=null
code ref_function_Trig_Ice_Lance_Damage_Func003A=null
code ref_function_Trig_Ice_Lance_Damage_Actions=null
code ref_function_Trig_Arcane_Barrage_Start_Conditions=null
code ref_function_Trig_Arcane_Barrage_Start_Actions=null
code ref_function_Trig_Arcane_Barrage_Buff_Actions=null
code ref_function_Trig_Arcane_Barrage_Fall_Actions=null
code ref_function_Trig_Arcane_Barrage_Damage_Func003002003=null
code ref_function_Trig_Arcane_Barrage_Damage_Func004A=null
code ref_function_Trig_Arcane_Barrage_Damage_Actions=null
code ref_function_Trig_Arcane_Barrage_End_Actions=null
code ref_function_Trig_Unstable_Magic_Start_Conditions=null
code ref_function_Trig_Unstable_Magic_Start_Actions=null
code ref_function_Trig_Unstable_Magic_Stop_Actions=null
code ref_function_Trig_Untitled_Trigger_008_Actions=null
code ref_function_Trig_Ghoul_Spawn_Actions=null
code ref_function_Trig_Plague_Zombie_Spawn_Actions=null
code ref_function_Trig_Skeletal_Mages_Actions=null
code ref_function_Trig_Skeleton_Spawns_Actions=null
code ref_function_Trig_Lightning_Enhancement_Effect_Func001002002=null
code ref_function_Trig_Lightning_Enhancement_Effect_Func002A=null
code ref_function_Trig_Lightning_Enhancement_Effect_Func005002003=null
code ref_function_Trig_Lightning_Enhancement_Effect_Func006A=null
code ref_function_Trig_Lightning_Enhancement_Effect_Actions=null
code ref_function_Trig_Earthquake_Actions=null
code ref_function_Trig_Untitled_Trigger_009_Actions=null
code ref_function_init_Abilities=null
code ref_function_init_AbilityIds=null
code ref_function_init_Real=null
code ref_function_init_Integer=null
code ref_function_init_Angle=null
code ref_function_init_String=null
code ref_function_init_Vectors=null
code ref_function_init_Player=null
code ref_function_init_Basics=null
code ref_function_init_Sounds=null
code ref_function_init_Table=null
code ref_function_init_Printing=null
code ref_function_init_GameTimer=null
code ref_function_init_MagicFunctions=null
code ref_function_init_ErrorHandling=null
code ref_function_bridge_init_TimerUtils=null
code ref_function_init_Playercolor=null
code ref_function_bridge_init_Colors=null
code ref_function_init_Group=null
code ref_function_init_Lightning=null
code ref_function_init_Maths=null
code ref_function_bridge_init_TypeCasting=null
code ref_function_bridge_init_Music=null
code ref_function_init_Stats=null
code ref_function_bridge_init_LinkedList=null
code ref_function_init_Simulate3dSound=null
code ref_function_init_SoundUtils=null
code ref_function_init_TargetsAllowed=null
code ref_function_init_Buildings=null
code ref_function_init_Doodads=null
code ref_function_init_Icons=null
code ref_function_init_Objects=null
code ref_function_init_Soundsets=null
code ref_function_init_Textures=null
code ref_function_init_UI=null
code ref_function_init_Units=null
code ref_function_init_UnitIds=null
code ref_function_init_WeatherEffects=null
code ref_function_init_HashList=null
code ref_function_bridge_init_RegisterEvents=null
code ref_function_init_MapBounds=null
code ref_function_bridge_init_DummyRecycler=null
code ref_function_bridge_init_StringUtils=null
code ref_function_init_ObjectIds=null
code ref_function_init_ClosureTimers=null
code ref_function_init_ClosureForGroups=null
code ref_function_bridge_init_Preloader=null
code ref_function_bridge_init_ObjectIdGenerator=null
code ref_function_bridge_init_OnUnitEnterLeave=null
code ref_function_init_UnitIndexer=null
code ref_function_init_DayCycle=null
code ref_function_bridge_init_General=null
code ref_function_init_BossAdd=null
code ref_function_init_FadeAndFilters=null
code ref_function_bridge_init_BossEvent=null
code ref_function_init_ExecutableEffect=null
code ref_function_init_BossInformation=null
code ref_function_init_DiseaseCloud=null
code ref_function_init_InstantDummyCaster=null
code ref_function_init_Orders=null
code ref_function_bridge_init_InteractableObjects=null
code ref_function_init_UnitLightning=null
code ref_function_bridge_init_ZoneTransition=null
code ref_function_init_bear_Main=null
code ref_function_init_bear_Bleed=null
code ref_function_bridge_init_bear_Frenzy=null
code ref_function_bridge_init_bear_Attack=null
code ref_function_bridge_init_bear_Charge=null
code ref_function_init_bear_Enrage=null
code ref_function_bridge_init_bear_Shockwave=null
code ref_function_init_nec_Archer=null
code ref_function_init_nec_Cauldron=null
code ref_function_init_nec_Ghoul=null
code ref_function_init_nec_Mage=null
code ref_function_init_nec_Zombie=null
code ref_function_init_nec_Main=null
code ref_function_bridge_init_tm_MagicCrystal=null
code ref_function_bridge_init_tm_Main=null
code ref_function_bridge_init_tm_ArcaneBeing=null
code ref_function_bridge_init_tm_FlameStrike=null
code ref_function_bridge_init_tm_IceBlast=null
code ref_function_bridge_AddSpawner_spawnAdd=null
code ref_function_bridge_Add_attack=null
code ref_function_BossEvent_toShop=null
code ref_function_BossEvent_inShop=null
code ref_function_bridge_BossEvent_failed_soundDelay=null
code ref_function_bridge_BossEvent_startFade=null
code ref_function_bridge_BossEvent_startFade_2=null
code ref_function_bridge_BossEvent_win_soundDelay=null
code ref_function_bridge_BossEvent_startFade_3=null
code ref_function_BossEvent_onFade=null
code ref_function_bridge_ClickableObject_registerClick=null
code ref_function_ClickableObject_stopAttack=null
code ref_function_bridge_ClosureForGroups_closure_impl=null
code ref_function_bridge_CallbackSingle_closure_impl=null
code ref_function_bridge_removeFromHitTargets=null
code ref_function_bridge_DiseaseCloud_closure_impl=null
code ref_function_bridge_DiseaseCloud_orderDamage=null
code ref_function_bridge_Disease_unitDies=null
code ref_function_bridge_Disease_unitIsRemoved=null
code ref_function_bridge_Disease_orderDamage=null
code ref_function_bridge_DelayNode_recycle=null
code ref_function_bridge_ExecutableEffect_stop=null
code ref_function_bridge_Fade_OnFadeIn=null
code ref_function_bridge_Fade_fadeIn=null
code ref_function_bridge_Fade_endFade=null
code ref_function_bridge_Fade_OnFadeOut=null
code ref_function_bridge_Fade_fadeOut=null
code ref_function_bridge_Fade_fadeIn_2=null
code ref_function_GameTimer_closure_impl=null
code ref_function_checkCoordinates=null
code ref_function_checkCoordinates2=null
code ref_function_pickup=null
code ref_function_getUnitIndex=null
code ref_function_bridge_delayedInit=null
code ref_function_selectionFilter=null
code ref_function_Group_closure_impl=null
code ref_function_Group_closure_impl_2=null
code ref_function_Group_closure_impl_3=null
code ref_function_bridge_isOrdered=null
code ref_function_InteractableObject_filter=null
code ref_function_bridge_InteractableObject_checkDistance=null
code ref_function_replayMusic=null
code ref_function_OnUnitEnterLeave_closure_impl=null
code ref_function_OnUnitEnterLeave_closure_impl_2=null
code ref_function_OnUnitEnterLeave_closure_impl_3=null
code ref_function_bridge_RegisterEvents_closure_impl=null
code ref_function_bridge_DynamicSound_TimedLoop_onExpire=null
code ref_function_bridge_SoundDefinition_playSound=null
code ref_function_bridge_SoundDefinition_recycle=null
code ref_function_bridge_SoundDefinition_playSound_2=null
code ref_function_Stats_train=null
code ref_function_bridge_EffectDuration_destr=null
code ref_function_bridge_UnitIndexer_closure_impl=null
code ref_function_bridge_UnitIndexer_closure_impl_2=null
code ref_function_bridge_UnitLightning_update=null
code ref_function_bridge_UnitLightning_kill=null
code ref_function_bridge_delayedInit_2=null
code ref_function_bridge_Attack_onHit=null
code ref_function_Attack_setUpdateMove=null
code ref_function_Attack_cooldownFinished=null
code ref_function_Bleed_updateText=null
code ref_function_Bleed_dealDamage=null
code ref_function_Bleed_removeStacks=null
code ref_function_bridge_Charge_startDelay1=null
code ref_function_Charge_startDelay2=null
code ref_function_bridge_Charge_move=null
code ref_function_Charge_animation=null
code ref_function_Charge_moveSFX=null
code ref_function_Charge_stop=null
code ref_function_Charge_stopShake=null
code ref_function_Charge_setReady=null
code ref_function_Frenzy_growth=null
code ref_function_Frenzy_stop=null
code ref_function_Frenzy_setReady=null
code ref_function_TheBear_idle=null
code ref_function_bridge_TheBear_initEvent=null
code ref_function_TheBear_someoneDies=null
code ref_function_bridge_TheBear_clearEvent=null
code ref_function_bridge_TheBear_clearEvent_2=null
code ref_function_bridge_TheBear_mainLoop=null
code ref_function_bridge_TheBear_onEventInit=null
code ref_function_TheBear_initFight=null
code ref_function_Shockwave_onCast=null
code ref_function_Shockwave_checkStatus=null
code ref_function_Shockwave_endDelay=null
code ref_function_Shockwave_resetDelay=null
code ref_function_Shockwave_move=null
code ref_function_Shockwave_finishCooldown=null
code ref_function_Shockwave_dmgFilter=null
code ref_function_Cauldron_endCountDown=null
code ref_function_bridge_TheNecromancer_initEvent=null
code ref_function_TheNecromancer_someoneDies=null
code ref_function_bridge_TheNecromancer_phase1=null
code ref_function_bridge_TheNecromancer_onEventInit=null
code ref_function_TheNecromancer_initFight=null
code ref_function_bridge_ArcaneBeing_createBossInfo=null
code ref_function_bridge_ArcaneBeing_spawn=null
code ref_function_bridge_ArcaneBeing_onDeathDelay=null
code ref_function_bridge_ArcaneBeing_grow=null
code ref_function_bridge_ArcaneBeing_orderAttack=null
code ref_function_bridge_FlameStrike_onGameInit=null
code ref_function_bridge_FlameStrike_onCast=null
code ref_function_FlameStrike_setReady=null
code ref_function_FlameStrike_burnDmg=null
code ref_function_FlameStrike_burnStackPrevent=null
code ref_function_bridge_FlameStrike_initialDamage=null
code ref_function_bridge_FlameStrike_initialEffect=null
code ref_function_bridge_IceBlast_onCast=null
code ref_function_bridge_IceBlast_setupBossInfo=null
code ref_function_IceBlast_setReady=null
code ref_function_bridge_MagicCrystal_dies=null
code ref_function_bridge_MagicCrystal_createBossInfo=null
code ref_function_MagicCrystal_releaseBossDelay1=null
code ref_function_MagicCrystal_releaseBossDelay2=null
code ref_function_MagicCrystal_moveSFX=null
code ref_function_bridge_MagicCrystal_finishAbsorb=null
code ref_function_bridge_MagicCrystal_finishAbsorb_2=null
code ref_function_bridge_MagicCrystal_loopSound=null
code ref_function_MagicCrystal_animation=null
code ref_function_bridge_MagicCrystal_lightning_Fire=null
code ref_function_bridge_MagicCrystal_initiateAbsorbDelay1=null
code ref_function_bridge_MagicCrystal_checkDistance=null
code ref_function_bridge_initEvent=null
code ref_function_bridge_someoneDies=null
code ref_function_bridge_leaveEvent=null
code ref_function_bridge_delayedInit_3=null
code ref_function_idle=null
code ref_function_bridge_onEventInit=null
code ref_function_initFight=null
code ref_function_ambient=null
code ref_function_bridge_clear=null
code ref_function_bridge_clear_2=null
code ref_function_bridge_mainLoop=null
effect ClickableObject_setSfxtempReturn=null
unit createDummytempReturn=null
unit group_nexttempReturn=null
texttag createTTExtempReturn=null
timer getTimertempReturn=null
unit unitFromIndextempReturn=null
trigger triggerFromIndextempReturn=null
effect dispatch_ClickableObject_BossInformation_ClickableObject_setSfxtempReturn=null
unit dispatch_ClickableObject_BossInformation_ClickableObject_setUnitSfxtempReturn=null
unit dispatch_Table_Table_Table_loadUnittempReturn=null
trigger dispatch_Table_Table_Table_loadTriggertempReturn=null
effect ClickableObject_sfx_gettempReturn=null
effect FlameStrike_sfx_gettempReturn=null
endglobals
native UnitAlive takes unit id returns boolean
function CreateAllDestructables takes nothing returns nothing
	set gg_dest_DTc2_2577 = CreateDestructable(1146381106, 13568.0, 14432.0, 270.000, 1.000, 0)
endfunction

function CreateAllItems takes nothing returns nothing
	call CreateItem(1227894833,  - 1686.3,  - 784.6)
	call CreateItem(1227894833,  - 2274.2,  - 363.8)
	call CreateItem(1227894840,  - 2153.0,  - 653.7)
	call CreateItem(1227894840,  - 2289.9,  - 640.6)
	call CreateItem(1227894840,  - 2297.1,  - 716.6)
	call CreateItem(1227894840,  - 2216.3,  - 719.3)
	call CreateItem(1227894840,  - 2132.3,  - 424.7)
	call CreateItem(1227894840,  - 2227.5,  - 656.1)
	call CreateItem(1227894841,  - 2190.8,  - 424.7)
	call CreateItem(1227894841,  - 1672.8,  - 885.7)
	call CreateItem(1227894849,  - 2142.6,  - 363.8)
	call CreateItem(1227894850,  - 1793.6,  - 709.6)
	call CreateItem(1227894850,  - 2281.6,  - 415.3)
	call CreateItem(1227894851,  - 2193.1,  - 376.9)
	call CreateItem(1868984943,  - 1792.3,  - 1069.5)
endfunction

function CreateNeutralHostile takes nothing returns nothing
	local player p = Player(PLAYER_NEUTRAL_AGGRESSIVE)
	call CreateUnit(p, 1865429040,  - 7463.7,  - 646.8, 22.204)
	call CreateUnit(p, 1865429040,  - 7340.0,  - 682.3, 22.204)
	call CreateUnit(p, 1865429040,  - 7302.1,  - 824.3, 22.204)
	call CreateUnit(p, 1865429040,  - 14643.6,  - 15223.7, 203.457)
	call CreateUnit(p, 1865429040,  - 7447.7,  - 778.9, 22.204)
	call CreateUnit(p, 1851941230,  - 8719.4, 9699.1, 210.395)
	call CreateUnit(p, 1865429040,  - 14960.9,  - 15077.5, 315.614)
	call CreateUnit(p, 1865429040,  - 15065.0,  - 15212.8, 237.905)
	call CreateUnit(p, 1865429040,  - 14962.8,  - 15436.3, 45.946)
	call CreateUnit(p, 1865429040,  - 14747.8,  - 15529.2, 15.162)
	call CreateUnit(p, 1865429040,  - 14552.3,  - 15447.4, 167.085)
	call CreateUnit(p, 1865429040,  - 14678.2,  - 15208.4, 288.235)
	call CreateUnit(p, 1865429040,  - 14670.7,  - 15245.8, 81.895)
	call CreateUnit(p, 1865429040,  - 14745.8,  - 15074.0, 14.280)
	call CreateUnit(p, 1865429040,  - 14820.0,  - 15327.6, 299.529)
	call CreateUnit(p, 1851945575,  - 8738.5, 9601.5, 354.584)
	call CreateUnit(p, 1865429040,  - 14825.9,  - 15414.0, 73.545)
	call CreateUnit(p, 1865429040,  - 14833.1,  - 15509.5, 144.112)
	call CreateUnit(p, 1865429040,  - 14873.3,  - 15595.3, 239.399)
	call CreateUnit(p, 1865429040,  - 14908.6,  - 15617.0, 206.626)
	call CreateUnit(p, 1865429040,  - 14955.6,  - 15471.6, 134.444)
	call CreateUnit(p, 1865429040,  - 14987.7,  - 15324.9, 1.318)
	call CreateUnit(p, 1865429040,  - 14994.4,  - 15249.7, 190.102)
	call CreateUnit(p, 1865429040,  - 14933.0,  - 15157.1, 120.645)
	call CreateUnit(p, 1865429040,  - 14886.1,  - 15133.1, 11.657)
	set p = null
endfunction

function CreateNeutralPassive takes nothing returns nothing
	local player p = Player(PLAYER_NEUTRAL_PASSIVE)
	local unit u = CreateUnit(p, 1848651842,  - 7902.3, 198.8, 225.851)
	call SetUnitColor(u, ConvertPlayerColor(21))
	set u = CreateUnit(p, 1848651843,  - 7270.7, 290.0, 247.189)
	set u = CreateUnit(p, 1848651843,  - 7366.7, 221.7, 227.017)
	set u = CreateUnit(p, 1848651844,  - 8868.5,  - 1202.4, 313.070)
	call SetUnitColor(u, ConvertPlayerColor(21))
	set u = CreateUnit(p, 1852861543, 10847.2, 14616.1, 310.858)
	set u = CreateUnit(p, 1848651847,  - 8320.4, 14184.2, 220.490)
	call SetUnitColor(u, ConvertPlayerColor(20))
	set p = null
	set u = null
endfunction

function CreateNeutralPassiveBuildings takes nothing returns nothing
	local player p = Player(PLAYER_NEUTRAL_PASSIVE)
	local unit u = CreateUnit(p, 1848651841,  - 8192.0,  - 416.0, 68.528)
	call SetUnitColor(u, ConvertPlayerColor(24))
	set u = CreateUnit(p, 1848651832,  - 7200.0,  - 288.0, 270.000)
	call SetUnitColor(u, ConvertPlayerColor(24))
	set u = CreateUnit(p, 1848651833,  - 7680.0,  - 704.0, 270.000)
	call SetUnitColor(u, ConvertPlayerColor(24))
	set u = CreateUnit(p, 1848651831,  - 1632.0,  - 288.0, 270.000)
	call SetUnitColor(u, ConvertPlayerColor(10))
	set u = CreateUnit(p, 1848651824,  - 2048.0,  - 64.0, 270.000)
	call SetUnitColor(u, ConvertPlayerColor(3))
	set u = CreateUnit(p, 1966092357,  - 11072.0, 3712.0, 270.000)
	call SetUnitColor(u, ConvertPlayerColor(0))
	set u = CreateUnit(p, 1966092357,  - 11264.0, 5248.0, 270.000)
	call SetUnitColor(u, ConvertPlayerColor(0))
	set u = CreateUnit(p, 1966092357,  - 9984.0, 4288.0, 270.000)
	call SetUnitColor(u, ConvertPlayerColor(0))
	set u = CreateUnit(p, 1966092357,  - 11520.0, 5184.0, 270.000)
	call SetUnitColor(u, ConvertPlayerColor(0))
	set u = CreateUnit(p, 1966092357,  - 10304.0, 5312.0, 270.000)
	call SetUnitColor(u, ConvertPlayerColor(0))
	set u = CreateUnit(p, 1852010352, 11968.0, 14656.0, 270.000)
	set u = CreateUnit(p, 1852010352, 11264.0, 13888.0, 270.000)
	set u = CreateUnit(p, 1852010352, 11008.0, 14400.0, 270.000)
	set u = CreateUnit(p, 1852010352,  - 7040.0,  - 640.0, 270.000)
	set p = null
	set u = null
endfunction

function CreateBuildingsForPlayer0 takes nothing returns nothing
	local player p = Player(0)
	local unit u = CreateUnit(p, 1747988530,  - 13184.0, 6464.0, 270.000)
	call SetUnitColor(u, ConvertPlayerColor(9))
	set u = CreateUnit(p, 1747988530,  - 14080.0, 6464.0, 270.000)
	call SetUnitColor(u, ConvertPlayerColor(9))
	set u = CreateUnit(p, 1852404834,  - 7872.0, 6592.0, 270.000)
	set u = CreateUnit(p, 1852404834,  - 7552.0, 6592.0, 270.000)
	set u = CreateUnit(p, 1852404834,  - 7232.0, 6656.0, 270.000)
	set p = null
	set u = null
endfunction

function CreatePlayerBuildings takes nothing returns nothing
	call CreateBuildingsForPlayer0()
endfunction

function CreateUnitsForPlayer0 takes nothing returns nothing
	local player p = Player(0)
	local unit u = CreateUnit(p, 1966092337,  - 14036.6,  - 14138.9, 257.492)
	call SetUnitColor(u, ConvertPlayerColor(20))
	set u = CreateUnit(p, 1966092338,  - 13814.8,  - 14160.9,  - 39.330)
	call SetUnitColor(u, ConvertPlayerColor(20))
	set u = CreateUnit(p, 1848651825,  - 14267.1,  - 13983.5, 187.993)
	set u = CreateUnit(p, 1848651845,  - 4463.4,  - 747.2, 224.611)
	call SetUnitColor(u, ConvertPlayerColor(20))
	set u = CreateUnit(p, 1848651846,  - 362.8, 820.3, 275.854)
	set u = CreateUnit(p, 1848651845, 11326.3, 13699.4, 121.151)
	call SetUnitColor(u, ConvertPlayerColor(20))
	set p = null
	set u = null
endfunction

function CreateUnitsForPlayer1 takes nothing returns nothing
	local player p = Player(1)
	call CreateUnit(p, 1747988535,  - 13875.5, 5520.3, 294.710)
	call CreateUnit(p, 1747988534,  - 13935.9, 6238.2, 90.453)
	call CreateUnit(p, 1747988534,  - 13367.9, 6225.9, 109.675)
	call CreateUnit(p, 1747988534,  - 13446.7, 6172.3, 106.883)
	call CreateUnit(p, 1747988534,  - 13814.9, 6183.7, 83.563)
	call CreateUnit(p, 1751543663,  - 13430.0, 5307.2, 201.297)
	call CreateUnit(p, 1751543663,  - 13261.9, 5833.5, 175.000)
	call CreateUnit(p, 1752002674,  - 13309.4, 6076.3, 150.230)
	set p = null
endfunction

function CreateUnitsForPlayer11 takes nothing returns nothing
	local player p = Player(11)
	local unit u = CreateUnit(p, 1966092336,  - 13629.7, 14181.5, 274.133)
	call SetUnitColor(u, ConvertPlayerColor(12))
	set u = CreateUnit(p, 1865429040,  - 13586.2, 1161.3, 3.439)
	set p = null
	set u = null
endfunction

function CreateUnitsForPlayer12 takes nothing returns nothing
	local player p = Player(12)
	call CreateUnit(p, 1751543663,  - 13079.1,  - 15380.3, 274.502)
	call CreateUnit(p, 1751543663,  - 13132.2,  - 15562.2, 2.725)
	call CreateUnit(p, 1751543663,  - 13210.5,  - 15411.4, 121.864)
	call CreateUnit(p, 1751543663,  - 13040.5,  - 15462.6, 224.567)
	call CreateUnit(p, 1751543663,  - 12910.7,  - 15416.7, 186.136)
	call CreateUnit(p, 1751543663,  - 12732.5,  - 15516.4, 123.875)
	call CreateUnit(p, 1751543663,  - 12577.8,  - 15429.8, 86.102)
	call CreateUnit(p, 1751543663,  - 12466.6,  - 15251.6, 175.699)
	call CreateUnit(p, 1751543663,  - 12535.1,  - 15129.7, 180.731)
	call CreateUnit(p, 1751543663,  - 12639.4,  - 15201.2, 340.598)
	call CreateUnit(p, 1751543663,  - 12786.0,  - 15439.1, 170.941)
	call CreateUnit(p, 1751543663,  - 12822.2,  - 15607.3, 135.861)
	call CreateUnit(p, 1751543663,  - 12706.8,  - 15740.1, 312.351)
	call CreateUnit(p, 1751543663,  - 12573.2,  - 15768.4, 292.234)
	call CreateUnit(p, 1751543663,  - 12959.5,  - 15629.5, 87.531)
	call CreateUnit(p, 1751543663,  - 12406.3,  - 15549.8, 10.393)
	call CreateUnit(p, 1751543663,  - 12191.4,  - 15560.8, 191.289)
	call CreateUnit(p, 1751543663,  - 12299.1,  - 15394.8, 318.668)
	call CreateUnit(p, 1751543663,  - 12468.0,  - 15327.7, 78.928)
	call CreateUnit(p, 1751543663,  - 11895.6,  - 15605.1, 273.996)
	call CreateUnit(p, 1751543663,  - 11827.7,  - 15412.4, 136.564)
	call CreateUnit(p, 1751543663,  - 11987.4,  - 15181.4, 350.551)
	call CreateUnit(p, 1751543663,  - 12207.9,  - 15164.2, 137.751)
	call CreateUnit(p, 1751543663,  - 12260.4,  - 15693.2, 4.098)
	call CreateUnit(p, 1751543663,  - 12058.6,  - 15750.5, 164.053)
	call CreateUnit(p, 1751543663,  - 11947.5,  - 15707.8, 300.375)
	call CreateUnit(p, 1751543663,  - 12003.0,  - 15639.8, 99.243)
	call CreateUnit(p, 1751543663,  - 12116.5,  - 15629.6, 174.776)
	call CreateUnit(p, 1751543663,  - 12106.9,  - 15540.0, 104.011)
	call CreateUnit(p, 1751543663,  - 12043.3,  - 15378.0, 326.710)
	call CreateUnit(p, 1751543663,  - 12031.4,  - 15305.1, 171.095)
	call CreateUnit(p, 1751543663,  - 12155.1,  - 15348.9, 262.021)
	call CreateUnit(p, 1751543663,  - 12474.9,  - 15709.0, 99.792)
	call CreateUnit(p, 1751543663,  - 12383.1,  - 15832.2, 53.879)
	call CreateUnit(p, 1751543663,  - 11768.6,  - 15776.8, 59.778)
	call CreateUnit(p, 1751543663,  - 11825.5,  - 15623.3, 314.087)
	call CreateUnit(p, 1751543663,  - 11962.5,  - 15411.6, 304.012)
	call CreateUnit(p, 1751543663,  - 11936.2,  - 15348.3, 243.157)
	call CreateUnit(p, 1751543663,  - 11747.4,  - 15283.8, 215.218)
	call CreateUnit(p, 1751543663,  - 11633.4,  - 15244.8, 93.266)
	call CreateUnit(p, 1751543663,  - 11692.2,  - 15463.9, 150.825)
	call CreateUnit(p, 1751543663,  - 11988.8,  - 15779.1, 29.477)
	call CreateUnit(p, 1751543663,  - 12142.7,  - 15792.7, 260.944)
	call CreateUnit(p, 1751543663,  - 11577.4,  - 15812.9, 169.140)
	call CreateUnit(p, 1751543663,  - 11540.8,  - 15720.8, 166.668)
	call CreateUnit(p, 1751543663,  - 11586.1,  - 15548.5, 270.030)
	call CreateUnit(p, 1751543663,  - 11784.6,  - 15100.5, 301.946)
	call CreateUnit(p, 1751543663,  - 11545.3,  - 15077.0, 247.563)
	call CreateUnit(p, 1751543663,  - 11520.0,  - 15211.6, 188.246)
	call CreateUnit(p, 1751543663,  - 11608.0,  - 15404.2, 208.538)
	call CreateUnit(p, 1751543663,  - 11627.1,  - 15596.2, 54.626)
	call CreateUnit(p, 1751543663,  - 11431.9,  - 15736.2, 291.388)
	call CreateUnit(p, 1751543663,  - 11359.7,  - 15767.7, 14.195)
	call CreateUnit(p, 1751543663,  - 11706.0,  - 15674.8, 97.814)
	call CreateUnit(p, 1751543663,  - 11741.8,  - 15537.7, 58.680)
	call CreateUnit(p, 1751543663,  - 11882.5,  - 15442.3, 313.867)
	call CreateUnit(p, 1751543663,  - 12063.5,  - 15476.7, 327.304)
	call CreateUnit(p, 1751543663,  - 12197.8,  - 15653.6, 203.363)
	call CreateUnit(p, 1751543663,  - 12395.7,  - 15720.8, 148.869)
	call CreateUnit(p, 1751543663,  - 12392.4,  - 15616.9, 312.120)
	call CreateUnit(p, 1751543663,  - 12341.4,  - 15510.3, 208.164)
	call CreateUnit(p, 1751543663,  - 12253.7,  - 15440.9, 254.286)
	call CreateUnit(p, 1751543663,  - 12587.1,  - 15630.9, 170.458)
	call CreateUnit(p, 1751543663,  - 12518.9,  - 15541.7, 223.985)
	set p = null
endfunction

function CreatePlayerUnits takes nothing returns nothing
	call CreateUnitsForPlayer0()
	call CreateUnitsForPlayer1()
	call CreateUnitsForPlayer11()
	call CreateUnitsForPlayer12()
endfunction

function CreateAllUnits takes nothing returns nothing
	call CreateNeutralPassiveBuildings()
	call CreatePlayerBuildings()
	call CreateNeutralHostile()
	call CreateNeutralPassive()
	call CreatePlayerUnits()
endfunction

function CreateRegions takes nothing returns nothing
	local weathereffect we
	call Rect( - 15136.0, 13376.0,  - 15040.0, 13472.0)
	set gg_rct_MorbentAttackZone = Rect( - 13920.0, 5184.0,  - 13472.0, 5472.0)
	call Rect( - 14560.0, 13344.0,  - 13120.0, 14784.0)
	set gg_rct_MF_Exit1 = Rect( - 13984.0, 12032.0,  - 13312.0, 12192.0)
	call Rect( - 13824.0, 11712.0,  - 13504.0, 11840.0)
	call Rect( - 13696.0, 13568.0,  - 13536.0, 13696.0)
	set gg_rct_MorbentFel = Rect( - 14784.0, 12320.0,  - 12448.0, 14752.0)
	set we = AddWeatherEffect(gg_rct_MorbentFel, 1178888044)
	call EnableWeatherEffect(we, true)
	set gg_rct_MF_Camp = Rect( - 14208.0, 5248.0,  - 13152.0, 6336.0)
	set we = AddWeatherEffect(gg_rct_MF_Camp, 1280470369)
	call EnableWeatherEffect(we, true)
	set gg_rct_TheNec_CamBounds = Rect( - 14208.0, 7328.0,  - 13120.0, 14304.0)
	call Rect( - 14464.0, 5376.0,  - 13152.0, 6464.0)
	call Rect( - 13696.0, 12128.0,  - 13568.0, 12224.0)
	call Rect( - 15648.0, 13344.0,  - 14688.0, 14080.0)
	call Rect( - 13856.0, 12224.0,  - 13408.0, 12384.0)
	set gg_rct_Earthquake_TestRegion = Rect( - 15072.0, 928.0,  - 13856.0, 2048.0)
	call Rect( - 3072.0,  - 1952.0, 96.0, 704.0)
	set gg_rct_Region_014 = Rect( - 9344.0,  - 800.0,  - 6496.0, 960.0)
	set we = AddWeatherEffect(gg_rct_Region_014, 1178886760)
	call EnableWeatherEffect(we, true)
	set gg_rct_Region_016 = Rect( - 9664.0,  - 1184.0,  - 6432.0, 960.0)
	set we = AddWeatherEffect(gg_rct_Region_016, 1178886760)
	call EnableWeatherEffect(we, true)
	call SetSoundPosition(gg_snd_WaterStreamLoop1,  - 8048.0,  - 112.0, 309.4)
	call RegisterStackedSound(gg_snd_WaterStreamLoop1, true, 3232.0, 2144.0)
	call Rect(384.0, 320.0, 480.0, 384.0)
	set gg_rct_VisionZone_Hunters_Lair = Rect( - 8672.0,  - 1024.0,  - 7264.0, 672.0)
	call Rect( - 6016.0, 3680.0,  - 5760.0, 3968.0)
	call Rect( - 6976.0, 3328.0,  - 4800.0, 5568.0)
	call Rect( - 4928.0, 4352.0,  - 4768.0, 4544.0)
	call Rect( - 7008.0, 4384.0,  - 6848.0, 4544.0)
	call Rect( - 6912.0, 3488.0,  - 4864.0, 5472.0)
	call Rect( - 5920.0, 5088.0,  - 5856.0, 5152.0)
	set gg_rct_TM_BossSpawn = Rect( - 10816.0, 4384.0,  - 10688.0, 4512.0)
	set gg_rct_TM_HeroSpawn = Rect( - 10688.0, 3840.0,  - 10624.0, 3904.0)
	set gg_rct_TM_ArcaneBeingSpawn = Rect( - 11488.0, 3808.0,  - 9984.0, 5248.0)
	set gg_rct_TM_VisionRect = Rect( - 11040.0, 3840.0,  - 9984.0, 5248.0)
	set gg_rct_TM_MagicCrystal1 = Rect( - 10496.0, 4608.0,  - 10432.0, 4672.0)
	set gg_rct_TM_MagicCrystal3 = Rect( - 10816.0, 4736.0,  - 10688.0, 4800.0)
	set gg_rct_TM_MagicCrystal2 = Rect( - 11072.0, 4544.0,  - 11008.0, 4576.0)
	set gg_rct_HunterStart = Rect( - 7840.0, 96.0,  - 7776.0, 160.0)
	set gg_rct_TM_Fog_Zone = Rect( - 12256.0, 2848.0,  - 8992.0, 6400.0)
	set we = AddWeatherEffect(gg_rct_TM_Fog_Zone, 1178886760)
	call EnableWeatherEffect(we, true)
	call Rect(13952.0, 14496.0, 14240.0, 14720.0)
	call Rect( - 8288.0, 64.0,  - 8192.0, 160.0)
	call Rect(14048.0, 14400.0, 14144.0, 14496.0)
	call Rect(13760.0, 13536.0, 14304.0, 14176.0)
	call Rect(11552.0, 14496.0, 11808.0, 14720.0)
	call Rect(10944.0, 14048.0, 11456.0, 14400.0)
	call Rect(13408.0, 14464.0, 13664.0, 14592.0)
	call Rect( - 10784.0, 12576.0,  - 9024.0, 14240.0)
	set gg_rct_TheBear_CamBounds = Rect( - 10208.0, 12832.0,  - 9216.0, 14304.0)
	set gg_rct_TheBear_Effect1 = Rect( - 11488.0, 11968.0,  - 8096.0, 14592.0)
	set we = AddWeatherEffect(gg_rct_TheBear_Effect1, 1178892140)
	call EnableWeatherEffect(we, true)
	set gg_rct_TheNec_MobSpawn = Rect( - 13920.0, 13376.0,  - 13312.0, 13920.0)
	set we = null
endfunction

function InitTrig_Arcane_Barrage_Buff takes nothing returns nothing
	set gg_trg_Arcane_Barrage_Buff = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Arcane_Barrage_Buff, udg_ArcaneBarrage_Timer[2])
	call TriggerAddAction(gg_trg_Arcane_Barrage_Buff, ref_function_Trig_Arcane_Barrage_Buff_Actions)
endfunction

function InitTrig_Arcane_Barrage_Damage takes nothing returns nothing
	set gg_trg_Arcane_Barrage_Damage = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Arcane_Barrage_Damage, udg_ArcaneBarrage_Timer[1])
	call TriggerAddAction(gg_trg_Arcane_Barrage_Damage, ref_function_Trig_Arcane_Barrage_Damage_Actions)
endfunction

function InitTrig_Arcane_Barrage_End takes nothing returns nothing
	set gg_trg_Arcane_Barrage_End = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Arcane_Barrage_End, udg_ArcaneBarrage_Timer[3])
	call TriggerAddAction(gg_trg_Arcane_Barrage_End, ref_function_Trig_Arcane_Barrage_End_Actions)
endfunction

function InitTrig_Arcane_Barrage_Fall takes nothing returns nothing
	set gg_trg_Arcane_Barrage_Fall = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Arcane_Barrage_Fall, udg_ArcaneBarrage_Timer[0])
	call TriggerAddAction(gg_trg_Arcane_Barrage_Fall, ref_function_Trig_Arcane_Barrage_Fall_Actions)
endfunction

function InitTrig_Arcane_Barrage_Start takes nothing returns nothing
	set gg_trg_Arcane_Barrage_Start = CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(gg_trg_Arcane_Barrage_Start, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Arcane_Barrage_Start, Condition(ref_function_Trig_Arcane_Barrage_Start_Conditions))
	call TriggerAddAction(gg_trg_Arcane_Barrage_Start, ref_function_Trig_Arcane_Barrage_Start_Actions)
endfunction

function InitTrig_Arcane_Depletion takes nothing returns nothing
	set gg_trg_Arcane_Depletion = CreateTrigger()
	call TriggerRegisterTimerEventPeriodic(gg_trg_Arcane_Depletion, 0.50)
	call TriggerAddCondition(gg_trg_Arcane_Depletion, Condition(ref_function_Trig_Arcane_Depletion_Conditions))
	call TriggerAddAction(gg_trg_Arcane_Depletion, ref_function_Trig_Arcane_Depletion_Actions)
endfunction

function InitTrig_Arcane_Discharge takes nothing returns nothing
	set gg_trg_Arcane_Discharge = CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(gg_trg_Arcane_Discharge, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Arcane_Discharge, Condition(ref_function_Trig_Arcane_Discharge_Conditions))
	call TriggerAddAction(gg_trg_Arcane_Discharge, ref_function_Trig_Arcane_Discharge_Actions)
endfunction

function InitTrig_Arcane_Emp_End takes nothing returns nothing
	set gg_trg_Arcane_Emp_End = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Arcane_Emp_End, udg_ArcaneEmp_Timer[0])
	call TriggerAddAction(gg_trg_Arcane_Emp_End, ref_function_Trig_Arcane_Emp_End_Actions)
endfunction

function InitTrig_Arcane_Emp_Move_Sfx takes nothing returns nothing
	set gg_trg_Arcane_Emp_Move_Sfx = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Arcane_Emp_Move_Sfx, udg_ArcaneEmp_Timer[1])
	call TriggerAddAction(gg_trg_Arcane_Emp_Move_Sfx, ref_function_Trig_Arcane_Emp_Move_Sfx_Actions)
endfunction

function InitTrig_Arcane_Power takes nothing returns nothing
	set gg_trg_Arcane_Power = CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(gg_trg_Arcane_Power, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Arcane_Power, Condition(ref_function_Trig_Arcane_Power_Conditions))
	call TriggerAddAction(gg_trg_Arcane_Power, ref_function_Trig_Arcane_Power_Actions)
endfunction

function InitTrig_Blizzard_Slow takes nothing returns nothing
	set gg_trg_Blizzard_Slow = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Blizzard_Slow, udg_Blizzard_Timer[0])
	call TriggerAddAction(gg_trg_Blizzard_Slow, ref_function_Trig_Blizzard_Slow_Actions)
endfunction

function InitTrig_Blizzard_Start takes nothing returns nothing
	set gg_trg_Blizzard_Start = CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(gg_trg_Blizzard_Start, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Blizzard_Start, Condition(ref_function_Trig_Blizzard_Start_Conditions))
	call TriggerAddAction(gg_trg_Blizzard_Start, ref_function_Trig_Blizzard_Start_Actions)
endfunction

function InitTrig_Blizzard_Stop takes nothing returns nothing
	set gg_trg_Blizzard_Stop = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Blizzard_Stop, udg_Blizzard_Timer[1])
	call TriggerAddAction(gg_trg_Blizzard_Stop, ref_function_Trig_Blizzard_Stop_Actions)
endfunction

function InitTrig_Burn takes nothing returns nothing
	set gg_trg_Burn = CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(gg_trg_Burn, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Burn, Condition(ref_function_Trig_Burn_Conditions))
	call TriggerAddAction(gg_trg_Burn, ref_function_Trig_Burn_Actions)
endfunction

function InitTrig_Buy_SPells takes nothing returns nothing
	set gg_trg_Buy_SPells = CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(gg_trg_Buy_SPells, EVENT_PLAYER_UNIT_SELL_ITEM)
	call TriggerAddCondition(gg_trg_Buy_SPells, Condition(ref_function_Trig_Buy_SPells_Conditions))
	call TriggerAddAction(gg_trg_Buy_SPells, ref_function_Trig_Buy_SPells_Actions)
endfunction

function InitTrig_Custom_Init takes nothing returns nothing
	set gg_trg_Custom_Init = CreateTrigger()
	call TriggerAddAction(gg_trg_Custom_Init, ref_function_Trig_Custom_Init_Actions)
endfunction

function InitTrig_Earthquake takes nothing returns nothing
	set gg_trg_Earthquake = CreateTrigger()
	call DisableTrigger(gg_trg_Earthquake)
	call TriggerRegisterTimerEventPeriodic(gg_trg_Earthquake, 5.00)
	call TriggerAddAction(gg_trg_Earthquake, ref_function_Trig_Earthquake_Actions)
endfunction

function InitTrig_Ghoul_Spawn takes nothing returns nothing
	set gg_trg_Ghoul_Spawn = CreateTrigger()
	call DisableTrigger(gg_trg_Ghoul_Spawn)
	call TriggerRegisterTimerEventPeriodic(gg_trg_Ghoul_Spawn, 12.00)
	call TriggerAddAction(gg_trg_Ghoul_Spawn, ref_function_Trig_Ghoul_Spawn_Actions)
endfunction

function InitTrig_Healing_Potion_Effect takes nothing returns nothing
	set gg_trg_Healing_Potion_Effect = CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(gg_trg_Healing_Potion_Effect, EVENT_PLAYER_UNIT_USE_ITEM)
	call TriggerAddCondition(gg_trg_Healing_Potion_Effect, Condition(ref_function_Trig_Healing_Potion_Effect_Conditions))
	call TriggerAddAction(gg_trg_Healing_Potion_Effect, ref_function_Trig_Healing_Potion_Effect_Actions)
endfunction

function InitTrig_Healing_Stone takes nothing returns nothing
	set gg_trg_Healing_Stone = CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(gg_trg_Healing_Stone, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Healing_Stone, Condition(ref_function_Trig_Healing_Stone_Conditions))
	call TriggerAddAction(gg_trg_Healing_Stone, ref_function_Trig_Healing_Stone_Actions)
endfunction

function InitTrig_Ice_Lance_Damage takes nothing returns nothing
	set gg_trg_Ice_Lance_Damage = CreateTrigger()
	call TriggerAddAction(gg_trg_Ice_Lance_Damage, ref_function_Trig_Ice_Lance_Damage_Actions)
endfunction

function InitTrig_Ice_Lance_Move takes nothing returns nothing
	set gg_trg_Ice_Lance_Move = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Ice_Lance_Move, udg_IceLance_Timer[0])
	call TriggerAddAction(gg_trg_Ice_Lance_Move, ref_function_Trig_Ice_Lance_Move_Actions)
endfunction

function InitTrig_Ice_Lance_Start takes nothing returns nothing
	set gg_trg_Ice_Lance_Start = CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(gg_trg_Ice_Lance_Start, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Ice_Lance_Start, Condition(ref_function_Trig_Ice_Lance_Start_Conditions))
	call TriggerAddAction(gg_trg_Ice_Lance_Start, ref_function_Trig_Ice_Lance_Start_Actions)
endfunction

function InitTrig_Lightning_Enhancement_Effect takes nothing returns nothing
	set gg_trg_Lightning_Enhancement_Effect = CreateTrigger()
	call DisableTrigger(gg_trg_Lightning_Enhancement_Effect)
	call TriggerRegisterTimerEventPeriodic(gg_trg_Lightning_Enhancement_Effect, 0.50)
	call TriggerAddAction(gg_trg_Lightning_Enhancement_Effect, ref_function_Trig_Lightning_Enhancement_Effect_Actions)
endfunction

function InitTrig_Magic_Ward_Delayed_SFX_Destruction takes nothing returns nothing
	set gg_trg_Magic_Ward_Delayed_SFX_Destruction = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Magic_Ward_Delayed_SFX_Destruction, udg_MagicWard_Timer[3])
	call TriggerAddAction(gg_trg_Magic_Ward_Delayed_SFX_Destruction, ref_function_Trig_Magic_Ward_Delayed_SFX_Destruction_Actions)
endfunction

function InitTrig_Magic_Ward_End takes nothing returns nothing
	set gg_trg_Magic_Ward_End = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Magic_Ward_End, udg_MagicWard_Timer[0])
	call TriggerAddAction(gg_trg_Magic_Ward_End, ref_function_Trig_Magic_Ward_End_Actions)
endfunction

function InitTrig_Magic_Ward_Pause_Effect takes nothing returns nothing
	set gg_trg_Magic_Ward_Pause_Effect = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Magic_Ward_Pause_Effect, udg_MagicWard_Timer[2])
	call TriggerAddCondition(gg_trg_Magic_Ward_Pause_Effect, Condition(ref_function_Trig_Magic_Ward_Pause_Effect_Conditions))
	call TriggerAddAction(gg_trg_Magic_Ward_Pause_Effect, ref_function_Trig_Magic_Ward_Pause_Effect_Actions)
endfunction

function InitTrig_Magic_Ward_Start takes nothing returns nothing
	set gg_trg_Magic_Ward_Start = CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(gg_trg_Magic_Ward_Start, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Magic_Ward_Start, Condition(ref_function_Trig_Magic_Ward_Start_Conditions))
	call TriggerAddAction(gg_trg_Magic_Ward_Start, ref_function_Trig_Magic_Ward_Start_Actions)
endfunction

function InitTrig_Magic_Ward_Update takes nothing returns nothing
	set gg_trg_Magic_Ward_Update = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Magic_Ward_Update, udg_MagicWard_Timer[1])
	call TriggerAddAction(gg_trg_Magic_Ward_Update, ref_function_Trig_Magic_Ward_Update_Actions)
endfunction

function InitTrig_Mana_Regeneration takes nothing returns nothing
	set gg_trg_Mana_Regeneration = CreateTrigger()
	call TriggerRegisterTimerEventPeriodic(gg_trg_Mana_Regeneration, 0.20)
	call TriggerAddAction(gg_trg_Mana_Regeneration, ref_function_Trig_Mana_Regeneration_Actions)
endfunction

function InitTrig_Plague_Zombie_Spawn takes nothing returns nothing
	set gg_trg_Plague_Zombie_Spawn = CreateTrigger()
	call DisableTrigger(gg_trg_Plague_Zombie_Spawn)
	call TriggerRegisterTimerEventPeriodic(gg_trg_Plague_Zombie_Spawn, 19.00)
	call TriggerAddAction(gg_trg_Plague_Zombie_Spawn, ref_function_Trig_Plague_Zombie_Spawn_Actions)
endfunction

function InitTrig_Remove_E_Spells takes nothing returns nothing
	set gg_trg_Remove_E_Spells = CreateTrigger()
	call TriggerAddAction(gg_trg_Remove_E_Spells, ref_function_Trig_Remove_E_Spells_Actions)
endfunction

function InitTrig_Remove_Q_Spells takes nothing returns nothing
	set gg_trg_Remove_Q_Spells = CreateTrigger()
	call TriggerAddAction(gg_trg_Remove_Q_Spells, ref_function_Trig_Remove_Q_Spells_Actions)
endfunction

function InitTrig_Remove_R_Spells takes nothing returns nothing
	set gg_trg_Remove_R_Spells = CreateTrigger()
	call TriggerAddAction(gg_trg_Remove_R_Spells, ref_function_Trig_Remove_R_Spells_Actions)
endfunction

function InitTrig_Remove_W_Spells takes nothing returns nothing
	set gg_trg_Remove_W_Spells = CreateTrigger()
	call TriggerAddAction(gg_trg_Remove_W_Spells, ref_function_Trig_Remove_W_Spells_Actions)
endfunction

function InitTrig_Repeat_Music takes nothing returns nothing
	set gg_trg_Repeat_Music = CreateTrigger()
	call TriggerRegisterTimerEventSingle(gg_trg_Repeat_Music, GetSoundFileDurationBJ("music"))
	call TriggerAddAction(gg_trg_Repeat_Music, ref_function_Trig_Repeat_Music_Actions)
endfunction

function InitTrig_Shock takes nothing returns nothing
	set gg_trg_Shock = CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(gg_trg_Shock, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Shock, Condition(ref_function_Trig_Shock_Conditions))
	call TriggerAddAction(gg_trg_Shock, ref_function_Trig_Shock_Actions)
endfunction

function InitTrig_Shock_Destory_Effect takes nothing returns nothing
	set gg_trg_Shock_Destory_Effect = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Shock_Destory_Effect, udg_Shock_Timer)
	call TriggerAddAction(gg_trg_Shock_Destory_Effect, ref_function_Trig_Shock_Destory_Effect_Actions)
endfunction

function InitTrig_Skeletal_Mages takes nothing returns nothing
	set gg_trg_Skeletal_Mages = CreateTrigger()
	call DisableTrigger(gg_trg_Skeletal_Mages)
	call TriggerRegisterTimerEventPeriodic(gg_trg_Skeletal_Mages, 13.00)
	call TriggerAddAction(gg_trg_Skeletal_Mages, ref_function_Trig_Skeletal_Mages_Actions)
endfunction

function InitTrig_Skeleton_Spawns takes nothing returns nothing
	set gg_trg_Skeleton_Spawns = CreateTrigger()
	call DisableTrigger(gg_trg_Skeleton_Spawns)
	call TriggerRegisterTimerEventPeriodic(gg_trg_Skeleton_Spawns, 6.00)
	call TriggerAddAction(gg_trg_Skeleton_Spawns, ref_function_Trig_Skeleton_Spawns_Actions)
endfunction

function InitTrig_Unstable_Magic_Start takes nothing returns nothing
	set gg_trg_Unstable_Magic_Start = CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(gg_trg_Unstable_Magic_Start, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Unstable_Magic_Start, Condition(ref_function_Trig_Unstable_Magic_Start_Conditions))
	call TriggerAddAction(gg_trg_Unstable_Magic_Start, ref_function_Trig_Unstable_Magic_Start_Actions)
endfunction

function InitTrig_Unstable_Magic_Stop takes nothing returns nothing
	set gg_trg_Unstable_Magic_Stop = CreateTrigger()
	call TriggerRegisterTimerExpireEventBJ(gg_trg_Unstable_Magic_Stop, udg_UnstableMagic_Timer[0])
	call TriggerAddAction(gg_trg_Unstable_Magic_Stop, ref_function_Trig_Unstable_Magic_Stop_Actions)
endfunction

function InitTrig_Untitled_Trigger_001 takes nothing returns nothing
	set gg_trg_Untitled_Trigger_001 = CreateTrigger()
	call TriggerAddAction(gg_trg_Untitled_Trigger_001, ref_function_Trig_Untitled_Trigger_001_Actions)
endfunction

function InitTrig_Untitled_Trigger_002 takes nothing returns nothing
	set gg_trg_Untitled_Trigger_002 = CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(gg_trg_Untitled_Trigger_002, EVENT_PLAYER_UNIT_SPELL_ENDCAST)
	call TriggerAddCondition(gg_trg_Untitled_Trigger_002, Condition(ref_function_Trig_Untitled_Trigger_002_Conditions))
	call TriggerAddAction(gg_trg_Untitled_Trigger_002, ref_function_Trig_Untitled_Trigger_002_Actions)
endfunction

function InitTrig_Untitled_Trigger_003 takes nothing returns nothing
	set gg_trg_Untitled_Trigger_003 = CreateTrigger()
	call TriggerAddAction(gg_trg_Untitled_Trigger_003, ref_function_Trig_Untitled_Trigger_003_Actions)
endfunction

function InitTrig_Untitled_Trigger_005 takes nothing returns nothing
	set gg_trg_Untitled_Trigger_005 = CreateTrigger()
	call TriggerAddAction(gg_trg_Untitled_Trigger_005, ref_function_Trig_Untitled_Trigger_005_Actions)
endfunction

function InitTrig_Untitled_Trigger_006 takes nothing returns nothing
	set gg_trg_Untitled_Trigger_006 = CreateTrigger()
	call TriggerRegisterEnterRectSimple(gg_trg_Untitled_Trigger_006, GetCurrentCameraBoundsMapRectBJ())
	call TriggerAddAction(gg_trg_Untitled_Trigger_006, ref_function_Trig_Untitled_Trigger_006_Actions)
endfunction

function InitTrig_Untitled_Trigger_007 takes nothing returns nothing
	set gg_trg_Untitled_Trigger_007 = CreateTrigger()
	call TriggerAddAction(gg_trg_Untitled_Trigger_007, ref_function_Trig_Untitled_Trigger_007_Actions)
endfunction

function InitTrig_Untitled_Trigger_008 takes nothing returns nothing
	set gg_trg_Untitled_Trigger_008 = CreateTrigger()
	call TriggerAddAction(gg_trg_Untitled_Trigger_008, ref_function_Trig_Untitled_Trigger_008_Actions)
endfunction

function InitTrig_Untitled_Trigger_009 takes nothing returns nothing
	set gg_trg_Untitled_Trigger_009 = CreateTrigger()
	call TriggerRegisterLeaveRectSimple(gg_trg_Untitled_Trigger_009, GetPlayableMapRect())
	call TriggerAddAction(gg_trg_Untitled_Trigger_009, ref_function_Trig_Untitled_Trigger_009_Actions)
endfunction

function InitTrig_Volcano_Strike takes nothing returns nothing
	set gg_trg_Volcano_Strike = CreateTrigger()
	call TriggerRegisterAnyUnitEventBJ(gg_trg_Volcano_Strike, EVENT_PLAYER_UNIT_SPELL_EFFECT)
	call TriggerAddCondition(gg_trg_Volcano_Strike, Condition(ref_function_Trig_Volcano_Strike_Conditions))
	call TriggerAddAction(gg_trg_Volcano_Strike, ref_function_Trig_Volcano_Strike_Actions)
endfunction

function InitCustomTriggers takes nothing returns nothing
	call InitTrig_Custom_Init()
	call InitTrig_Untitled_Trigger_005()
	call InitTrig_Untitled_Trigger_006()
	call InitTrig_Untitled_Trigger_007()
	call InitTrig_Repeat_Music()
	call InitTrig_Untitled_Trigger_001()
	call InitTrig_Mana_Regeneration()
	call InitTrig_Healing_Potion_Effect()
	call InitTrig_Buy_SPells()
	call InitTrig_Remove_Q_Spells()
	call InitTrig_Remove_E_Spells()
	call InitTrig_Remove_W_Spells()
	call InitTrig_Remove_R_Spells()
	call InitTrig_Untitled_Trigger_003()
	call InitTrig_Healing_Stone()
	call InitTrig_Volcano_Strike()
	call InitTrig_Blizzard_Start()
	call InitTrig_Blizzard_Stop()
	call InitTrig_Blizzard_Slow()
	call InitTrig_Arcane_Power()
	call InitTrig_Arcane_Emp_End()
	call InitTrig_Arcane_Emp_Move_Sfx()
	call InitTrig_Arcane_Discharge()
	call InitTrig_Arcane_Depletion()
	call InitTrig_Burn()
	call InitTrig_Shock()
	call InitTrig_Shock_Destory_Effect()
	call InitTrig_Magic_Ward_Start()
	call InitTrig_Untitled_Trigger_002()
	call InitTrig_Magic_Ward_Update()
	call InitTrig_Magic_Ward_Pause_Effect()
	call InitTrig_Magic_Ward_End()
	call InitTrig_Magic_Ward_Delayed_SFX_Destruction()
	call InitTrig_Ice_Lance_Start()
	call InitTrig_Ice_Lance_Move()
	call InitTrig_Ice_Lance_Damage()
	call InitTrig_Arcane_Barrage_Start()
	call InitTrig_Arcane_Barrage_Buff()
	call InitTrig_Arcane_Barrage_Fall()
	call InitTrig_Arcane_Barrage_Damage()
	call InitTrig_Arcane_Barrage_End()
	call InitTrig_Unstable_Magic_Start()
	call InitTrig_Unstable_Magic_Stop()
	call InitTrig_Untitled_Trigger_008()
	call InitTrig_Ghoul_Spawn()
	call InitTrig_Plague_Zombie_Spawn()
	call InitTrig_Skeletal_Mages()
	call InitTrig_Skeleton_Spawns()
	call InitTrig_Lightning_Enhancement_Effect()
	call InitTrig_Earthquake()
	call InitTrig_Untitled_Trigger_009()
endfunction

function InitGlobals takes nothing returns nothing
	local integer i = 0
	set i = 0
	loop
		exitwhen i > 10
		set udg_MorbenFell_Booleans[i] = false
		set i = i + 1
	endloop
	set udg_TempInt = 0
	set udg_TempReal = 0.
	call CreateTimer()
	call CreateGroup()
	set udg_tempUGroup = CreateGroup()
	call CreateGroup()
	set udg_tempInt = 0
	set udg_ArcaneEmpower = false
	set i = 0
	loop
		exitwhen i > 2
		set udg_Blizzard_Timer[i] = CreateTimer()
		set i = i + 1
	endloop
	set i = 0
	loop
		exitwhen i > 1
		set udg_UnstableMagic_Timer[i] = CreateTimer()
		set i = i + 1
	endloop
	set udg_tempBool = false
	set udg_Shock_Timer = CreateTimer()
	set i = 0
	loop
		exitwhen i > 4
		set udg_ArcaneBarrage_Timer[i] = CreateTimer()
		set i = i + 1
	endloop
	set i = 0
	loop
		exitwhen i > 2
		set udg_ArcaneBarrage_Counter[i] = 0
		set i = i + 1
	endloop
	set i = 0
	loop
		exitwhen i > 3
		set udg_IceLance_MissilePos[i] = 0.
		set i = i + 1
	endloop
	set udg_IceLance_Hits = CreateGroup()
	set i = 0
	loop
		exitwhen i > 1
		set udg_IceLance_Timer[i] = CreateTimer()
		set i = i + 1
	endloop
	set udg_IceLance_DistTrav = 0.
	set udg_IceLance_Direction = 0.
	set i = 0
	loop
		exitwhen i > 2
		set udg_IceLance_Velocity[i] = 0.
		set i = i + 1
	endloop
	set udg_tempReal = 0.
	set udg_IceLance_EnemyCheckCounter = 0
	set i = 0
	loop
		exitwhen i > 2
		set udg_ArcaneEmp_Timer[i] = CreateTimer()
		set i = i + 1
	endloop
	set i = 0
	loop
		exitwhen i > 4
		set udg_MagicWard_Timer[i] = CreateTimer()
		set i = i + 1
	endloop
	set udg_MagicWard_Running = false
endfunction

function InitSounds takes nothing returns nothing
	set gg_snd_Error = CreateSound("Sound\\Interface\\Error.wav", false, false, false, 10, 10, "")
	call SetSoundParamsFromLabel(gg_snd_Error, "InterfaceError")
	call SetSoundDuration(gg_snd_Error, 614)
	set gg_snd_BlizzardLoop1 = CreateSound("Abilities\\Spells\\Human\\Blizzard\\BlizzardLoop1.wav", false, true, true, 10, 10, "SpellsEAX")
	call SetSoundParamsFromLabel(gg_snd_BlizzardLoop1, "BlizzardLoop")
	call SetSoundDuration(gg_snd_BlizzardLoop1, 4000)
	set gg_snd_Hint = CreateSound("Sound\\Interface\\Hint.wav", false, false, false, 10, 10, "")
	call SetSoundParamsFromLabel(gg_snd_Hint, "Hint")
	call SetSoundDuration(gg_snd_Hint, 2006)
	set gg_snd_QuestCompleted = CreateSound("Sound\\Interface\\QuestCompleted.wav", false, false, false, 10, 10, "")
	call SetSoundParamsFromLabel(gg_snd_QuestCompleted, "QuestCompleted")
	call SetSoundDuration(gg_snd_QuestCompleted, 5155)
	set gg_snd_KelThuzadDeath1 = CreateSound("Sound\\Dialogue\\Extra\\KelThuzadDeath1.mp3", false, false, false, 10, 10, "")
	call SetSoundParamsFromLabel(gg_snd_KelThuzadDeath1, "KelThuzadDeath1")
	call SetSoundDuration(gg_snd_KelThuzadDeath1, 4388)
	set gg_snd_GoodJob = CreateSound("Sound\\Interface\\GoodJob.wav", false, false, false, 10, 10, "")
	call SetSoundParamsFromLabel(gg_snd_GoodJob, "GoodJob")
	call SetSoundDuration(gg_snd_GoodJob, 2548)
	set gg_snd_PursuitTheme = CreateSound("Sound\\Music\\mp3Music\\PursuitTheme.mp3", true, false, false, 10, 10, "DefaultEAXON")
	call SetSoundDuration(gg_snd_PursuitTheme, 82537)
	call SetSoundChannel(gg_snd_PursuitTheme, 7)
	call SetSoundVolume(gg_snd_PursuitTheme, 127)
	call SetSoundPitch(gg_snd_PursuitTheme, 1.0)
	set gg_snd_DarkAgents = CreateSound("Sound\\Music\\mp3Music\\DarkAgents.mp3", true, false, false, 10, 10, "DefaultEAXON")
	call SetSoundDuration(gg_snd_DarkAgents, 64950)
	call SetSoundChannel(gg_snd_DarkAgents, 7)
	call SetSoundVolume(gg_snd_DarkAgents, 127)
	call SetSoundPitch(gg_snd_DarkAgents, 1.0)
	set gg_snd_AbominationPissed5 = CreateSound("Units\\Undead\\Abomination\\AbominationPissed5.wav", false, true, true, 10, 10, "DefaultEAXON")
	call SetSoundParamsFromLabel(gg_snd_AbominationPissed5, "AbominationPissed")
	call SetSoundDuration(gg_snd_AbominationPissed5, 1735)
	set gg_snd_O04Mannoroth38 = CreateSound("Sound\\Dialogue\\OrcCampaign\\Orc04Interlude\\O04Mannoroth38.mp3", false, false, false, 10, 10, "DefaultEAXON")
	call SetSoundParamsFromLabel(gg_snd_O04Mannoroth38, "O04Mannoroth38")
	call SetSoundDuration(gg_snd_O04Mannoroth38, 12617)
	set gg_snd_SpellStealMissile = CreateSound("Abilities\\Spells\\Human\\SpellSteal\\SpellStealMissile.wav", false, true, true, 10, 10, "SpellsEAX")
	call SetSoundParamsFromLabel(gg_snd_SpellStealMissile, "SpellStealMissileLaunch")
	call SetSoundDuration(gg_snd_SpellStealMissile, 1541)
	set gg_snd_IceLanceFire = CreateSound("Abilities\\Spells\\Other\\FrostBolt\\FrostBoltHit1.wav", false, true, true, 10, 10, "MissilesEAX")
	call SetSoundParamsFromLabel(gg_snd_IceLanceFire, "FrostBoltHit")
	call SetSoundDuration(gg_snd_IceLanceFire, 1347)
	set gg_snd_IceLanceHit = CreateSound("Abilities\\Spells\\Other\\FrostArrows\\FrostArrowHit1.wav", false, true, true, 10, 10, "MissilesEAX")
	call SetSoundParamsFromLabel(gg_snd_IceLanceHit, "FrostArrowHit")
	call SetSoundDuration(gg_snd_IceLanceHit, 1115)
	set gg_snd_SiphonManaLoop = CreateSound("Abilities\\Spells\\Other\\Drain\\SiphonManaLoop.wav", false, true, true, 10, 10, "SpellsEAX")
	call SetSoundParamsFromLabel(gg_snd_SiphonManaLoop, "SiphonManaLoop")
	call SetSoundDuration(gg_snd_SiphonManaLoop, 1588)
	set gg_snd_ObsidianAvengerWhat2 = CreateSound("Units\\Undead\\ObsidianStatue\\ObsidianAvengerWhat2.wav", false, true, true, 10, 10, "DefaultEAXON")
	call SetSoundParamsFromLabel(gg_snd_ObsidianAvengerWhat2, "ObsidianDestroyerWhat")
	call SetSoundDuration(gg_snd_ObsidianAvengerWhat2, 2647)
	set gg_snd_QuestActivateWhat1 = CreateSound("Sound\\Interface\\QuestActivateWhat1.wav", false, false, false, 10, 10, "")
	call SetSoundParamsFromLabel(gg_snd_QuestActivateWhat1, "QuestLogModified")
	call SetSoundDuration(gg_snd_QuestActivateWhat1, 539)
	set gg_snd_UndeadGlueScreenLoop1 = CreateSound("Sound\\Ambient\\UndeadGlueScreenLoop1.wav", false, false, false, 10, 10, "DefaultEAXON")
	call SetSoundParamsFromLabel(gg_snd_UndeadGlueScreenLoop1, "UndeadGlueScreenLoop")
	call SetSoundDuration(gg_snd_UndeadGlueScreenLoop1, 7291)
	set gg_snd_WaterStreamLoop1 = CreateSound("Sound\\Ambient\\DoodadEffects\\WaterStreamLoop1.wav", false, true, true, 10, 10, "DoodadsEAX")
	call SetSoundParamsFromLabel(gg_snd_WaterStreamLoop1, "StreamLoop")
	call SetSoundDuration(gg_snd_WaterStreamLoop1, 2009)
	set gg_snd_OrcVictory = CreateSound("Sound\\Music\\mp3Music\\OrcVictory.mp3", false, false, false, 10, 10, "")
	call SetSoundDuration(gg_snd_OrcVictory, 44496)
	call SetSoundChannel(gg_snd_OrcVictory, 0)
	call SetSoundVolume(gg_snd_OrcVictory, 127)
	call SetSoundPitch(gg_snd_OrcVictory, 1.0)
endfunction

function RunInitializationTriggers takes nothing returns nothing
	call ConditionalTriggerExecute(gg_trg_Custom_Init)
endfunction

function Attack_cooldownFinished takes nothing returns nothing
	set Attack_onCooldown = false
endfunction

function Attack_setUpdateMove takes nothing returns nothing
	set Attack_updateMove = true
endfunction

function effect_destr takes effect this returns nothing
	call DestroyEffect(this)
endfunction

function widget_addEffect takes widget this, string modelName, string attachment returns effect
	return AddSpecialEffectTarget(modelName, this, attachment)
endfunction

function Bleed_dealDamage takes nothing returns nothing
	call effect_destr(widget_addEffect(General_hunter, Bleed_EFFECT, "origin"))
	call UnitDamageTarget(TheBear_theBear, General_hunter, Bleed_DMG * Bleed_stacks * (1. + TheBear_damageInc), false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
endfunction

function texttag_setVisibility takes texttag this, boolean flag returns nothing
	call SetTextTagVisibility(this, flag)
endfunction

function timer_pause takes timer this returns nothing
	call PauseTimer(this)
endfunction

function Bleed_removeStacks takes nothing returns nothing
	if Bleed_ENABLED then
		set Bleed_stacks = 0
		call texttag_setVisibility(Bleed_text, false)
		call timer_pause(Bleed_timer_Duration)
		call timer_pause(Bleed_timer_UpdateText)
		call timer_pause(Bleed_timer_Damage)
	endif
endfunction

function texttag_setPos takes texttag this, real x, real y, real z returns nothing
	call SetTextTagPos(this, x, y, z)
endfunction

function unit_getLocalZ takes unit this returns real
	return BlzGetLocalUnitZ(this)
endfunction

function unit_getX takes unit this returns real
	return GetUnitX(this)
endfunction

function unit_getY takes unit this returns real
	return GetUnitY(this)
endfunction

function Bleed_updateText takes nothing returns nothing
	call texttag_setPos(Bleed_text, unit_getX(General_hunter) - 85., unit_getY(General_hunter), unit_getLocalZ(General_hunter) + 200.)
endfunction

function unit_isType takes unit this, unittype utype returns boolean
	return IsUnitType(this, utype)
endfunction

function unit_getLevel takes unit this returns integer
	local integer cond_result
	if unit_isType(this, UNIT_TYPE_HERO) then
		set cond_result = GetHeroLevel(this)
	else
		set cond_result = GetUnitLevel(this)
	endif
	return cond_result
endfunction

function unit_getState takes unit this, unitstate state returns real
	return GetUnitState(this, state)
endfunction

function unit_getMaxHP takes unit this returns real
	return unit_getState(this, UNIT_STATE_MAX_LIFE)
endfunction

function unit_getMaxMana takes unit this returns real
	return unit_getState(this, UNIT_STATE_MAX_MANA)
endfunction

function unit_setState takes unit this, unitstate state, real value returns nothing
	call SetUnitState(this, state, value)
endfunction

function unit_setHP takes unit this, real hp returns nothing
	call unit_setState(this, UNIT_STATE_LIFE, hp)
endfunction

function unit_setLevel takes unit this, integer level, boolean showEyeCandy returns nothing
	call SetHeroLevel(this, level, showEyeCandy)
endfunction

function unit_setMana takes unit this, real wval returns nothing
	call unit_setState(this, UNIT_STATE_MANA, wval)
endfunction

function unit_suspendXp takes unit this, boolean suspend returns nothing
	call SuspendHeroXP(this, suspend)
endfunction

function BossEvent_refreshHero takes nothing returns nothing
	call unit_setHP(General_hunter, unit_getMaxHP(General_hunter))
	call unit_setMana(General_hunter, unit_getMaxMana(General_hunter))
	if unit_getLevel(General_hunter) < 2 then
		call unit_suspendXp(General_hunter, false)
		call unit_setLevel(General_hunter, 2, false)
		call UnitStripHeroLevel(General_hunter, 1)
		call unit_suspendXp(General_hunter, true)
	else
		call unit_suspendXp(General_hunter, false)
		call UnitStripHeroLevel(General_hunter, 1)
		call unit_suspendXp(General_hunter, true)
	endif
endfunction

function player_select takes player this, unit u returns nothing
	if Player_localPlayer == this then
		call SelectUnit(u, true)
	endif
endfunction

function rect_getCenterX takes rect this returns real
	return GetRectCenterX(this)
endfunction

function rect_getCenterY takes rect this returns real
	return GetRectCenterY(this)
endfunction

function rect_getCenter takes rect this returns real
	set rect_getCenter_return_x = rect_getCenterX(this)
	set rect_getCenter_return_y = rect_getCenterY(this)
	return rect_getCenter_return_x
endfunction

function unit_getHP takes unit this returns real
	return unit_getState(this, UNIT_STATE_LIFE)
endfunction

function unit_isAliveTrick takes unit this returns boolean
	return unit_getHP(this) > .405
endfunction

function unit_revive takes unit this, real pos_x, real pos_y, boolean doEyecandy returns nothing
	call ReviveHero(this, pos_x, pos_y, doEyecandy)
endfunction

function unit_setInvulnerable takes unit this, boolean flag returns nothing
	call SetUnitInvulnerable(this, flag)
endfunction

function unit_setPos takes unit this, real pos_x, real pos_y returns nothing
	call SetUnitPosition(this, pos_x, pos_y)
endfunction

function BossEvent_inShop takes nothing returns nothing
	if ( not unit_isAliveTrick(General_hunter)) or General_hunterIsDead then
		call unit_revive(General_hunter, rect_getCenter(gg_rct_HunterStart), rect_getCenter_return_y, true)
	endif
	call unit_setPos(General_hunter, rect_getCenter(gg_rct_HunterStart), rect_getCenter_return_y)
	call unit_setInvulnerable(General_hunter, false)
	call BossEvent_refreshHero()
	call player_select(Player(0), General_hunter)
	set General_hunterIsDead = false
	set BossEvent_isRunning = false
endfunction

function timer_start takes timer this, real time, code timerCallBack returns nothing
	call TimerStart(this, time, false, timerCallBack)
endfunction

function BossEvent_onFade takes nothing returns nothing
	call BossEvent_refreshHero()
	call timer_start(BossEvent_miscTimer, 0., BossEvent_codeOnInit)
endfunction

function player_setCameraBoundsToRect takes player this, rect r returns nothing
	call SetCameraBoundsToRectForPlayerBJ(this, r)
endfunction

function player_setCameraPosition takes player this, real pos_x, real pos_y returns nothing
	call SetCameraPositionForPlayer(this, pos_x, pos_y)
endfunction

function moveHunter takes real pos_x, real pos_y, rect cameraBounds, real camPan_x, real camPan_y returns nothing
	call player_setCameraBoundsToRect(Player(0), cameraBounds)
	call player_setCameraPosition(Player(0), camPan_x, camPan_y)
	call unit_setPos(General_hero, pos_x, pos_y)
endfunction

function replayMusic takes nothing returns nothing
	call StopMusic(false)
	call PlayMusic(Music_currentMusic)
	call timer_start(Music_loopTimer, Music_musicLength, ref_function_replayMusic)
endfunction

function playMusic takes string music returns nothing
	set Music_currentMusic = music
	set Music_musicLength = GetSoundFileDurationBJ(music)
	call timer_pause(Music_loopTimer)
	call replayMusic()
endfunction

function BossEvent_toShop takes nothing returns nothing
	call moveHunter(rect_getCenter(gg_rct_HunterStart), rect_getCenter_return_y, gg_rct_VisionZone_Hunters_Lair, rect_getCenter(gg_rct_HunterStart), rect_getCenter_return_y)
	call playMusic(Sounds_comradeship)
	call timer_start(BossEvent_miscTimer, 0., BossEvent_codeOnFade)
	call SetWaterBaseColor(255, 255, 255, 255)
endfunction

function timerdialog_display takes timerdialog this, boolean display returns nothing
	call TimerDialogDisplay(this, display)
endfunction

function Cauldron_endCountDown takes nothing returns nothing
	call timerdialog_display(Cauldron_timerDialog_Countdown, false)
endfunction

function unit_setAnimation takes unit this, integer index returns nothing
	call SetUnitAnimationByIndex(this, index)
endfunction

function Charge_animation takes nothing returns nothing
	call unit_setAnimation(TheBear_theBear, 2)
endfunction

function addEffect takes string path, real pos_x, real pos_y returns effect
	return AddSpecialEffect(path, pos_x, pos_y)
endfunction

function effect_setOrientation takes effect this, real yaw, real pitch, real roll returns nothing
	call BlzSetSpecialEffectOrientation(this, yaw, pitch, roll)
endfunction

function effect_setScale takes effect this, real scale returns nothing
	call BlzSetSpecialEffectScale(this, scale)
endfunction

function unit_getPos takes unit this returns real
	set unit_getPos_return_x = unit_getX(this)
	set unit_getPos_return_y = unit_getY(this)
	return unit_getPos_return_x
endfunction

function Charge_moveSFX takes nothing returns nothing
	local effect receiver = addEffect("Abilities\\Weapons\\AncientProtectorMissile\\AncientProtectorMissile.mdl", unit_getPos(TheBear_theBear), unit_getPos_return_y)
	local effect receiver_2
	local effect receiver_3
	call effect_setOrientation(receiver, 0., 0., 0.)
	set receiver_2 = receiver
	call effect_setScale(receiver_2, 1.2)
	set receiver_3 = receiver_2
	call effect_destr(receiver_3)
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
endfunction

function Charge_setReady takes nothing returns nothing
	set Charge_isReady = true
endfunction

function timer_startPeriodic takes timer this, real time, code timerCallBack returns nothing
	call TimerStart(this, time, true, timerCallBack)
endfunction

function unit_setTimeScale takes unit this, real scale returns nothing
	call SetUnitTimeScale(this, scale)
endfunction

function Charge_startDelay2 takes nothing returns nothing
	local real temp_Charge_targetPoint_x
	local real temp_Charge_targetPoint_y
	call unit_setTimeScale(TheBear_theBear, 3.)
	call unit_setAnimation(TheBear_theBear, 2)
	set temp_Charge_targetPoint_x = unit_getPos(General_hunter)
	set temp_Charge_targetPoint_y = unit_getPos_return_y
	set Charge_targetPoint_x = temp_Charge_targetPoint_x
	set Charge_targetPoint_y = temp_Charge_targetPoint_y
	call CameraSetEQNoiseForPlayer(Player(0), 2.)
	call Charge_moveSFX()
	call timer_startPeriodic(Charge_timer_Misc, Charge_MOVE_UPDATEFREQ, ref_function_bridge_Charge_move)
	call timer_startPeriodic(Charge_timer_Animation, 0.305, ref_function_Charge_animation)
	call timer_startPeriodic(Charge_timer_SFX, 0.1, ref_function_Charge_moveSFX)
endfunction

function Charge_stopShake takes nothing returns nothing
	call timer_pause(Charge_timer_Shake)
	call CameraClearNoiseForPlayer(Player(0))
endfunction

function unit_getAbilityLevel takes unit this, integer id returns integer
	return GetUnitAbilityLevel(this, id)
endfunction

function unit_queueAnimation takes unit this, string animation returns nothing
	call QueueUnitAnimation(this, animation)
endfunction

function unit_removeAbility takes unit this, integer abil returns boolean
	return UnitRemoveAbility(this, abil)
endfunction

function unit_unpause takes unit this returns nothing
	call PauseUnit(this, false)
endfunction

function Charge_stop takes nothing returns nothing
	call Charge_stopShake()
	set TheBear_isIdle = true
	set Charge_isReady = false
	call timer_pause(Charge_timer_Animation)
	call timer_pause(Charge_timer_Misc)
	call timer_pause(Charge_timer_SFX)
	call unit_queueAnimation(TheBear_theBear, "stand")
	call unit_unpause(TheBear_theBear)
	if unit_getAbilityLevel(TheBear_theBear, 1093677638) > 0 then
		call unit_removeAbility(TheBear_theBear, 1093677638)
	endif
	if Charge_stunSFX != null then
		call effect_destr(Charge_stunSFX)
	endif
	call timer_start(Charge_timer_Misc, Charge_COOLDOWN, ref_function_Charge_setReady)
endfunction

function unit_issueImmediateOrder takes unit this, string order returns boolean
	return IssueImmediateOrder(this, order)
endfunction

function ClickableObject_stopAttack takes nothing returns boolean
	call unit_issueImmediateOrder(GetAttacker(), "stop")
	return false
endfunction

function unit_damageTarget takes unit this, unit target, real amount returns nothing
	call UnitDamageTarget(this, target, amount, false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNIVERSAL, WEAPON_TYPE_WHOKNOWS)
endfunction

function unit_isAlive takes unit this returns boolean
	return UnitAlive(this)
endfunction

function real_squared takes real this returns real
	return this * this
endfunction

function vec2_distanceTo takes real this_x, real this_y, real v_x, real v_y returns real
	return SquareRoot(real_squared(v_x - this_x) + real_squared(v_y - this_y))
endfunction

function FlameStrike_burnDmg takes nothing returns nothing
	local integer instance
	local real hunterPos_x
	local real hunterPos_y
	local boolean burnHunter
	local integer i
	local integer temp
	local real temp_hunterPos_x
	local real temp_hunterPos_y
	local integer tempIndex
	local real temp_2
	local real temp_3
	if FlameStrike_instanceCounter > 0 then
		set temp_hunterPos_x = unit_getPos(General_hunter)
		set temp_hunterPos_y = unit_getPos_return_y
		set hunterPos_x = temp_hunterPos_x
		set hunterPos_y = temp_hunterPos_y
		set burnHunter = false
		set i = 0
		set temp = FlameStrike_instanceCounter - 1
		loop
			exitwhen i > temp
			set instance = FlameStrike_instances[i]
			set temp_2 = hunterPos_x
			set temp_3 = hunterPos_y
			set tempIndex = instance
			if vec2_distanceTo(temp_2, temp_3, FlameStrike_pos[tempIndex], FlameStrike_pos_2[tempIndex]) < FlameStrike_AOERANGE and FlameStrike_readyToBurn[instance] and unit_isAlive(General_hunter) then
				set burnHunter = true
			endif
			set i = i + 1
		endloop
		if burnHunter then
			call unit_damageTarget(tm_Main_theMonster, General_hunter, FlameStrike_BURN_DMG * tm_Main_bossDmgInc)
			call widget_addEffect(General_hunter, "Abilities\\Spells\\Items\\AIfb\\AIfbSpecialArt.mdl", "chest")
			call timer_pause(FlameStrike_burnTimer)
			call timer_start(FlameStrike_burnTimer, FlameStrike_BURN_FREQ, ref_function_FlameStrike_burnStackPrevent)
		endif
	endif
endfunction

function FlameStrike_burnStackPrevent takes nothing returns nothing
	call timer_startPeriodic(FlameStrike_burnTimer, FlameStrike_BURN_CHECK_FREQ, ref_function_FlameStrike_burnDmg)
endfunction

function FlameStrike_setReady takes nothing returns nothing
	set FlameStrike_isReady = true
endfunction

function unit_setScale takes unit this, real scale returns nothing
	call SetUnitScale(this, scale, scale, scale)
endfunction

function Enrage_adjustSize takes nothing returns nothing
	call unit_setScale(TheBear_theBear, TheBear_startScale * (1. + (Enrage_sizeInc - Enrage_sizeInc * Enrage_count)) * (1. + Frenzy_sizeInc))
endfunction

function print takes string msg returns nothing
	call DisplayTimedTextToPlayer(Player_localPlayer, 0., 0., Printing_DEBUG_MSG_DURATION, msg)
endfunction

function print_2 takes real msg returns nothing
	call print(R2S(msg))
endfunction

function Frenzy_growth takes nothing returns nothing
	if Frenzy_shrink then
		set Frenzy_sizeInc = Frenzy_sizeInc - Frenzy_GROWTHPRTICK
		if Frenzy_sizeInc <= 0. then
			set Frenzy_sizeInc = 0.
			call timer_pause(Frenzy_timer_Misc)
		endif
		call Enrage_adjustSize()
	else
		set Frenzy_sizeInc = Frenzy_sizeInc + Frenzy_GROWTHPRTICK
		call print_2(Frenzy_sizeInc)
		call Enrage_adjustSize()
		if Frenzy_sizeInc >= Frenzy_SIZEINC then
			call timer_pause(Frenzy_timer_Misc)
			call unit_unpause(TheBear_theBear)
			set TheBear_canAttack = true
		endif
	endif
endfunction

function Frenzy_setReady takes nothing returns nothing
	set Frenzy_isReady = true
endfunction

function TheBear_setIdle takes real delay returns nothing
	call timer_start(TheBear_idleDelayTimer, delay, ref_function_TheBear_idle)
endfunction

function unit_setMoveSpeed takes unit this, real speed returns nothing
	call SetUnitMoveSpeed(this, speed)
endfunction

function Frenzy_stop takes nothing returns nothing
	if Frenzy_ENABLED then
		set Frenzy_shrink = true
		set Frenzy_isActive = false
		call TheBear_setIdle(Frenzy_FINISH_DELAY)
		call timer_startPeriodic(Frenzy_timer_Misc, Frenzy_GROWTHFREQ, ref_function_Frenzy_growth)
		call timer_start(Frenzy_timer_Duration, Frenzy_COOLDOWN, ref_function_Frenzy_setReady)
		call effect_destr(Frenzy_sfx[0])
		call effect_destr(Frenzy_sfx[1])
		call unit_setMoveSpeed(TheBear_theBear, TheBear_MOVESPEED)
		set TheBear_currentAttackSpeed = TheBear_ATTACKSPEED
	endif
endfunction

function GameTimer_closure_impl takes nothing returns nothing
	set GameTimer_currentTime = GameTimer_currentTime + Basics_ANIMATION_PERIOD
endfunction

function group_addUnit_1 takes group this, unit units_0 returns nothing
	call GroupAddUnit(this, units_0)
endfunction

function Group_closure_impl takes nothing returns nothing
	call group_addUnit_1(Group_iterGroup, GetEnumUnit())
endfunction

function Group_closure_impl_2 takes nothing returns nothing
	set Group_unitCounter = Group_unitCounter + 1
endfunction

function Group_closure_impl_3 takes nothing returns nothing
	set Group_randomCounter = Group_randomCounter - 1
	if Group_randomCounter == 0 then
		set Group_randomSelected = GetEnumUnit()
	endif
endfunction

function IceBlast_setReady takes nothing returns nothing
	set IceBlast_isReady = true
endfunction

function unit_getTypeId takes unit this returns integer
	return GetUnitTypeId(this)
endfunction

function InteractableObject_filter takes nothing returns boolean
	return unit_getTypeId(GetFilterUnit()) == InteractableObject_MARKERID
endfunction

function unit_setAnimation_2 takes unit this, string name returns nothing
	call SetUnitAnimation(this, name)
endfunction

function MagicCrystal_animation takes nothing returns nothing
	call unit_setAnimation_2(tm_Main_theMonster, "attack")
endfunction

function effect_setPos takes effect this, real pos_x, real pos_y, real pos_z returns nothing
	call BlzSetSpecialEffectPosition(this, pos_x, pos_y, pos_z)
endfunction

function unit_getFlyHeight takes unit this returns real
	return GetUnitFlyHeight(this)
endfunction

function vec2_getTerrainZ takes real this_x, real this_y returns real
	call MoveLocation(Vectors_tempLoc, this_x, this_y)
	return GetLocationZ(Vectors_tempLoc)
endfunction

function vec2_withRealZ takes real this_x, real this_y, unit u returns real
	set vec2_withRealZ_return_x = this_x
	set vec2_withRealZ_return_y = this_y
	set vec2_withRealZ_return_z = vec2_getTerrainZ(this_x, this_y) + unit_getFlyHeight(u)
	return vec2_withRealZ_return_x
endfunction

function unit_getPos3Real takes unit this returns real
	set unit_getPos3Real_return_x = vec2_withRealZ(unit_getPos(this), unit_getPos_return_y, this)
	set unit_getPos3Real_return_y = vec2_withRealZ_return_y
	set unit_getPos3Real_return_z = vec2_withRealZ_return_z
	return unit_getPos3Real_return_x
endfunction

function vec2_withTerrainZ takes real this_x, real this_y, real zoffset returns real
	set vec2_withTerrainZ_return_x = this_x
	set vec2_withTerrainZ_return_y = this_y
	set vec2_withTerrainZ_return_z = vec2_getTerrainZ(this_x, this_y) + zoffset
	return vec2_withTerrainZ_return_x
endfunction

function MagicCrystal_moveSFX takes nothing returns nothing
	if  not tm_Main_bossIsEnraged then
		call effect_setPos(MagicCrystal_absorbSFX[2], unit_getPos3Real(tm_Main_theMonster), unit_getPos3Real_return_y, unit_getPos3Real_return_z)
	endif
	call effect_setPos(MagicCrystal_enrageSFX[0], vec2_withTerrainZ(unit_getPos(tm_Main_theMonster), unit_getPos_return_y, 100.), vec2_withTerrainZ_return_y, vec2_withTerrainZ_return_z)
endfunction

function addEffect_2 takes string path, real pos_x, real pos_y, real pos_z returns effect
	return AddSpecialEffect(path, pos_x, pos_y)
endfunction

function unit_addAbility takes unit this, integer abil returns boolean
	return UnitAddAbility(this, abil)
endfunction

function unit_getBaseDamage takes unit this, integer weaponIndex returns integer
	return BlzGetUnitBaseDamage(this, weaponIndex)
endfunction

function unit_getPos3with takes unit this, real z returns real
	set unit_getPos3with_return_x = unit_getX(this)
	set unit_getPos3with_return_y = unit_getY(this)
	set unit_getPos3with_return_z = z
	return unit_getPos3with_return_x
endfunction

function unit_setBaseDamage takes unit this, integer baseDamage, integer weaponIndex returns nothing
	call BlzSetUnitBaseDamage(this, baseDamage, weaponIndex)
endfunction

function unit_setVertexColor takes unit this, integer r, integer g, integer b, integer a returns nothing
	call SetUnitVertexColor(this, r, g, b, a)
endfunction

function MagicCrystal_releaseBossDelay1 takes nothing returns nothing
	local effect receiver
	local effect receiver_2
	if  not tm_Main_bossIsEnraged then
		set MagicCrystal_absorbSFX[2] = addEffect_2("Abilities\\Spells\\Human\\ManaShield\\ManaShieldCaster.mdl", vec2_withTerrainZ(unit_getPos(tm_Main_theMonster), unit_getPos_return_y, 100.), vec2_withTerrainZ_return_y, vec2_withTerrainZ_return_z)
		call unit_setBaseDamage(tm_Main_theMonster, R2I(unit_getBaseDamage(tm_Main_theMonster, 1) * tm_Main_CRYSTALABSORBED_DMGINC), 1)
		set tm_Main_bossDmgInc = tm_Main_CRYSTALABSORBED_DMGINC
		call unit_addAbility(tm_Main_theMonster, 1093677622)
		set receiver = addEffect_2(Abilities_farseerMissile, unit_getPos3with(tm_Main_theMonster, 75.), unit_getPos3with_return_y, unit_getPos3with_return_z)
		call effect_setScale(receiver, 2.0)
		set MagicCrystal_enrageSFX[0] = receiver
		call timer_startPeriodic(MagicCrystal_runTimer2, 0.02, ref_function_MagicCrystal_moveSFX)
	else
		set receiver_2 = addEffect_2(Abilities_farseerMissile, unit_getPos3with(tm_Main_theMonster, 75.), unit_getPos3with_return_y, unit_getPos3with_return_z)
		call effect_setScale(receiver_2, 2.0)
		set MagicCrystal_enrageSFX[0] = receiver_2
		call unit_setVertexColor(tm_Main_theMonster, 200, 200, 255, 175)
		call timer_startPeriodic(MagicCrystal_runTimer2, 0.02, ref_function_MagicCrystal_moveSFX)
		call unit_addAbility(tm_Main_theMonster, 1093677621)
		call unit_setBaseDamage(tm_Main_theMonster, R2I(unit_getBaseDamage(tm_Main_theMonster, 1) * tm_Main_ENRAGE_DMGINC), 1)
		set tm_Main_bossDmgInc = tm_Main_ENRAGE_DMGINC
	endif
	call timer_start(MagicCrystal_runTimer1, 2.0, ref_function_MagicCrystal_releaseBossDelay2)
	call playMusic(Sounds_orcVictory)
	set receiver = null
	set receiver_2 = null
endfunction

function setIdle takes real delay returns nothing
	call timer_start(tm_Main_busyDelayTimer, delay, ref_function_idle)
endfunction

function unit_issueTargetOrder takes unit this, string order, widget targetWidget returns boolean
	return IssueTargetOrder(this, order, targetWidget)
endfunction

function MagicCrystal_releaseBossDelay2 takes nothing returns nothing
	call unit_unpause(tm_Main_theMonster)
	call unit_issueTargetOrder(tm_Main_theMonster, "attack", General_hunter)
	call setIdle(1.)
endfunction

function popUnit takes nothing returns nothing
	set OnUnitEnterLeave_tempUnitsCount = OnUnitEnterLeave_tempUnitsCount - 1
endfunction

function pushUnit takes unit u returns nothing
	set OnUnitEnterLeave_tempUnits[OnUnitEnterLeave_tempUnitsCount] = u
	set OnUnitEnterLeave_tempUnitsCount = OnUnitEnterLeave_tempUnitsCount + 1
endfunction

function trigger_evaluate takes trigger this returns boolean
	return TriggerEvaluate(this)
endfunction

function unit_makeAbilityPermanent takes unit this, integer abil, boolean flag returns boolean
	return UnitMakeAbilityPermanent(this, flag, abil)
endfunction

function prepareUnit takes unit u returns nothing
	local unit receiver = u
	local unit receiver_2
	call unit_addAbility(receiver, OnUnitEnterLeave_ABILITY_ID)
	set receiver_2 = receiver
	call unit_makeAbilityPermanent(receiver_2, OnUnitEnterLeave_ABILITY_ID, true)
	call pushUnit(u)
	call trigger_evaluate(OnUnitEnterLeave_eventTrigger)
	call popUnit()
	set receiver = null
	set receiver_2 = null
endfunction

function OnUnitEnterLeave_closure_impl takes nothing returns nothing
	call prepareUnit(GetEnumUnit())
endfunction

function trigger_execute takes trigger this returns nothing
	call TriggerExecute(this)
endfunction

function OnUnitEnterLeave_closure_impl_2 takes nothing returns nothing
	local unit leavingUnit = GetTriggerUnit()
	if unit_getAbilityLevel(leavingUnit, OnUnitEnterLeave_ABILITY_ID) == 0 then
		call pushUnit(leavingUnit)
		call trigger_execute(OnUnitEnterLeave_eventTrigger)
		call popUnit()
	endif
	set leavingUnit = null
endfunction

function OnUnitEnterLeave_closure_impl_3 takes nothing returns nothing
	call prepareUnit(GetFilterUnit())
endfunction

function unit_getCurrentOrder takes unit this returns integer
	return GetUnitCurrentOrder(this)
endfunction

function unit_issuePointOrderById takes unit this, integer id, real target_x, real target_y returns boolean
	return IssuePointOrderById(this, id, target_x, target_y)
endfunction

function Shockwave_checkStatus takes nothing returns nothing
	if unit_getCurrentOrder(TheBear_theBear) != Orders_carrionswarm then
		call unit_issuePointOrderById(TheBear_theBear, Orders_carrionswarm, unit_getPos(General_hunter), unit_getPos_return_y)
	endif
endfunction

function group_contains takes group this, unit u returns boolean
	return IsUnitInGroup(u, this)
endfunction

function player_isEnemyOf takes player this, player p returns boolean
	return IsPlayerEnemy(this, p)
endfunction

function unit_getOwner takes unit this returns player
	return GetOwningPlayer(this)
endfunction

function Shockwave_dmgFilter takes nothing returns boolean
	if player_isEnemyOf(unit_getOwner(GetFilterUnit()), unit_getOwner(Shockwave_caster)) and ( not group_contains(Shockwave_targetsHit, GetFilterUnit())) then
		return true
	endif
	return false
endfunction

function Shockwave_endDelay takes nothing returns nothing
	set Shockwave_delayHasRun = true
	set Shockwave_delayIsRunning = false
	call timer_startPeriodic(Shockwave_timer_Status, Shockwave_DELAYRESETTIME, ref_function_Shockwave_resetDelay)
endfunction

function Shockwave_finishCooldown takes nothing returns nothing
	set Shockwave_isReady = true
endfunction

function group_clear takes group this returns nothing
	call GroupClear(this)
endfunction

function Shockwave_stop takes nothing returns nothing
	if Shockwave_ENABLED then
		call timer_pause(Shockwave_timer_DmgTimer)
		call group_clear(Shockwave_targetsHit)
		set Shockwave_dist = 0.
		call CameraClearNoiseForPlayer(Player(0))
	endif
endfunction

function group_enumUnitsInRange takes group this, real pos_x, real pos_y, real range, boolexpr filter returns nothing
	call GroupEnumUnitsInRange(this, pos_x, pos_y, range, filter)
endfunction

function group_hasNext takes group this returns boolean
	return FirstOfGroup(this) != null
endfunction

function group_next takes group this returns unit
	local unit iterUnit = FirstOfGroup(this)
	call GroupRemoveUnit(this, iterUnit)
	set group_nexttempReturn = iterUnit
	set iterUnit = null
	return group_nexttempReturn
endfunction

function vec3_getTerrainZ takes real this_x, real this_y, real this_z returns real
	call MoveLocation(Vectors_tempLoc, this_x, this_y)
	return GetLocationZ(Vectors_tempLoc)
endfunction

function angle_toVec takes real this_radians, real len returns real
	set angle_toVec_return_x = Cos(this_radians) * len
	set angle_toVec_return_y = Sin(this_radians) * len
	return angle_toVec_return_x
endfunction

function vec3_op_plus takes real this_x, real this_y, real this_z, real v_x, real v_y returns real
	set vec3_op_plus_return_x = this_x + v_x
	set vec3_op_plus_return_y = this_y + v_y
	set vec3_op_plus_return_z = this_z
	return vec3_op_plus_return_x
endfunction

function vec3_offset2d takes real this_x, real this_y, real this_z, real ang_radians, real dist returns real
	set vec3_offset2d_return_x = vec3_op_plus(this_x, this_y, this_z, angle_toVec(ang_radians, dist), angle_toVec_return_y)
	set vec3_offset2d_return_y = vec3_op_plus_return_y
	set vec3_offset2d_return_z = vec3_op_plus_return_z
	return vec3_offset2d_return_x
endfunction

function vec3_toVec2 takes real this_x, real this_y, real this_z returns real
	set vec3_toVec2_return_x = this_x
	set vec3_toVec2_return_y = this_y
	return vec3_toVec2_return_x
endfunction

function Shockwave_move takes nothing returns nothing
	local real temp_Shockwave_pos_x = vec3_offset2d(Shockwave_pos_x, Shockwave_pos_y, Shockwave_pos_z, Shockwave_direction_radians, Shockwave_WIDTH)
	local real temp_Shockwave_pos_y = vec3_offset2d_return_y
	local real temp_Shockwave_pos_z = vec3_offset2d_return_z
	local real roll
	local real sizeFactor
	local effect receiver
	local effect receiver_2
	local effect receiver_3
	local effect receiver_4
	local effect receiver_5
	local effect receiver_6
	local effect receiver_7
	local effect receiver_8
	local effect receiver_9
	local group tempGroup
	local group receiver_10
	local unit u
	local group from
	set Shockwave_pos_x = temp_Shockwave_pos_x
	set Shockwave_pos_y = temp_Shockwave_pos_y
	set Shockwave_pos_z = temp_Shockwave_pos_z
	set Shockwave_pos_z = vec3_getTerrainZ(Shockwave_pos_x, Shockwave_pos_y, Shockwave_pos_z)
	set Shockwave_dist = Shockwave_dist + Shockwave_WIDTH
	set roll = GetRandomReal(0., Maths_PI2)
	set sizeFactor = 1. + GetRandomReal(0., 0.2)
	set receiver = addEffect_2("Abilities\\Weapons\\AncientProtectorMissile\\AncientProtectorMissile.mdl", Shockwave_pos_x, Shockwave_pos_y, Shockwave_pos_z)
	call effect_setOrientation(receiver, 0., 0., roll)
	set receiver_2 = receiver
	call effect_setScale(receiver_2, 1.2 * sizeFactor)
	set receiver_3 = receiver_2
	call effect_destr(receiver_3)
	set receiver_4 = addEffect_2("Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl", Shockwave_pos_x, Shockwave_pos_y, Shockwave_pos_z)
	call effect_setOrientation(receiver_4, 0., 0., roll)
	set receiver_5 = receiver_4
	call effect_setScale(receiver_5, 1.2 * sizeFactor)
	set receiver_6 = receiver_5
	call effect_destr(receiver_6)
	set receiver_7 = addEffect_2("Abilities\\Spells\\Orc\\EarthQuake\\EarthQuakeTarget.mdl", Shockwave_pos_x, Shockwave_pos_y, Shockwave_pos_z)
	call effect_setOrientation(receiver_7, 0., 0., roll)
	set receiver_8 = receiver_7
	call effect_setScale(receiver_8, 0.5 * sizeFactor)
	set receiver_9 = receiver_8
	call effect_destr(receiver_9)
	call Filter(ref_function_Shockwave_dmgFilter)
	set receiver_10 = CreateGroup()
	call group_enumUnitsInRange(receiver_10, vec3_toVec2(Shockwave_pos_x, Shockwave_pos_y, Shockwave_pos_z), vec3_toVec2_return_y, Shockwave_WIDTH, Filter(ref_function_Shockwave_dmgFilter))
	set tempGroup = receiver_10
	set from = tempGroup
	loop
		exitwhen  not group_hasNext(from)
		set u = group_next(from)
		call UnitDamageTarget(TheBear_theBear, General_hunter, Shockwave_DAMAGE * (1. + TheBear_damageInc), false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
		call group_addUnit_1(Shockwave_targetsHit, u)
	endloop
	call group_clear(tempGroup)
	if Shockwave_dist >= Shockwave_DISTANCE then
		call Shockwave_stop()
	endif
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
	set receiver_6 = null
	set receiver_7 = null
	set receiver_8 = null
	set receiver_9 = null
	set tempGroup = null
	set receiver_10 = null
	set u = null
	set from = null
endfunction

function Shockwave_resetDelay takes nothing returns nothing
	set Shockwave_delayHasRun = false
endfunction

function real_asAngleRadians takes real this returns real
	return this
endfunction

function vec3_angleTo2d takes real this_x, real this_y, real this_z, real v_x, real v_y returns real
	return real_asAngleRadians(Atan2(v_y - this_y, v_x - this_x))
endfunction

function Shockwave_onCast takes nothing returns nothing
	local effect receiver
	local effect receiver_2
	local real temp_Shockwave_pos_x
	local real temp_Shockwave_pos_y
	local real temp_Shockwave_pos_z
	call Shockwave_resetDelay()
	call timer_pause(Shockwave_timer_Status)
	set TheBear_canAttack = true
	call TheBear_setIdle(Shockwave_IDLE_DELAY)
	set Shockwave_caster = GetSpellAbilityUnit()
	set temp_Shockwave_pos_x = unit_getPos3Real(GetSpellAbilityUnit())
	set temp_Shockwave_pos_y = unit_getPos3Real_return_y
	set temp_Shockwave_pos_z = unit_getPos3Real_return_z
	set Shockwave_pos_x = temp_Shockwave_pos_x
	set Shockwave_pos_y = temp_Shockwave_pos_y
	set Shockwave_pos_z = temp_Shockwave_pos_z
	set Shockwave_direction_radians = vec3_angleTo2d(Shockwave_pos_x, Shockwave_pos_y, Shockwave_pos_z, GetSpellTargetX(), GetSpellTargetY())
	set receiver = addEffect_2("Abilities\\Spells\\Orc\\WarStomp\\WarStompCaster.mdl", vec3_offset2d(Shockwave_pos_x, Shockwave_pos_y, Shockwave_pos_z, Shockwave_direction_radians, 200.), vec3_offset2d_return_y, vec3_offset2d_return_z)
	call effect_setScale(receiver, 0.75)
	set receiver_2 = receiver
	call effect_destr(receiver_2)
	call timer_startPeriodic(Shockwave_timer_DmgTimer, Shockwave_WIDTH / Shockwave_SPEED, ref_function_Shockwave_move)
	call timer_start(Shockwave_timer_Cooldown, Shockwave_COOLDOWN, ref_function_Shockwave_finishCooldown)
	call CameraSetEQNoiseForPlayer(Player(0), 2.)
	set receiver = null
	set receiver_2 = null
endfunction

function unit_getAgi takes unit this, boolean includeBonuses returns integer
	return GetHeroAgi(this, includeBonuses)
endfunction

function unit_addAgi takes unit this, integer value returns nothing
	call SetHeroAgi(this, unit_getAgi(this, false) + value, true)
endfunction

function unit_getInt takes unit this, boolean includeBonuses returns integer
	return GetHeroInt(this, includeBonuses)
endfunction

function unit_addInt takes unit this, integer value returns nothing
	call SetHeroInt(this, unit_getInt(this, false) + value, true)
endfunction

function unit_getStr takes unit this, boolean includeBonuses returns integer
	return GetHeroStr(this, includeBonuses)
endfunction

function unit_addStr takes unit this, integer value returns nothing
	call SetHeroStr(this, unit_getStr(this, false) + value, true)
endfunction

function Stats_adjust takes unit whichUnit, integer stat, integer adjustment returns nothing
	if Stats_firstTime then
		set Stats_firstTime = false
		set Stats_startInt = unit_getInt(whichUnit, false)
		set Stats_startStr = unit_getStr(whichUnit, false)
		set Stats_startAgi = unit_getAgi(whichUnit, false)
	endif
	if stat == Stats_INT then
		call unit_addInt(whichUnit, adjustment)
	elseif stat == Stats_STR then
		call unit_addStr(whichUnit, adjustment)
	elseif stat == Stats_AGI then
		call unit_addAgi(whichUnit, adjustment)
	else
		call print("ERROR: A STAT HAS BEEN GIVEN TO Stats.Adjust(), that doesn't exist!")
	endif
endfunction

function player_setState takes player this, playerstate state, integer wval returns nothing
	call SetPlayerState(this, state, wval)
endfunction

function player_setLumber takes player this, integer wval returns nothing
	call player_setState(this, PLAYER_STATE_RESOURCE_LUMBER, wval)
endfunction

function unit_setAgi takes unit this, integer value returns nothing
	call SetHeroAgi(this, value, true)
endfunction

function unit_setInt takes unit this, integer value returns nothing
	call SetHeroInt(this, value, true)
endfunction

function unit_setStr takes unit this, integer value returns nothing
	call SetHeroStr(this, value, true)
endfunction

function Stats_reset takes unit whichUnit returns nothing
	if  not Stats_firstTime then
		call unit_setInt(whichUnit, Stats_startInt)
		call unit_setStr(whichUnit, Stats_startStr)
		call unit_setAgi(whichUnit, Stats_startAgi)
		call player_setLumber(Player(0), Stats_START_STATPOINTS)
	endif
endfunction

function item_getTypeId takes item this returns integer
	return GetItemTypeId(this)
endfunction

function Stats_train takes nothing returns boolean
	local integer trainingID
	if unit_getTypeId(GetSellingUnit()) == Stats_SHOP_ID then
		set trainingID = item_getTypeId(GetSoldItem())
		if Stats_TRAININGID_INT1 == trainingID then
			call Stats_adjust(GetBuyingUnit(), Stats_INT, 1)
		elseif Stats_TRAININGID_INT5 == trainingID then
			call Stats_adjust(GetBuyingUnit(), Stats_INT, 5)
		elseif Stats_TRAININGID_STR1 == trainingID then
			call Stats_adjust(GetBuyingUnit(), Stats_STR, 1)
		elseif Stats_TRAININGID_STR5 == trainingID then
			call Stats_adjust(GetBuyingUnit(), Stats_STR, 5)
		elseif Stats_TRAININGID_AGI1 == trainingID then
			call Stats_adjust(GetBuyingUnit(), Stats_AGI, 1)
		elseif Stats_TRAININGID_AGI5 == trainingID then
			call Stats_adjust(GetBuyingUnit(), Stats_AGI, 5)
		elseif Stats_TRAININGID_RESET == trainingID then
			call Stats_reset(GetBuyingUnit())
		endif
	endif
	return false
endfunction

function TheBear_idle takes nothing returns nothing
	call timer_pause(TheBear_idleDelayTimer)
	set TheBear_isIdle = true
endfunction

function TheBear_initFight takes nothing returns nothing
	set TheBear_isIdle = true
	set TheBear_canAttack = true
	call unit_unpause(General_hunter)
	call unit_unpause(TheBear_theBear)
	call unit_issueTargetOrder(TheBear_theBear, "attack", General_hunter)
	call playMusic(Sounds_orcVictory)
	call timer_startPeriodic(TheBear_mainLoopTimer, TheBear_MAINLOOP_FREQ, ref_function_bridge_TheBear_mainLoop)
endfunction

function BossEvent_failed takes code onFade returns nothing
	set BossEvent_codeOnFade = onFade
	call timer_start(BossEvent_miscTimer, 2.0, ref_function_bridge_BossEvent_failed_soundDelay)
endfunction

function BossEvent_win takes code afterSoundCode returns nothing
	call timer_start(BossEvent_miscTimer, 2.0, ref_function_bridge_BossEvent_win_soundDelay)
endfunction

function stopMusic takes nothing returns nothing
	call timer_pause(Music_loopTimer)
	call StopMusic(true)
endfunction

function unit_pause takes unit this returns nothing
	call PauseUnit(this, true)
endfunction

function TheBear_someoneDies takes nothing returns boolean
	local unit dyingUnit = GetDyingUnit()
	if dyingUnit == TheBear_theBear then
		call unit_setAnimation_2(TheBear_theBear, "death")
		call unit_queueAnimation(TheBear_theBear, "decay flesh")
		call stopMusic()
		call timer_pause(TheBear_mainLoopTimer)
		call unit_setInvulnerable(General_hunter, true)
		call Bleed_removeStacks()
		call BossEvent_win(ref_function_bridge_TheBear_clearEvent)
	elseif dyingUnit == General_hunter then
		set General_hunterIsDead = true
		call Bleed_removeStacks()
		call stopMusic()
		call unit_pause(TheBear_theBear)
		call unit_setInvulnerable(TheBear_theBear, true)
		call timer_pause(TheBear_mainLoopTimer)
		call BossEvent_failed(ref_function_bridge_TheBear_clearEvent_2)
	endif
	set dyingUnit = null
	return false
endfunction

function Cauldron_startCountdown takes nothing returns nothing
	call timer_start(Cauldron_timer_Countdown, Cauldron_SUMMONTIME, ref_function_Cauldron_endCountDown)
	call timerdialog_display(Cauldron_timerDialog_Countdown, true)
endfunction

function TheNecromancer_initFight takes nothing returns nothing
	call unit_unpause(General_hunter)
	call timer_start(TheNecromancer_timer_MainLoop, 30., ref_function_bridge_TheNecromancer_phase1)
	call Cauldron_startCountdown()
endfunction

function TheNecromancer_someoneDies takes nothing returns boolean
	return false
endfunction

function Trig_Arcane_Barrage_Buff_Actions takes nothing returns nothing
	set udg_tempPoint = GetUnitLoc(udg_ArcaneBarrage_Target)
	call BlzSetSpecialEffectPositionLoc(udg_ArcaneBarrage_BuffSFX, udg_tempPoint)
	call RemoveLocation(udg_tempPoint)
endfunction

function Trig_Arcane_Barrage_Damage_Actions takes nothing returns nothing
	call UnitDamageTargetBJ(udg_RedHero, udg_ArcaneBarrage_Target, 100.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
	set udg_tempPoint = GetUnitLoc(udg_ArcaneBarrage_Target)
	set udg_tempUGroup = GetUnitsInRangeOfLocMatching(175.00, udg_tempPoint, Condition(ref_function_Trig_Arcane_Barrage_Damage_Func003002003))
	call ForGroupBJ(udg_tempUGroup, ref_function_Trig_Arcane_Barrage_Damage_Func004A)
	call DestroyEffectBJ(udg_ArcaneBarrage_SFX)
	call RemoveLocation(udg_tempPoint)
	call DestroyGroup(udg_tempUGroup)
endfunction

function Trig_Arcane_Barrage_Damage_Func003002003001001 takes nothing returns boolean
	return IsUnitAliveBJ(GetFilterUnit()) == true
endfunction

function Trig_Arcane_Barrage_Damage_Func003002003001002 takes nothing returns boolean
	return GetFilterUnit() != udg_ArcaneBarrage_Target
endfunction

function Trig_Arcane_Barrage_Damage_Func003002003001 takes nothing returns boolean
	return GetBooleanAnd(Trig_Arcane_Barrage_Damage_Func003002003001001(), Trig_Arcane_Barrage_Damage_Func003002003001002())
endfunction

function Trig_Arcane_Barrage_Damage_Func003002003002 takes nothing returns boolean
	return IsUnitEnemy(GetFilterUnit(), Player(0)) == true
endfunction

function Trig_Arcane_Barrage_Damage_Func003002003 takes nothing returns boolean
	return GetBooleanAnd(Trig_Arcane_Barrage_Damage_Func003002003001(), Trig_Arcane_Barrage_Damage_Func003002003002())
endfunction

function Trig_Arcane_Barrage_Damage_Func004A takes nothing returns nothing
	call UnitDamageTargetBJ(udg_RedHero, GetEnumUnit(), 40.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
	call AddSpecialEffectTargetUnitBJ("chest", GetEnumUnit(), "Abilities\\Weapons\\WingedSerpentMissile\\WingedSerpentMissile.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
endfunction

function Trig_Arcane_Barrage_End_Actions takes nothing returns nothing
	call DestroyEffectBJ(udg_ArcaneBarrage_BuffSFX)
	call PauseTimerBJ(true, udg_ArcaneBarrage_Timer[0])
	call PauseTimerBJ(true, udg_ArcaneBarrage_Timer[2])
	call PauseTimerBJ(true, udg_ArcaneBarrage_Timer[3])
endfunction

function Trig_Arcane_Barrage_Fall_Func002C takes nothing returns boolean
	if  not (udg_ArcaneBarrage_Counter[0] >= 2) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Barrage_Fall_Actions takes nothing returns nothing
	set udg_ArcaneBarrage_Counter[0] = udg_ArcaneBarrage_Counter[0] + 1
	if Trig_Arcane_Barrage_Fall_Func002C() then
		call PauseTimerBJ(true, udg_ArcaneBarrage_Timer[0])
	endif
	call AddSpecialEffectTargetUnitBJ("origin", udg_ArcaneBarrage_Target, "Abilities\\Spells\\NightElf\\Starfall\\StarfallTarget.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 0.30)
	set udg_ArcaneBarrage_SFX = GetLastCreatedEffectBJ()
	call StartTimerBJ(udg_ArcaneBarrage_Timer[1], false, 0.70)
endfunction

function Trig_Arcane_Barrage_Start_Actions takes nothing returns nothing
	set udg_ArcaneBarrage_Counter[0] = 0
	set udg_ArcaneBarrage_Target = GetSpellTargetUnit()
	set udg_tempPoint = GetUnitLoc(udg_ArcaneBarrage_Target)
	call AddSpecialEffectLocBJ(udg_tempPoint, "Abilities\\Spells\\NightElf\\Starfall\\StarfallCaster.mdl")
	call BlzSetSpecialEffectTimeScale(GetLastCreatedEffectBJ(), 2.50)
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 0.60)
	set udg_ArcaneBarrage_BuffSFX = GetLastCreatedEffectBJ()
	call RemoveLocation(udg_tempPoint)
	call StartTimerBJ(udg_ArcaneBarrage_Timer[0], true, 1.50)
	call StartTimerBJ(udg_ArcaneBarrage_Timer[2], true, 0.05)
	call StartTimerBJ(udg_ArcaneBarrage_Timer[3], false, 3.70)
endfunction

function Trig_Arcane_Barrage_Start_Conditions takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677395) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Depletion_Func003C takes nothing returns boolean
	if  not (udg_tempInt > 0) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Depletion_Actions takes nothing returns nothing
	set udg_tempInt = GetHeroXP(udg_RedHero)
	if Trig_Arcane_Depletion_Func003C() then
		call SuspendHeroXPBJ(true, udg_RedHero)
		call SetHeroLevelBJ(udg_RedHero, 2, false)
		call SetHeroLevelBJ(udg_RedHero, 1, false)
		call AddHeroXPSwapped(udg_tempInt - 1, udg_RedHero, false)
		call SuspendHeroXPBJ(false, udg_RedHero)
	endif
endfunction

function Trig_Arcane_Depletion_Conditions takes nothing returns boolean
	if  not (udg_ArcaneEmpower == false) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Discharge_Func001C takes nothing returns boolean
	if  not (udg_ArcaneEmpower == true) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Discharge_Actions takes nothing returns nothing
	if Trig_Arcane_Discharge_Func001C() then
		call UnitDamageTargetBJ(GetSpellAbilityUnit(), GetSpellTargetUnit(), 300.00 + 0.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
	else
		set udg_tempInt = GetHeroXP(udg_RedHero)
		call UnitDamageTargetBJ(GetSpellAbilityUnit(), GetSpellTargetUnit(), 0.00 + I2R(GetHeroXP(udg_RedHero)) * 3.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
		call SuspendHeroXPBJ(true, udg_RedHero)
		call SetHeroLevelBJ(udg_RedHero, 2, false)
		call SetHeroLevelBJ(udg_RedHero, 1, false)
		call AddHeroXPSwapped(udg_tempInt / 2, udg_RedHero, false)
		call SuspendHeroXPBJ(false, udg_RedHero)
	endif
	call AddSpecialEffectTargetUnitBJ("origin", GetSpellTargetUnit(), "units\\nightelf\\Wisp\\Wisp.mdl")
	call BlzSetSpecialEffectColorByPlayer(GetLastCreatedEffectBJ(), Player(21))
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call AddSpecialEffectTargetUnitBJ("chest", GetSpellTargetUnit(), "Abilities\\Spells\\Undead\\OrbOfDeath\\OrbOfDeathMissile.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call PlaySoundOnUnitBJ(gg_snd_SpellStealMissile, 75.00, GetSpellTargetUnit())
endfunction

function Trig_Arcane_Discharge_Conditions takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677385) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Emp_End_Actions takes nothing returns nothing
	call PauseTimerBJ(true, udg_ArcaneBarrage_Timer[1])
	call PauseTimerBJ(true, udg_ArcaneBarrage_Timer[0])
	call UnitRemoveAbilityBJ(1093677387, udg_RedHero)
	call UnitRemoveAbilityBJ(1093677386, udg_RedHero)
	call UnitRemoveAbilityBJ(1093677388, udg_RedHero)
	call DestroyEffectBJ(udg_ArcaneEmp_SFX[0])
	call DestroyEffectBJ(udg_ArcaneEmp_SFX[1])
	set udg_ArcaneEmpower = false
	call SuspendHeroXPBJ(true, udg_RedHero)
	call SetHeroLevelBJ(udg_RedHero, 1, false)
	call SuspendHeroXPBJ(false, udg_RedHero)
endfunction

function Trig_Arcane_Emp_Move_Sfx_Func001C takes nothing returns boolean
	if  not (IsUnitDeadBJ(udg_RedHero) == true) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Emp_Move_Sfx_Actions takes nothing returns nothing
	if Trig_Arcane_Emp_Move_Sfx_Func001C() then
		call TriggerExecute(gg_trg_Arcane_Emp_End)
	else
		set udg_tempPoint = GetUnitLoc(udg_RedHero)
		set udg_tempReal = GetLocationZ(udg_tempPoint)
		call BlzSetSpecialEffectPosition(udg_ArcaneEmp_SFX[0], GetLocationX(udg_tempPoint), GetLocationY(udg_tempPoint), udg_tempReal - 25.00)
		call BlzSetSpecialEffectPosition(udg_ArcaneEmp_SFX[1], GetLocationX(udg_tempPoint), GetLocationY(udg_tempPoint), udg_tempReal + 75.00)
		call RemoveLocation(udg_tempPoint)
	endif
endfunction

function Trig_Arcane_Power_Func003C takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677126) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Power_Func004C takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677131) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Power_Func005C takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677401) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Power_Func006C takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677125) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Power_Func007C takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677391) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Power_Func008C takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677104) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Power_Func009C takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677396) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Power_Func010C takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677393) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Power_Func011C takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677395) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Power_Func012C takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677394) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Power_Func013C takes nothing returns boolean
	if  not (udg_tempBool == true) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Power_Func013Func004C takes nothing returns boolean
	if  not (GetUnitLevel(udg_RedHero) == 2) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Power_Actions takes nothing returns nothing
	set udg_tempBool = false
	if Trig_Arcane_Power_Func003C() then
		set udg_tempInt = 10
		set udg_tempBool = true
	endif
	if Trig_Arcane_Power_Func004C() then
		set udg_tempInt = 15
		set udg_tempBool = true
	endif
	if Trig_Arcane_Power_Func005C() then
		set udg_tempInt = 20
		set udg_tempBool = true
	endif
	if Trig_Arcane_Power_Func006C() then
		set udg_tempInt = 20
		set udg_tempBool = true
	endif
	if Trig_Arcane_Power_Func007C() then
		set udg_tempInt = 20
		set udg_tempBool = true
	endif
	if Trig_Arcane_Power_Func008C() then
		set udg_tempInt = 20
		set udg_tempBool = true
	endif
	if Trig_Arcane_Power_Func009C() then
		set udg_tempInt = 10
		set udg_tempBool = true
	endif
	if Trig_Arcane_Power_Func010C() then
		set udg_tempInt = 20
		set udg_tempBool = true
	endif
	if Trig_Arcane_Power_Func011C() then
		set udg_tempInt = 20
		set udg_tempBool = true
	endif
	if Trig_Arcane_Power_Func012C() then
		set udg_tempInt = 20
		set udg_tempBool = true
	endif
	if Trig_Arcane_Power_Func013C() then
		call SuspendHeroXPBJ(true, udg_RedHero)
		call AddHeroXPSwapped(udg_tempInt, udg_RedHero, false)
		call SuspendHeroXPBJ(false, udg_RedHero)
		if Trig_Arcane_Power_Func013Func004C() then
			set udg_ArcaneEmpower = true
			call AddSpecialEffectTargetUnitBJ("origin", udg_RedHero, "Abilities\\Spells\\Items\\AIre\\AIreTarget.mdl")
			call DestroyEffectBJ(GetLastCreatedEffectBJ())
			call AddSpecialEffectTargetUnitBJ("chest", udg_RedHero, "Abilities\\Weapons\\Bolt\\BoltImpact.mdl")
			call UnitAddAbilityBJ(1093677387, udg_RedHero)
			call UnitAddAbilityBJ(1093677386, udg_RedHero)
			call UnitAddAbilityBJ(1093677388, udg_RedHero)
			call AddSpecialEffectLocBJ(GetUnitLoc(udg_RedHero), "units\\nightelf\\Wisp\\Wisp.mdl")
			call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 1.75)
			call BlzSetSpecialEffectColorByPlayer(GetLastCreatedEffectBJ(), Player(7))
			set udg_ArcaneEmp_SFX[0] = GetLastCreatedEffectBJ()
			call AddSpecialEffectLocBJ(GetUnitLoc(udg_RedHero), "Abilities\\Weapons\\WitchDoctorMissile\\WitchDoctorMissile.mdl")
			call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 2.20)
			set udg_ArcaneEmp_SFX[1] = GetLastCreatedEffectBJ()
			call StartTimerBJ(udg_ArcaneEmp_Timer[0], false, 7.00)
			call StartTimerBJ(udg_ArcaneEmp_Timer[1], true, 0.01)
		endif
	endif
endfunction

function Trig_Arcane_Power_Func001C takes nothing returns boolean
	if  not (udg_ArcaneEmpower == false) then
		return false
	endif
	return true
endfunction

function Trig_Arcane_Power_Conditions takes nothing returns boolean
	if  not Trig_Arcane_Power_Func001C() then
		return false
	endif
	return true
endfunction

function Trig_Blizzard_Slow_Func001C takes nothing returns boolean
	if  not (IsUnitAliveBJ(udg_RedHero) == true) then
		return false
	endif
	return true
endfunction

function Trig_Blizzard_Slow_Actions takes nothing returns nothing
	if Trig_Blizzard_Slow_Func001C() then
		set udg_tempUGroup = GetUnitsInRangeOfLocMatching(225.00, udg_BlizzardPoint, Condition(ref_function_Trig_Blizzard_Slow_Func001Func001002003))
		call ForGroupBJ(udg_tempUGroup, ref_function_Trig_Blizzard_Slow_Func001Func004A)
		call DestroyGroup(udg_tempUGroup)
	else
		call PauseTimerBJ(true, udg_Blizzard_Timer[1])
		call ConditionalTriggerExecute(gg_trg_Blizzard_Stop)
	endif
endfunction

function Trig_Blizzard_Slow_Func001Func001002003001001 takes nothing returns boolean
	return IsUnitAliveBJ(GetFilterUnit()) == true
endfunction

function Trig_Blizzard_Slow_Func001Func001002003001002 takes nothing returns boolean
	return IsUnitType(GetTriggerUnit(), UNIT_TYPE_ANCIENT) == false
endfunction

function Trig_Blizzard_Slow_Func001Func001002003001 takes nothing returns boolean
	return GetBooleanAnd(Trig_Blizzard_Slow_Func001Func001002003001001(), Trig_Blizzard_Slow_Func001Func001002003001002())
endfunction

function Trig_Blizzard_Slow_Func001Func001002003002 takes nothing returns boolean
	return IsUnitEnemy(GetFilterUnit(), Player(0)) == true
endfunction

function Trig_Blizzard_Slow_Func001Func001002003 takes nothing returns boolean
	return GetBooleanAnd(Trig_Blizzard_Slow_Func001Func001002003001(), Trig_Blizzard_Slow_Func001Func001002003002())
endfunction

function Trig_Blizzard_Slow_Func001Func004A takes nothing returns nothing
	call CreateNUnitsAtLoc(1, 1747988532, Player(0), udg_BlizzardPoint, bj_UNIT_FACING)
	call UnitApplyTimedLifeBJ(4.00, 1112820806, GetLastCreatedUnit())
	call UnitAddAbilityBJ(1093677138, GetLastCreatedUnit())
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "frostnova", GetEnumUnit())
endfunction

function Trig_Blizzard_Start_Actions takes nothing returns nothing
	call TriggerExecute(gg_trg_Blizzard_Stop)
	set udg_BlizzardPoint = GetSpellTargetLoc()
	call CreateNUnitsAtLoc(1, 1747988532, Player(0), udg_BlizzardPoint, bj_UNIT_FACING)
	set udg_Blizzard_Dummy = GetLastCreatedUnit()
	call UnitAddAbilityBJ(1093677137, GetLastCreatedUnit())
	call IssuePointOrderLocBJ(GetLastCreatedUnit(), "blizzard", udg_BlizzardPoint)
	call UnitApplyTimedLifeBJ(10.00, 1112820806, GetLastCreatedUnit())
	call TriggerSleepAction(0.70)
	call TriggerExecute(gg_trg_Blizzard_Slow)
	call StartTimerBJ(udg_Blizzard_Timer[0], true, 1.00)
	call StartTimerBJ(udg_Blizzard_Timer[1], false, 8.50)
endfunction

function Trig_Blizzard_Start_Conditions takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677125) then
		return false
	endif
	return true
endfunction

function Trig_Blizzard_Stop_Actions takes nothing returns nothing
	call PauseTimerBJ(true, udg_Blizzard_Timer[0])
	call PauseTimerBJ(true, udg_Blizzard_Timer[1])
	call RemoveUnit(udg_Blizzard_Dummy)
	call RemoveLocation(udg_BlizzardPoint)
endfunction

function Trig_Burn_Actions takes nothing returns nothing
	set udg_tempPoint = GetUnitLoc(GetSpellTargetUnit())
	call CreateNUnitsAtLoc(1, 1747988532, Player(0), udg_tempPoint, bj_UNIT_FACING)
	call UnitApplyTimedLifeBJ(4.00, 1112820806, GetLastCreatedUnit())
	call UnitAddAbilityBJ(1093677392, GetLastCreatedUnit())
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "acidbomb", GetSpellTargetUnit())
	call AddSpecialEffectTargetUnitBJ("chest", GetSpellTargetUnit(), "Abilities\\Weapons\\RedDragonBreath\\RedDragonMissile.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_tempPoint)
endfunction

function Trig_Burn_Conditions takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677393) then
		return false
	endif
	return true
endfunction

function Trig_Buy_SPells_Func001C takes nothing returns boolean
	if  not (GetItemTypeId(GetSoldItem()) == 1227894835) then
		return false
	endif
	return true
endfunction

function Trig_Buy_SPells_Func002C takes nothing returns boolean
	if  not (GetItemTypeId(GetSoldItem()) == 1227894836) then
		return false
	endif
	return true
endfunction

function Trig_Buy_SPells_Func003C takes nothing returns boolean
	if  not (GetItemTypeId(GetSoldItem()) == 1227894852) then
		return false
	endif
	return true
endfunction

function Trig_Buy_SPells_Func004C takes nothing returns boolean
	if  not (GetItemTypeId(GetSoldItem()) == 1227894854) then
		return false
	endif
	return true
endfunction

function Trig_Buy_SPells_Func005C takes nothing returns boolean
	if  not (GetItemTypeId(GetSoldItem()) == 1227894855) then
		return false
	endif
	return true
endfunction

function Trig_Buy_SPells_Func006C takes nothing returns boolean
	if  not (GetItemTypeId(GetSoldItem()) == 1227894859) then
		return false
	endif
	return true
endfunction

function Trig_Buy_SPells_Func007C takes nothing returns boolean
	if  not (GetItemTypeId(GetSoldItem()) == 1227894860) then
		return false
	endif
	return true
endfunction

function Trig_Buy_SPells_Func008C takes nothing returns boolean
	if  not (GetItemTypeId(GetSoldItem()) == 1227894861) then
		return false
	endif
	return true
endfunction

function Trig_Buy_SPells_Func009C takes nothing returns boolean
	if  not (GetItemTypeId(GetSoldItem()) == 1227894864) then
		return false
	endif
	return true
endfunction

function Trig_Buy_SPells_Func010C takes nothing returns boolean
	if  not (GetItemTypeId(GetSoldItem()) == 1227894832) then
		return false
	endif
	return true
endfunction

function Trig_Buy_SPells_Actions takes nothing returns nothing
	if Trig_Buy_SPells_Func001C() then
		call ConditionalTriggerExecute(gg_trg_Remove_Q_Spells)
		call UnitAddAbilityBJ(1093677125, udg_RedHero)
	endif
	if Trig_Buy_SPells_Func002C() then
		call ConditionalTriggerExecute(gg_trg_Remove_Q_Spells)
		call UnitAddAbilityBJ(1093677104, udg_RedHero)
	endif
	if Trig_Buy_SPells_Func003C() then
		call ConditionalTriggerExecute(gg_trg_Remove_Q_Spells)
		call UnitAddAbilityBJ(1093677391, udg_RedHero)
	endif
	if Trig_Buy_SPells_Func004C() then
		call ConditionalTriggerExecute(gg_trg_Remove_E_Spells)
		call UnitAddAbilityBJ(1093677393, udg_RedHero)
	endif
	if Trig_Buy_SPells_Func005C() then
		call ConditionalTriggerExecute(gg_trg_Remove_E_Spells)
		call UnitAddAbilityBJ(1093677394, udg_RedHero)
	endif
	if Trig_Buy_SPells_Func006C() then
		call ConditionalTriggerExecute(gg_trg_Remove_E_Spells)
		call UnitAddAbilityBJ(1093677395, udg_RedHero)
	endif
	if Trig_Buy_SPells_Func007C() then
		call ConditionalTriggerExecute(gg_trg_Remove_W_Spells)
		call UnitAddAbilityBJ(1093677396, udg_RedHero)
	endif
	if Trig_Buy_SPells_Func008C() then
		call ConditionalTriggerExecute(gg_trg_Remove_W_Spells)
		call UnitAddAbilityBJ(1093677126, udg_RedHero)
	endif
	if Trig_Buy_SPells_Func009C() then
		call ConditionalTriggerExecute(gg_trg_Remove_R_Spells)
		call UnitAddAbilityBJ(1093677401, udg_RedHero)
	endif
	if Trig_Buy_SPells_Func010C() then
		call ConditionalTriggerExecute(gg_trg_Remove_R_Spells)
		call UnitAddAbilityBJ(1093677131, udg_RedHero)
	endif
endfunction

function Trig_Buy_SPells_Conditions takes nothing returns boolean
	if  not (GetUnitTypeId(GetSellingUnit()) == 1848651841) then
		return false
	endif
	return true
endfunction

function Trig_Custom_Init_Actions takes nothing returns nothing
	call SetCameraFieldForPlayer(Player(0), CAMERA_FIELD_TARGET_DISTANCE, 2000.00, 0.)
	call ModifyGateBJ(bj_GATEOPERATION_OPEN, gg_dest_DTc2_2577)
endfunction

function Trig_Earthquake_Actions takes nothing returns nothing
	set udg_tempPoint = GetRandomLocInRect(gg_rct_Earthquake_TestRegion)
	call CreateNUnitsAtLoc(1, 1747988532, Player(11), udg_tempPoint, bj_UNIT_FACING)
	call UnitAddAbilityBJ(1093677382, GetLastCreatedUnit())
	call IssuePointOrderLocBJ(GetLastCreatedUnit(), "earthquake", udg_tempPoint)
	call UnitApplyTimedLifeBJ(20.00, 1112820806, GetLastCreatedUnit())
	call RemoveLocation(udg_tempPoint)
endfunction

function Trig_Ghoul_Spawn_Func008C takes nothing returns boolean
	if  not (udg_MorbenFell_Booleans[1] == false) then
		return false
	endif
	return true
endfunction

function Trig_Ghoul_Spawn_Actions takes nothing returns nothing
	call CreateNUnitsAtLoc(1, 1966092337, Player(11), udg_tempPoint, bj_UNIT_FACING)
	call AddSpecialEffectLocBJ(udg_tempPoint, "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl")
	if Trig_Ghoul_Spawn_Func008C() then
		call IssuePointOrderLocBJ(GetLastCreatedUnit(), "move", GetRectCenter(gg_rct_MF_Exit1))
	else
		call IssuePointOrderLocBJ(GetLastCreatedUnit(), "attack", GetUnitLoc(udg_RedHero))
	endif
endfunction

function Trig_Healing_Potion_Effect_Actions takes nothing returns nothing
	call SetUnitLifeBJ(GetManipulatingUnit(), GetUnitStateSwap(UNIT_STATE_LIFE, GetManipulatingUnit()) + GetUnitStateSwap(UNIT_STATE_MAX_LIFE, GetManipulatingUnit()) * 0.25)
endfunction

function Trig_Healing_Potion_Effect_Conditions takes nothing returns boolean
	if  not (GetItemTypeId(GetManipulatedItem()) == 1227894833) then
		return false
	endif
	return true
endfunction

function Trig_Healing_Stone_Actions takes nothing returns nothing
	call SetUnitLifeBJ(GetSpellAbilityUnit(), GetUnitStateSwap(UNIT_STATE_LIFE, GetSpellAbilityUnit()) + GetUnitStateSwap(UNIT_STATE_MAX_LIFE, GetSpellAbilityUnit()) * 0.25)
endfunction

function Trig_Healing_Stone_Conditions takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677384) then
		return false
	endif
	return true
endfunction

function Trig_Ice_Lance_Damage_Actions takes nothing returns nothing
	set udg_tempPoint = Location(udg_IceLance_MissilePos[0], udg_IceLance_MissilePos[1])
	set udg_tempUGroup = GetUnitsInRangeOfLocMatching(80.00, udg_tempPoint, Condition(ref_function_Trig_Ice_Lance_Damage_Func002002003))
	call ForGroupBJ(udg_tempUGroup, ref_function_Trig_Ice_Lance_Damage_Func003A)
	call GroupAddGroup(udg_tempUGroup, udg_IceLance_Hits)
	call RemoveLocation(udg_tempPoint)
	call DestroyGroup(udg_tempUGroup)
endfunction

function Trig_Ice_Lance_Damage_Func002002003001001 takes nothing returns boolean
	return IsUnitAliveBJ(GetFilterUnit()) == true
endfunction

function Trig_Ice_Lance_Damage_Func002002003001002 takes nothing returns boolean
	return IsUnitInGroup(GetFilterUnit(), udg_IceLance_Hits) != true
endfunction

function Trig_Ice_Lance_Damage_Func002002003001 takes nothing returns boolean
	return GetBooleanAnd(Trig_Ice_Lance_Damage_Func002002003001001(), Trig_Ice_Lance_Damage_Func002002003001002())
endfunction

function Trig_Ice_Lance_Damage_Func002002003002 takes nothing returns boolean
	return IsUnitEnemy(GetFilterUnit(), Player(0)) == true
endfunction

function Trig_Ice_Lance_Damage_Func002002003 takes nothing returns boolean
	return GetBooleanAnd(Trig_Ice_Lance_Damage_Func002002003001(), Trig_Ice_Lance_Damage_Func002002003002())
endfunction

function Trig_Ice_Lance_Damage_Func003A takes nothing returns nothing
	call CreateNUnitsAtLoc(1, 1747988532, Player(0), udg_tempPoint, bj_UNIT_FACING)
	call UnitApplyTimedLifeBJ(4.00, 1112820806, GetLastCreatedUnit())
	call UnitAddAbilityBJ(1093677138, GetLastCreatedUnit())
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "frostnova", GetEnumUnit())
	call UnitDamageTargetBJ(udg_RedHero, GetEnumUnit(), 80.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
	call AddSpecialEffectTargetUnitBJ("chest", GetEnumUnit(), "Abilities\\Weapons\\LichMissile\\LichMissile.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
endfunction

function Trig_Ice_Lance_Move_Func011C takes nothing returns boolean
	if  not (udg_IceLance_EnemyCheckCounter >= 10) then
		return false
	endif
	return true
endfunction

function Trig_Ice_Lance_Move_Func012C takes nothing returns boolean
	if  not (udg_IceLance_DistTrav >= 550.00) then
		return false
	endif
	return true
endfunction

function Trig_Ice_Lance_Move_Actions takes nothing returns nothing
	set udg_tempPoint = Location(udg_IceLance_MissilePos[0], udg_IceLance_MissilePos[1])
	set udg_IceLance_MissilePos[0] = udg_IceLance_MissilePos[0] + udg_IceLance_Velocity[0] * 12.00
	set udg_IceLance_MissilePos[1] = udg_IceLance_MissilePos[1] + udg_IceLance_Velocity[1] * 12.00
	set udg_tempPoint2 = Location(udg_IceLance_MissilePos[0], udg_IceLance_MissilePos[1])
	set udg_IceLance_DistTrav = udg_IceLance_DistTrav + DistanceBetweenPoints(udg_tempPoint, udg_tempPoint2)
	set udg_IceLance_MissilePos[2] = GetLocationZ(udg_tempPoint2) + 50.
	call BlzSetSpecialEffectPosition(udg_IceLance_MissileSFX[0], udg_IceLance_MissilePos[0], udg_IceLance_MissilePos[1], udg_IceLance_MissilePos[2])
	call BlzSetSpecialEffectPosition(udg_IceLance_MissileSFX[1], udg_IceLance_MissilePos[0], udg_IceLance_MissilePos[1], udg_IceLance_MissilePos[2])
	call BlzSetSpecialEffectPosition(udg_IceLance_MissileSFX[2], udg_IceLance_MissilePos[0], udg_IceLance_MissilePos[1], udg_IceLance_MissilePos[2])
	set udg_IceLance_EnemyCheckCounter = udg_IceLance_EnemyCheckCounter + 1
	if Trig_Ice_Lance_Move_Func011C() then
		set udg_IceLance_EnemyCheckCounter = 0
		call TriggerExecute(gg_trg_Ice_Lance_Damage)
	endif
	if Trig_Ice_Lance_Move_Func012C() then
		call PlaySoundAtPointBJ(gg_snd_IceLanceHit, 75.00, udg_tempPoint2, 0.)
		call ConditionalTriggerExecute(gg_trg_Ice_Lance_Damage)
		call DestroyEffectBJ(udg_IceLance_MissileSFX[0])
		call DestroyEffectBJ(udg_IceLance_MissileSFX[1])
		call DestroyEffectBJ(udg_IceLance_MissileSFX[2])
		call PauseTimerBJ(true, udg_IceLance_Timer[0])
	endif
endfunction

function Trig_Ice_Lance_Start_Actions takes nothing returns nothing
	set udg_IceLance_EnemyCheckCounter = 0
	call DestroyEffectBJ(udg_IceLance_MissileSFX[0])
	call DestroyEffectBJ(udg_IceLance_MissileSFX[1])
	call GroupClear(udg_IceLance_Hits)
	set udg_IceLance_DistTrav = 0.00
	set udg_tempPoint = GetUnitLoc(GetSpellAbilityUnit())
	set udg_tempPoint2 = GetSpellTargetLoc()
	set udg_IceLance_MissilePos[0] = GetLocationX(udg_tempPoint)
	set udg_IceLance_MissilePos[1] = GetLocationY(udg_tempPoint)
	set udg_IceLance_MissilePos[2] = BlzGetLocalUnitZ(udg_RedHero) + 400.00
	set udg_tempReal = AngleBetweenPoints(udg_tempPoint, udg_tempPoint2)
	set udg_IceLance_Direction = AngleBetweenPoints(udg_tempPoint, udg_tempPoint2)
	set udg_IceLance_Velocity[0] = CosBJ(udg_IceLance_Direction)
	set udg_IceLance_Velocity[1] = SinBJ(udg_IceLance_Direction)
	call AddSpecialEffectLocBJ(udg_tempPoint, "Abilities\\Weapons\\LichMissile\\LichMissile.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 1.50)
	call BlzSetSpecialEffectRoll(GetLastCreatedEffectBJ(), Deg2Rad(udg_IceLance_Direction))
	set udg_IceLance_MissileSFX[0] = GetLastCreatedEffectBJ()
	call AddSpecialEffectLocBJ(udg_tempPoint, "Abilities\\Weapons\\ZigguratFrostMissile\\ZigguratFrostMissile.mdl")
	call BlzSetSpecialEffectRoll(GetLastCreatedEffectBJ(), Deg2Rad(udg_IceLance_Direction))
	set udg_IceLance_MissileSFX[1] = GetLastCreatedEffectBJ()
	call AddSpecialEffectLocBJ(udg_tempPoint, "Abilities\\Spells\\Undead\\AbsorbMana\\AbsorbManaBirthMissile.mdl")
	call BlzSetSpecialEffectRoll(GetLastCreatedEffectBJ(), Deg2Rad(udg_IceLance_Direction))
	set udg_IceLance_MissileSFX[2] = GetLastCreatedEffectBJ()
	call PlaySoundOnUnitBJ(gg_snd_IceLanceFire, 75.00, GetSpellAbilityUnit())
	call StartTimerBJ(udg_IceLance_Timer[0], true, 0.01)
	set udg_IceLance_DistTrav = 0.00
	call RemoveLocation(udg_tempPoint2)
	call RemoveLocation(udg_tempPoint)
endfunction

function Trig_Ice_Lance_Start_Conditions takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677396) then
		return false
	endif
	return true
endfunction

function Trig_Lightning_Enhancement_Effect_Actions takes nothing returns nothing
	set udg_tempUGroup = GetUnitsInRectMatching(GetPlayableMapRect(), Condition(ref_function_Trig_Lightning_Enhancement_Effect_Func001002002))
	call ForGroupBJ(udg_tempUGroup, ref_function_Trig_Lightning_Enhancement_Effect_Func002A)
	call DestroyGroup(udg_tempUGroup)
	set udg_tempPoint = GetUnitLoc(udg_tempUnit)
	set udg_tempUGroup = GetUnitsInRangeOfLocMatching(3000.00, udg_tempPoint, Condition(ref_function_Trig_Lightning_Enhancement_Effect_Func005002003))
	call ForGroupBJ(udg_tempUGroup, ref_function_Trig_Lightning_Enhancement_Effect_Func006A)
	call RemoveLocation(udg_tempPoint)
	call DestroyGroup(udg_tempUGroup)
endfunction

function Trig_Lightning_Enhancement_Effect_Func001002002 takes nothing returns boolean
	return GetUnitTypeId(GetFilterUnit()) == 1865429043
endfunction

function Trig_Lightning_Enhancement_Effect_Func002A takes nothing returns nothing
	set udg_tempUnit = GetEnumUnit()
endfunction

function Trig_Lightning_Enhancement_Effect_Func005002003001 takes nothing returns boolean
	return IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(udg_tempUnit)) == true
endfunction

function Trig_Lightning_Enhancement_Effect_Func005002003002 takes nothing returns boolean
	return IsUnitAliveBJ(GetFilterUnit()) == true
endfunction

function Trig_Lightning_Enhancement_Effect_Func005002003 takes nothing returns boolean
	return GetBooleanAnd(Trig_Lightning_Enhancement_Effect_Func005002003001(), Trig_Lightning_Enhancement_Effect_Func005002003002())
endfunction

function Trig_Lightning_Enhancement_Effect_Func006A takes nothing returns nothing
	set udg_tempPoint2 = GetUnitLoc(GetEnumUnit())
	call CreateNUnitsAtLoc(1, 1747988532, GetOwningPlayer(udg_tempUnit), udg_tempPoint, bj_UNIT_FACING)
	call UnitAddAbilityBJ(1093677379, GetLastCreatedUnit())
	call IssueTargetOrderBJ(GetLastCreatedUnit(), "chainlightning", GetEnumUnit())
	call UnitApplyTimedLifeBJ(1.00, 1112820806, GetLastCreatedUnit())
	call UnitDamageTargetBJ(udg_tempUnit, GetEnumUnit(), 25.00 + DistanceBetweenPoints(udg_tempPoint2, udg_tempPoint) / 4.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_LIGHTNING)
	call RemoveLocation(udg_tempPoint2)
endfunction

function Trig_Magic_Ward_Delayed_SFX_Destruction_Actions takes nothing returns nothing
	call PauseTimerBJ(true, udg_MagicWard_Timer[1])
	call PauseTimerBJ(true, udg_MagicWard_Timer[3])
endfunction

function Trig_Magic_Ward_End_Actions takes nothing returns nothing
	set udg_MagicWard_Running = false
	call PauseTimerBJ(true, udg_MagicWard_Timer[0])
	call PauseTimerBJ(true, udg_MagicWard_Timer[2])
	call BlzSetSpecialEffectTimeScale(udg_MagicWard_SFX[0], 1.00)
	call DestroyEffectBJ(udg_MagicWard_SFX[0])
	call DestroyEffectBJ(udg_MagicWard_SFX[1])
	call StartTimerBJ(udg_MagicWard_Timer[3], false, 2.00)
endfunction

function Trig_Magic_Ward_Pause_Effect_Actions takes nothing returns nothing
	call BlzSetSpecialEffectTimeScale(udg_MagicWard_SFX[0], 0.00)
endfunction

function Trig_Magic_Ward_Pause_Effect_Func001C takes nothing returns boolean
	if  not (udg_MagicWard_Running == true) then
		return false
	endif
	if  not (IsUnitAliveBJ(udg_RedHero) == true) then
		return false
	endif
	return true
endfunction

function Trig_Magic_Ward_Pause_Effect_Conditions takes nothing returns boolean
	if  not Trig_Magic_Ward_Pause_Effect_Func001C() then
		return false
	endif
	return true
endfunction

function Trig_Magic_Ward_Start_Func001C takes nothing returns boolean
	if  not (udg_MagicWard_Running == true) then
		return false
	endif
	return true
endfunction

function Trig_Magic_Ward_Start_Actions takes nothing returns nothing
	if Trig_Magic_Ward_Start_Func001C() then
		call TriggerExecute(gg_trg_Magic_Ward_Delayed_SFX_Destruction)
	endif
	set udg_MagicWard_Running = true
	set udg_tempPoint = GetUnitLoc(udg_RedHero)
	call AddSpecialEffectLocBJ(udg_tempPoint, "Abilities\\Spells\\Human\\ControlMagic\\ControlMagicTarget.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 1.85)
	set udg_MagicWard_SFX[0] = GetLastCreatedEffectBJ()
	call AddSpecialEffectLocBJ(udg_tempPoint, "Abilities\\Spells\\Other\\GeneralAuraTarget\\GeneralAuraTarget.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 2.25)
	set udg_MagicWard_SFX[1] = GetLastCreatedEffectBJ()
	call StartTimerBJ(udg_MagicWard_Timer[1], true, 0.01)
	call StartTimerBJ(udg_MagicWard_Timer[0], false, 8.00)
	call StartTimerBJ(udg_MagicWard_Timer[2], false, 1.00)
	call RemoveLocation(udg_tempPoint)
endfunction

function Trig_Magic_Ward_Start_Conditions takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677401) then
		return false
	endif
	return true
endfunction

function Trig_Magic_Ward_Update_Func001C takes nothing returns boolean
	if  not (IsUnitAliveBJ(udg_RedHero) == false) then
		return false
	endif
	return true
endfunction

function Trig_Magic_Ward_Update_Actions takes nothing returns nothing
	if Trig_Magic_Ward_Update_Func001C() then
		call TriggerExecute(gg_trg_Magic_Ward_Delayed_SFX_Destruction)
	endif
	set udg_tempPoint = GetUnitLoc(udg_RedHero)
	set udg_tempReal = GetLocationZ(udg_tempPoint)
	call BlzSetSpecialEffectPosition(udg_MagicWard_SFX[0], GetLocationX(udg_tempPoint) - 18.00, GetLocationY(udg_tempPoint) - 18.00, udg_tempReal + 200.00)
	call BlzSetSpecialEffectPosition(udg_MagicWard_SFX[1], GetLocationX(udg_tempPoint) - 18.00, GetLocationY(udg_tempPoint) - 18.00, udg_tempReal - 20.00)
	call RemoveLocation(udg_tempPoint)
endfunction

function Trig_Mana_Regeneration_Func003Func001C takes nothing returns boolean
	if  not (GetItemTypeId(UnitItemInSlotBJ(udg_RedHero, udg_TempInt)) == 1227894840) then
		return false
	endif
	return true
endfunction

function Trig_Mana_Regeneration_Func003Func002C takes nothing returns boolean
	if  not (GetItemTypeId(UnitItemInSlotBJ(udg_RedHero, udg_TempInt)) == 1227894850) then
		return false
	endif
	return true
endfunction

function Trig_Mana_Regeneration_Actions takes nothing returns nothing
	set udg_TempInt = 1
	set udg_TempReal = 0.00
	set bj_forLoopAIndex = 1
	set bj_forLoopAIndexEnd = UnitInventoryCount(udg_RedHero)
	loop
		exitwhen bj_forLoopAIndex > bj_forLoopAIndexEnd
		if Trig_Mana_Regeneration_Func003Func001C() then
			set udg_TempReal = udg_TempReal + 4.00
		endif
		if Trig_Mana_Regeneration_Func003Func002C() then
			set udg_TempReal = udg_TempReal + 3.00
		endif
		set udg_TempInt = udg_TempInt + 1
		set bj_forLoopAIndex = bj_forLoopAIndex + 1
	endloop
	call SetUnitManaBJ(udg_RedHero, GetUnitStateSwap(UNIT_STATE_MANA, udg_RedHero) + udg_TempReal / 5.00)
endfunction

function Trig_Plague_Zombie_Spawn_Func007C takes nothing returns boolean
	if  not (udg_MorbenFell_Booleans[1] == false) then
		return false
	endif
	return true
endfunction

function Trig_Plague_Zombie_Spawn_Actions takes nothing returns nothing
	call CreateNUnitsAtLoc(1, 1848651825, Player(11), udg_tempPoint, bj_UNIT_FACING)
	call AddSpecialEffectLocBJ(udg_tempPoint, "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl")
	if Trig_Plague_Zombie_Spawn_Func007C() then
		call IssuePointOrderLocBJ(GetLastCreatedUnit(), "move", GetRectCenter(gg_rct_MF_Exit1))
	else
		call IssuePointOrderLocBJ(GetLastCreatedUnit(), "attack", GetUnitLoc(udg_RedHero))
	endif
endfunction

function Trig_Remove_E_Spells_Actions takes nothing returns nothing
	call UnitRemoveAbilityBJ(1093677393, udg_RedHero)
	call UnitRemoveAbilityBJ(1093677394, udg_RedHero)
	call UnitRemoveAbilityBJ(1093677395, udg_RedHero)
endfunction

function Trig_Remove_Q_Spells_Actions takes nothing returns nothing
	call UnitRemoveAbilityBJ(1093677391, udg_RedHero)
	call UnitRemoveAbilityBJ(1093677104, udg_RedHero)
	call UnitRemoveAbilityBJ(1093677125, udg_RedHero)
endfunction

function Trig_Remove_R_Spells_Actions takes nothing returns nothing
	call UnitRemoveAbilityBJ(1093677401, udg_RedHero)
	call UnitRemoveAbilityBJ(1093677131, udg_RedHero)
endfunction

function Trig_Remove_W_Spells_Actions takes nothing returns nothing
	call UnitRemoveAbilityBJ(1093677396, udg_RedHero)
	call UnitRemoveAbilityBJ(1093677126, udg_RedHero)
endfunction

function Trig_Repeat_Music_Actions takes nothing returns nothing
endfunction

function Trig_Shock_Actions takes nothing returns nothing
	set udg_tempPoint = GetUnitLoc(GetSpellTargetUnit())
	call UnitDamageTargetBJ(GetSpellAbilityUnit(), GetSpellTargetUnit(), 225.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
	call AddSpecialEffectTargetUnitBJ("origin", GetSpellTargetUnit(), "Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl")
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call AddSpecialEffectTargetUnitBJ("chest", GetSpellTargetUnit(), "Abilities\\Spells\\Orc\\Purge\\PurgeBuffTarget.mdl")
	set udg_Shock_SFX = GetLastCreatedEffectBJ()
	call AddSpecialEffectTargetUnitBJ("chest", GetSpellTargetUnit(), "Abilities\\Weapons\\FarseerMissile\\FarseerMissile.mdl")
	call BlzSetSpecialEffectScale(GetLastCreatedEffectBJ(), 2.00)
	call DestroyEffectBJ(GetLastCreatedEffectBJ())
	call RemoveLocation(udg_tempPoint)
	call StartTimerBJ(udg_Shock_Timer, false, 3.00)
endfunction

function Trig_Shock_Conditions takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677394) then
		return false
	endif
	return true
endfunction

function Trig_Shock_Destory_Effect_Actions takes nothing returns nothing
	call DestroyEffectBJ(udg_Shock_SFX)
	call PauseTimerBJ(true, udg_Shock_Timer)
endfunction

function Trig_Skeletal_Mages_Func007C takes nothing returns boolean
	if  not (udg_MorbenFell_Booleans[1] == false) then
		return false
	endif
	return true
endfunction

function Trig_Skeletal_Mages_Actions takes nothing returns nothing
	call CreateNUnitsAtLoc(1, 1966092338, Player(11), udg_tempPoint, bj_UNIT_FACING)
	call AddSpecialEffectLocBJ(udg_tempPoint, "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl")
	if Trig_Skeletal_Mages_Func007C() then
		call IssuePointOrderLocBJ(GetLastCreatedUnit(), "move", GetRectCenter(gg_rct_MF_Exit1))
	else
		call IssuePointOrderLocBJ(GetLastCreatedUnit(), "attack", GetUnitLoc(udg_RedHero))
	endif
endfunction

function Trig_Skeleton_Spawns_Func001C takes nothing returns boolean
	return true
endfunction

function Trig_Skeleton_Spawns_Func002C takes nothing returns boolean
	return true
endfunction

function Trig_Skeleton_Spawns_Actions takes nothing returns nothing
	if Trig_Skeleton_Spawns_Func001C() then
		call CreateNUnitsAtLoc(1, 1848651827, Player(11), udg_tempPoint, bj_UNIT_FACING)
		call AddSpecialEffectLocBJ(udg_tempPoint, "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl")
		call IssuePointOrderLocBJ(GetLastCreatedUnit(), "attack", GetRectCenter(gg_rct_MorbentAttackZone))
	endif
	if Trig_Skeleton_Spawns_Func002C() then
		call CreateNUnitsAtLoc(1, 1966092343, Player(11), udg_tempPoint, bj_UNIT_FACING)
		call AddSpecialEffectLocBJ(udg_tempPoint, "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl")
		call IssuePointOrderLocBJ(GetLastCreatedUnit(), "attack", GetRectCenter(gg_rct_MorbentAttackZone))
	endif
endfunction

function Trig_Unstable_Magic_Start_Actions takes nothing returns nothing
	call SetUnitAbilityLevelSwapped(1093677364, udg_RedHero, 2)
	call StartTimerBJ(udg_UnstableMagic_Timer[0], false, 4.00)
endfunction

function Trig_Unstable_Magic_Start_Conditions takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677391) then
		return false
	endif
	return true
endfunction

function Trig_Unstable_Magic_Stop_Actions takes nothing returns nothing
	call SetUnitAbilityLevelSwapped(1093677364, udg_RedHero, 1)
endfunction

function Trig_Untitled_Trigger_001_Actions takes nothing returns nothing
endfunction

function Trig_Untitled_Trigger_002_Actions takes nothing returns nothing
	call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_538")
endfunction

function Trig_Untitled_Trigger_002_Conditions takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677401) then
		return false
	endif
	return true
endfunction

function Trig_Untitled_Trigger_003_Actions takes nothing returns nothing
endfunction

function Trig_Untitled_Trigger_005_Actions takes nothing returns nothing
endfunction

function Trig_Untitled_Trigger_006_Actions takes nothing returns nothing
endfunction

function Trig_Untitled_Trigger_007_Actions takes nothing returns nothing
	call SetTimeOfDayScalePercentBJ(0.00)
endfunction

function Trig_Untitled_Trigger_008_Actions takes nothing returns nothing
endfunction

function Trig_Untitled_Trigger_009_Actions takes nothing returns nothing
endfunction

function Trig_Volcano_Strike_Actions takes nothing returns nothing
	call AddSpecialEffectLocBJ(GetSpellTargetLoc(), "Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl")
	call AddSpecialEffectLocBJ(GetSpellTargetLoc(), "Objects\\Spawnmodels\\Other\\NeutralBuildingExplosion\\NeutralBuildingExplosion.mdl")
	call ForGroupBJ(GetUnitsInRangeOfLocMatching(225.00, GetSpellTargetLoc(), Condition(ref_function_Trig_Volcano_Strike_Func003001003)), ref_function_Trig_Volcano_Strike_Func003A)
endfunction

function Trig_Volcano_Strike_Conditions takes nothing returns boolean
	if  not (GetSpellAbilityId() == 1093677132) then
		return false
	endif
	return true
endfunction

function Trig_Volcano_Strike_Func003001003 takes nothing returns boolean
	return IsUnitEnemy(GetFilterUnit(), GetOwningPlayer(GetSpellAbilityUnit())) == true
endfunction

function Trig_Volcano_Strike_Func003A takes nothing returns nothing
	call UnitDamageTargetBJ(GetSpellAbilityUnit(), GetEnumUnit(), 100.00, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC)
	call AddSpecialEffectTargetUnitBJ("chest", GetEnumUnit(), "Objects\\Spawnmodels\\Human\\FragmentationShards\\FragBoomSpawn.mdl")
endfunction

function ZoneTransit_endTransit takes nothing returns nothing
	call unit_unpause(General_hunter)
endfunction

function ambient takes nothing returns nothing
	call playMusic(Sounds_undeadGlueScreenLoop1)
endfunction

function Add_createSpawnEffect takes integer this, string sfx returns nothing
	local string temp = sfx
	local integer tempIndex = this
	local effect receiver = addEffect(temp, Add_spawnPoint[tempIndex], Add_spawnPoint_2[tempIndex])
	call effect_destr(receiver)
	set receiver = null
endfunction

function Loglevel_getTag takes integer this returns string
	local integer temp = this
	if temp == 0 then
		return "|cffADADADtrace|r"
	elseif temp == 1 then
		return "|cff2685DCdebug|r"
	elseif temp == 2 then
		return "|cffFFCC00info|r"
	elseif temp == 3 then
		return "|cffF47E3Ewarning|r"
	elseif temp == 4 then
		return "|cffFB2700error|r"
	endif
	return "?"
endfunction

function printLog takes player showTo, integer loglvl, string msg returns nothing
	local string compositeMsg
	if Printing_DEBUG_LEVEL <= loglvl then
		set compositeMsg = Loglevel_getTag(loglvl) + " - " + msg
		call DisplayTimedTextToPlayer(showTo, 0., 0., Printing_DEBUG_MSG_DURATION, compositeMsg)
	endif
endfunction

function Log_error takes string msg returns nothing
	call printLog(Player_localPlayer, 4, msg)
endfunction

function compileError takes string message returns nothing
endfunction

function hashtable_hasBoolean takes hashtable this, integer parentKey, integer childKey returns boolean
	return HaveSavedBoolean(this, parentKey, childKey)
endfunction

function hashtable_hasInt takes hashtable this, integer parentKey, integer childKey returns boolean
	return HaveSavedInteger(this, parentKey, childKey)
endfunction

function hashtable_loadBoolean takes hashtable this, integer parentKey, integer childKey returns boolean
	return LoadBoolean(this, parentKey, childKey)
endfunction

function hashtable_loadInt takes hashtable this, integer parentKey, integer childKey returns integer
	return LoadInteger(this, parentKey, childKey)
endfunction

function hashtable_saveBoolean takes hashtable this, integer parentKey, integer childKey, boolean value returns nothing
	call SaveBoolean(this, parentKey, childKey, value)
endfunction

function hashtable_saveInt takes hashtable this, integer parentKey, integer childKey, integer value returns nothing
	call SaveInteger(this, parentKey, childKey, value)
endfunction

function real_toInt takes real this returns integer
	return R2I(this)
endfunction

function string_getHash takes string this returns integer
	return StringHash(this)
endfunction

function error takes string msg, string stackPos returns nothing
	local integer hash
	local string stacktraceStr
	local integer stacktraceIndex
	local integer stacktraceLimit
	local string stacktraceStr_2
	local integer stacktraceIndex_2
	local integer stacktraceLimit_2
	local string temp
	local string temp_2
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if MagicFunctions_compiletime then
		call compileError("ERROR: " + msg)
	else
		if  not ErrorHandling_suppressErrorMessages then
			set hash = string_getHash(msg)
			if hashtable_hasInt(ErrorHandling_HT, ErrorHandling_PRIMARY_ERROR_KEY, hash) then
				if hashtable_loadInt(ErrorHandling_HT, ErrorHandling_PRIMARY_ERROR_KEY, hash) + ErrorHandling_MUTE_ERROR_DURATION < GameTimer_currentTime then
					set temp = msg
					set stacktraceStr = ""
					set stacktraceIndex = wurst_stack_depth
					set stacktraceLimit = 0
					loop
						set stacktraceIndex = stacktraceIndex - 1
						set stacktraceLimit = stacktraceLimit + 1
						exitwhen stacktraceLimit > 20
						exitwhen stacktraceIndex < 0
						set stacktraceStr = stacktraceStr + "\n   " + wurst_stack[stacktraceIndex]
					endloop
					call Log_error(temp + stacktraceStr)
					call hashtable_saveInt(ErrorHandling_HT, ErrorHandling_PRIMARY_ERROR_KEY, hash, real_toInt(GameTimer_currentTime))
					call hashtable_saveBoolean(ErrorHandling_HT, ErrorHandling_PRIMARY_ERROR_KEY, hash, false)
				elseif hashtable_hasBoolean(ErrorHandling_HT, ErrorHandling_PRIMARY_ERROR_KEY, hash) then
					if  not hashtable_loadBoolean(ErrorHandling_HT, ErrorHandling_PRIMARY_ERROR_KEY, hash) then
						call Log_error("|cffFF3A29Excessive repeating errors are being omitted")
						call hashtable_saveBoolean(ErrorHandling_HT, ErrorHandling_PRIMARY_ERROR_KEY, hash, true)
					endif
				else
					call Log_error("|cffFF3A29Excessive repeating errors are being omitted")
					call hashtable_saveBoolean(ErrorHandling_HT, ErrorHandling_PRIMARY_ERROR_KEY, hash, true)
				endif
			else
				call hashtable_saveInt(ErrorHandling_HT, ErrorHandling_PRIMARY_ERROR_KEY, hash, real_toInt(GameTimer_currentTime))
				set temp_2 = "|cffFF3A29Error:|r " + msg
				set stacktraceStr_2 = ""
				set stacktraceIndex_2 = wurst_stack_depth
				set stacktraceLimit_2 = 0
				loop
					set stacktraceIndex_2 = stacktraceIndex_2 - 1
					set stacktraceLimit_2 = stacktraceLimit_2 + 1
					exitwhen stacktraceLimit_2 > 20
					exitwhen stacktraceIndex_2 < 0
					set stacktraceStr_2 = stacktraceStr_2 + "\n   " + wurst_stack[stacktraceIndex_2]
				endloop
				call Log_error(temp_2 + stacktraceStr_2)
			endif
		endif
		call I2S(1 / 0)
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_Add_BossAdd_Add_createSpawnEffect takes integer this, string sfx, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Add_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Add.BossAdd_Add_createSpawnEffect", "when calling error in ")
		else
			call error("Called Add.BossAdd_Add_createSpawnEffect on invalid object.", "when calling error in ")
		endif
	endif
	call Add_createSpawnEffect(this, sfx)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Add_setTarget takes integer this, unit target returns nothing
	set Add_target[this] = target
endfunction

function dispatch_Add_BossAdd_Add_setTarget takes integer this, unit target, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Add_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Add.BossAdd_Add_setTarget", "when calling error in ")
		else
			call error("Called Add.BossAdd_Add_setTarget on invalid object.", "when calling error in ")
		endif
	endif
	call Add_setTarget(this, target)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function alloc_LLEntry takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LLEntry_firstFree == 0 then
		if LLEntry_maxIndex < 32768 then
			set LLEntry_maxIndex = LLEntry_maxIndex + 1
			set this = LLEntry_maxIndex
			set LLEntry_typeId[this] = 685
		else
			call error("Out of memory: Could not create LLEntry.", "when calling error in ")
			set this = 0
		endif
	else
		set LLEntry_firstFree = LLEntry_firstFree - 1
		set this = LLEntry_nextFree[LLEntry_firstFree]
		set LLEntry_typeId[this] = 685
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_LLEntry takes integer this, integer elem, integer prev, integer next returns nothing
	set LLEntry_elem[this] = elem
	set LLEntry_prev[this] = prev
	set LLEntry_next[this] = next
endfunction

function new_LLEntry takes integer elem, integer prev, integer next, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_LLEntry("when calling LLEntry in LinkedList, line 376")
	call construct_LLEntry(this, elem, prev, next)
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function LinkedList_add_1 takes integer this, integer elems_0, string stackPos returns nothing
	local integer entry
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set entry = new_LLEntry(elems_0, LLEntry_prev[LinkedList_dummy[this]], LinkedList_dummy[this], "when calling new_LLEntry in LinkedList, line 35")
	set LLEntry_next[LLEntry_prev[LinkedList_dummy[this]]] = entry
	set LLEntry_prev[LinkedList_dummy[this]] = entry
	set LinkedList_size[this] = LinkedList_size[this] + 1
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_LinkedList_LinkedList_LinkedList_add_1 takes integer this, integer elems_0, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LinkedList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling LinkedList.LinkedList_LinkedList_add", "when calling error in ")
		else
			call error("Called LinkedList.LinkedList_LinkedList_add on invalid object.", "when calling error in ")
		endif
	endif
	call LinkedList_add_1(this, elems_0, "when calling add in LinkedList, line 33")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function debugMsg takes string stringToPrint returns nothing
	if DiseaseCloud_DEBUG then
		call print(stringToPrint)
	endif
endfunction

function alloc_Disease takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Disease_firstFree == 0 then
		if Disease_maxIndex < 32768 then
			set Disease_maxIndex = Disease_maxIndex + 1
			set this = Disease_maxIndex
			set Disease_typeId[this] = 658
		else
			call error("Out of memory: Could not create Disease.", "when calling error in ")
			set this = 0
		endif
	else
		set Disease_firstFree = Disease_firstFree - 1
		set this = Disease_nextFree[Disease_firstFree]
		set Disease_typeId[this] = 658
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function trigger_enable takes trigger this returns nothing
	call EnableTrigger(this)
endfunction

function Disease_activateTriggers takes nothing returns nothing
	call debugMsg("Disease: Activating triggers!")
	call trigger_enable(Disease_trg_UnitDies)
	call trigger_enable(Disease_trg_UnitIsRemoved)
endfunction

function alloc_IterableMap takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_firstFree == 0 then
		if Table_maxIndex < 32768 then
			set Table_maxIndex = Table_maxIndex + 1
			set this = Table_maxIndex
			set Table_typeId[this] = 724
		else
			call error("Out of memory: Could not create IterableMap.", "when calling error in ")
			set this = 0
		endif
	else
		set Table_firstFree = Table_firstFree - 1
		set this = Table_nextFree[Table_firstFree]
		set Table_typeId[this] = 724
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_Table takes integer this returns nothing
endfunction

function construct_HashMap takes integer this returns nothing
	call construct_Table(this)
endfunction

function alloc_HashList takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if HashList_firstFree == 0 then
		if HashList_maxIndex < 32768 then
			set HashList_maxIndex = HashList_maxIndex + 1
			set this = HashList_maxIndex
			set HashList_typeId[this] = 677
		else
			call error("Out of memory: Could not create HashList.", "when calling error in ")
			set this = 0
		endif
	else
		set HashList_firstFree = HashList_firstFree - 1
		set this = HashList_nextFree[HashList_firstFree]
		set HashList_typeId[this] = 677
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_HashList takes integer this returns nothing
	set HashList_size[this] = 0
endfunction

function new_HashList takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_HashList("when calling HashList in HashList, line 96")
	call construct_HashList(this)
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_IterableMap takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call construct_HashMap(this)
	set IterableMap_keys[this] = new_HashList("when calling new_HashList in HashMap, line 29")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function new_IterableMap takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_IterableMap("when calling IterableMap in HashMap, line 84")
	call construct_IterableMap(this, "when calling construct_IterableMap in HashMap, line 84")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function region_addRect takes region this, rect rct returns nothing
	call RegionAddRect(this, rct)
endfunction

function trigger_addCondition takes trigger this, boolexpr condition returns nothing
	call TriggerAddCondition(this, condition)
endfunction

function trigger_disable takes trigger this returns nothing
	call DisableTrigger(this)
endfunction

function trigger_registerAnyUnitEvent takes trigger this, playerunitevent whichEvent returns nothing
	call TriggerRegisterAnyUnitEventBJ(this, whichEvent)
endfunction

function trigger_registerLeaveRegion takes trigger this, region whichRegion, boolexpr filter returns nothing
	call TriggerRegisterLeaveRegion(this, whichRegion, filter)
endfunction

function Disease_initialize takes string stackPos returns nothing
	local trigger receiver
	local trigger receiver_2
	local trigger receiver_3
	local region map
	local region receiver_4
	local trigger receiver_5
	local trigger receiver_6
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if  not Disease_hasBeenInitialized then
		call debugMsg("Disease: Initializing Class")
		set Disease_hasBeenInitialized = true
		set Disease_instances = new_IterableMap("when calling new_IterableMap in DiseaseCloud, line 176")
		set receiver = CreateTrigger()
		call trigger_registerAnyUnitEvent(receiver, EVENT_PLAYER_UNIT_DEATH)
		set receiver_2 = receiver
		call trigger_addCondition(receiver_2, Condition(ref_function_bridge_Disease_unitDies))
		set receiver_3 = receiver_2
		call trigger_disable(receiver_3)
		set Disease_trg_UnitDies = receiver_3
		set receiver_4 = CreateRegion()
		call region_addRect(receiver_4, GetPlayableMapRect())
		set map = receiver_4
		set receiver_5 = CreateTrigger()
		call trigger_registerLeaveRegion(receiver_5, map, Filter(ref_function_bridge_Disease_unitIsRemoved))
		set receiver_6 = receiver_5
		call trigger_disable(receiver_6)
		set Disease_trg_UnitIsRemoved = receiver_6
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set map = null
	set receiver_4 = null
	set receiver_5 = null
	set receiver_6 = null
endfunction

function Table_saveInt takes integer this, integer parentKey, integer value returns nothing
	call hashtable_saveInt(Table_ht, this, parentKey, value)
endfunction

function dispatch_Table_Table_Table_saveInt takes integer this, integer parentKey, integer value, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Table.Table_Table_saveInt", "when calling error in ")
		else
			call error("Called Table.Table_Table_saveInt on invalid object.", "when calling error in ")
		endif
	endif
	call Table_saveInt(this, parentKey, value)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function HashMap_put takes integer this, integer key, integer value, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_Table_Table_Table_saveInt(this, key, value, "when calling saveInt in HashMap, line 16")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function HashList_count takes integer this, integer elem returns integer
	return hashtable_loadInt(HashList_occurences, this, elem)
endfunction

function dispatch_HashList_HashList_HashList_count takes integer this, integer elem, string stackPos returns integer
	local integer HashList_HashList_count_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if HashList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling HashList.HashList_HashList_count", "when calling error in ")
		else
			call error("Called HashList.HashList_HashList_count on invalid object.", "when calling error in ")
		endif
	endif
	set HashList_HashList_count_result = HashList_count(this, elem)
	set wurst_stack_depth = wurst_stack_depth - 1
	return HashList_HashList_count_result
endfunction

function HashList_incrOccurences takes integer this, integer elem, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call hashtable_saveInt(HashList_occurences, this, elem, dispatch_HashList_HashList_HashList_count(this, elem, "when calling count in HashList, line 14") + 1)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_HashList_HashList_HashList_incrOccurences takes integer this, integer elem, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if HashList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling HashList.HashList_HashList_incrOccurences", "when calling error in ")
		else
			call error("Called HashList.HashList_HashList_incrOccurences on invalid object.", "when calling error in ")
		endif
	endif
	call HashList_incrOccurences(this, elem, "when calling incrOccurences in HashList, line 13")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function HashList_add_1 takes integer this, integer elems_0, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call hashtable_saveInt(HashList_ht, this, HashList_size[this], elems_0)
	call dispatch_HashList_HashList_HashList_incrOccurences(this, elems_0, "when calling incrOccurences in HashList, line 23")
	set HashList_size[this] = HashList_size[this] + 1
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_HashList_HashList_HashList_add_1 takes integer this, integer elems_0, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if HashList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling HashList.HashList_HashList_add", "when calling error in ")
		else
			call error("Called HashList.HashList_HashList_add on invalid object.", "when calling error in ")
		endif
	endif
	call HashList_add_1(this, elems_0, "when calling add in HashList, line 20")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function HashList_has takes integer this, integer elem, string stackPos returns boolean
	local boolean stackTrace_tempReturn
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set stackTrace_tempReturn = dispatch_HashList_HashList_HashList_count(this, elem, "when calling count in HashList, line 83") > 0
	set wurst_stack_depth = wurst_stack_depth - 1
	return stackTrace_tempReturn
endfunction

function dispatch_HashList_HashList_HashList_has takes integer this, integer elem, string stackPos returns boolean
	local boolean HashList_HashList_has_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if HashList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling HashList.HashList_HashList_has", "when calling error in ")
		else
			call error("Called HashList.HashList_HashList_has on invalid object.", "when calling error in ")
		endif
	endif
	set HashList_HashList_has_result = HashList_has(this, elem, "when calling has in HashList, line 82")
	set wurst_stack_depth = wurst_stack_depth - 1
	return HashList_HashList_has_result
endfunction

function IterableMap_hasKey takes integer this, integer key, string stackPos returns boolean
	local boolean stackTrace_tempReturn
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set stackTrace_tempReturn = dispatch_HashList_HashList_HashList_has(IterableMap_keys[this], key, "when calling has in HashMap, line 44")
	set wurst_stack_depth = wurst_stack_depth - 1
	return stackTrace_tempReturn
endfunction

function dispatch_IterableMap_HashMap_IterableMap_hasKey takes integer this, integer key, string stackPos returns boolean
	local boolean HashMap_IterableMap_hasKey_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling IterableMap.HashMap_IterableMap_hasKey", "when calling error in ")
		else
			call error("Called IterableMap.HashMap_IterableMap_hasKey on invalid object.", "when calling error in ")
		endif
	endif
	set HashMap_IterableMap_hasKey_result = IterableMap_hasKey(this, key, "when calling hasKey in HashMap, line 43")
	set wurst_stack_depth = wurst_stack_depth - 1
	return HashMap_IterableMap_hasKey_result
endfunction

function IterableMap_put takes integer this, integer key, integer value, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call HashMap_put(this, key, value, "when calling put in HashMap, line 38")
	if  not dispatch_IterableMap_HashMap_IterableMap_hasKey(this, key, "when calling hasKey in HashMap, line 39") then
		call dispatch_HashList_HashList_HashList_add_1(IterableMap_keys[this], key, "when calling add in HashMap, line 40")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_IterableMap_HashMap_IterableMap_put takes integer this, integer key, integer value, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling IterableMap.HashMap_IterableMap_put", "when calling error in ")
		else
			call error("Called IterableMap.HashMap_IterableMap_put on invalid object.", "when calling error in ")
		endif
	endif
	call IterableMap_put(this, key, value, "when calling put in HashMap, line 37")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function timer_getHandleId takes timer this returns integer
	return GetHandleId(this)
endfunction

function timer_setData takes timer this, integer data, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_Table_Table_Table_saveInt(TimerUtils_timerData, timer_getHandleId(this), data, "when calling saveInt in TimerUtils, line 17")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function getTimer takes string stackPos returns timer
	local timer receiver
	local timer stackTrace_tempReturn
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if TimerUtils_freeTimersCount > 0 then
		set TimerUtils_freeTimersCount = TimerUtils_freeTimersCount - 1
		call timer_setData(TimerUtils_freeTimers[TimerUtils_freeTimersCount], 0, "when calling setData in TimerUtils, line 29")
		set wurst_stack_depth = wurst_stack_depth - 1
		set receiver = null
		set stackTrace_tempReturn = null
		return TimerUtils_freeTimers[TimerUtils_freeTimersCount]
	else
		set receiver = CreateTimer()
		call timer_setData(receiver, 0, "when calling setData in TimerUtils, line 32")
		set stackTrace_tempReturn = receiver
		set wurst_stack_depth = wurst_stack_depth - 1
		set getTimertempReturn = stackTrace_tempReturn
		set receiver = null
		set stackTrace_tempReturn = null
		return getTimertempReturn
	endif
endfunction

function handle_getHandleId takes handle this returns integer
	return GetHandleId(this)
endfunction

function unitToIndex takes unit object returns integer
	return handle_getHandleId(object)
endfunction

function unit_getName takes unit this returns string
	return GetUnitName(this)
endfunction

function construct_Disease takes integer this, unit whichUnit, real diseaseDamage, real cloudDamage, real diseaseRange, real cloudRange, real cloudDuration, string stackPos returns nothing
	local timer receiver
	local timer receiver_2
	local integer temp
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set Disease_leaveCloud[this] = true
	if  not Disease_hasBeenInitialized then
		call Disease_initialize("when calling initialize in DiseaseCloud, line 90")
	endif
	if Disease_instanceCount == 0 then
		call Disease_activateTriggers()
	endif
	set Disease_instanceCount = Disease_instanceCount + 1
	call debugMsg("Adding Disease to " + unit_getName(whichUnit) + "...")
	call dispatch_IterableMap_HashMap_IterableMap_put(Disease_instances, unitToIndex(whichUnit), this, "when calling put in DiseaseCloud, line 97")
	set Disease_unitWithAbility[this] = whichUnit
	set Disease_diseaseDamage[this] = diseaseDamage
	set Disease_cloudDamage[this] = cloudDamage
	set Disease_cloudRange[this] = cloudRange
	set Disease_diseaseRange[this] = diseaseRange
	set Disease_cloudDuration[this] = cloudDuration
	set Disease_sfx[this] = widget_addEffect(Disease_unitWithAbility[this], DiseaseCloud_SFX, "origin")
	set temp = this
	set receiver = getTimer("when calling getTimer in DiseaseCloud, line 106")
	call timer_setData(receiver, this, "when calling setData in DiseaseCloud, line 107")
	set receiver_2 = receiver
	call timer_startPeriodic(receiver_2, DiseaseCloud_DAMAGEFREQ, ref_function_bridge_Disease_orderDamage)
	set Disease_timer_Damage[temp] = receiver_2
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
endfunction

function new_Disease takes unit whichUnit, real diseaseDamage, real cloudDamage, real diseaseRange, real cloudRange, real cloudDuration, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_Disease("when calling Disease in DiseaseCloud, line 88")
	call construct_Disease(this, whichUnit, diseaseDamage, cloudDamage, diseaseRange, cloudRange, cloudDuration, "when calling construct_Disease in DiseaseCloud, line 88")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function Disease_addUnit takes unit whichUnit, real damage, real cloudDuration, real range, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call debugMsg("Disease: addUnit() called")
	call new_Disease(whichUnit, damage, damage, range, range, cloudDuration, "when calling new_Disease in DiseaseCloud, line 126")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Zombie_closure_impl takes integer this, unit mob, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call Disease_addUnit(mob, 100., 10., 150., "when calling addUnit in nec_Zombie, line 38")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function hashtable_loadUnitHandle takes hashtable this, integer parentKey, integer childKey returns unit
	return LoadUnitHandle(this, parentKey, childKey)
endfunction

function Table_loadUnit takes integer this, integer parentKey returns unit
	return hashtable_loadUnitHandle(Table_ht, this, parentKey)
endfunction

function dispatch_Table_Table_Table_loadUnit takes integer this, integer parentKey, string stackPos returns unit
	local unit Table_Table_loadUnit_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Table.Table_Table_loadUnit", "when calling error in ")
		else
			call error("Called Table.Table_Table_loadUnit on invalid object.", "when calling error in ")
		endif
	endif
	set Table_Table_loadUnit_result = Table_loadUnit(this, parentKey)
	set wurst_stack_depth = wurst_stack_depth - 1
	set dispatch_Table_Table_Table_loadUnittempReturn = Table_Table_loadUnit_result
	set Table_Table_loadUnit_result = null
	return dispatch_Table_Table_Table_loadUnittempReturn
endfunction

function hashtable_saveFogStateHandle takes hashtable this, integer parentKey, integer childKey, fogstate value returns nothing
	call SaveFogStateHandle(this, parentKey, childKey, value)
endfunction

function Table_saveFogState takes integer this, integer parentKey, fogstate value returns nothing
	call hashtable_saveFogStateHandle(Table_ht, this, parentKey, value)
endfunction

function dispatch_Table_Table_Table_saveFogState takes integer this, integer parentKey, fogstate value, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Table.Table_Table_saveFogState", "when calling error in ")
		else
			call error("Called Table.Table_Table_saveFogState on invalid object.", "when calling error in ")
		endif
	endif
	call Table_saveFogState(this, parentKey, value)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function unitFromIndex takes integer index, string stackPos returns unit
	local unit stackTrace_tempReturn
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_Table_Table_Table_saveFogState(TypeCasting_typecastdata, 0, ConvertFogState(index), "when calling saveFogState in TypeCasting, line 46")
	set stackTrace_tempReturn = dispatch_Table_Table_Table_loadUnit(TypeCasting_typecastdata, 0, "when calling loadUnit in TypeCasting, line 47")
	set wurst_stack_depth = wurst_stack_depth - 1
	set unitFromIndextempReturn = stackTrace_tempReturn
	set stackTrace_tempReturn = null
	return unitFromIndextempReturn
endfunction

function run_wrapper takes integer this, integer t, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call Zombie_closure_impl(this, unitFromIndex(t, "when calling unitFromIndex in nec_Zombie, line 38"), "when calling Zombie_closure_impl in nec_Zombie, line 38")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_RemoteFunction_BossAdd_RemoteFunction_run takes integer this, integer t, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if RemoteFunction_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling RemoteFunction.BossAdd_RemoteFunction_run", "when calling error in ")
		else
			call error("Called RemoteFunction.BossAdd_RemoteFunction_run on invalid object.", "when calling error in ")
		endif
	endif
	call run_wrapper(this, t, "when calling run_wrapper in BossAdd, line 7")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function alloc_Add takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Add_firstFree == 0 then
		if Add_maxIndex < 32768 then
			set Add_maxIndex = Add_maxIndex + 1
			set this = Add_maxIndex
			set Add_typeId[this] = 627
		else
			call error("Out of memory: Could not create Add.", "when calling error in ")
			set this = 0
		endif
	else
		set Add_firstFree = Add_firstFree - 1
		set this = Add_nextFree[Add_firstFree]
		set Add_typeId[this] = 627
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function GetRandomAngle takes nothing returns real
	return GetRandomReal(0., Maths_PI2)
endfunction

function angle_degrees takes real this_radians returns real
	return this_radians * Angle_RADTODEG
endfunction

function createUnit takes player p, integer unitId, real pos_x, real pos_y, real facing_radians returns unit
	return CreateUnit(p, unitId, pos_x, pos_y, angle_degrees(facing_radians))
endfunction

function unit_setArmor takes unit this, real armorAmount returns nothing
	call BlzSetUnitArmor(this, armorAmount)
endfunction

function unit_setAttackCooldown takes unit this, real cooldown, integer weaponIndex returns nothing
	call BlzSetUnitAttackCooldown(this, cooldown, weaponIndex)
endfunction

function unit_setMaxHP takes unit this, integer hp, boolean keepRatio returns nothing
	local real ratio
	if keepRatio then
		set ratio = unit_getHP(this) / unit_getMaxHP(this)
		call BlzSetUnitMaxHP(this, hp)
		call unit_setHP(this, ratio * hp)
	else
		call BlzSetUnitMaxHP(this, hp)
	endif
endfunction

function unit_getMana takes unit this returns real
	return unit_getState(this, UNIT_STATE_MANA)
endfunction

function unit_setMaxMana takes unit this, integer mana, boolean keepRatio returns nothing
	local real ratio
	if keepRatio then
		set ratio = unit_getMana(this) / unit_getMaxMana(this)
		call BlzSetUnitMaxMana(this, mana)
		call unit_setMana(this, ratio * mana)
	else
		call BlzSetUnitMaxMana(this, mana)
	endif
endfunction

function construct_Add takes integer this, integer id, player owner, real spawnPoint_x, real spawnPoint_y, integer damage, real armor, integer health, integer mana, real moveSpeed, real attackSpeed, string stackPos returns nothing
	local unit receiver
	local unit receiver_2
	local unit receiver_3
	local unit receiver_4
	local unit receiver_5
	local timer receiver_6
	local timer receiver_7
	local integer temp
	local integer temp_2
	local integer tempIndex
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set temp = this
	set receiver = createUnit(owner, id, spawnPoint_x, spawnPoint_y, GetRandomAngle())
	call unit_setMaxHP(receiver, health, true)
	set receiver_2 = receiver
	call unit_setBaseDamage(receiver_2, damage, 1)
	set receiver_3 = receiver_2
	call unit_setArmor(receiver_3, armor)
	set receiver_4 = receiver_3
	call unit_setMoveSpeed(receiver_4, moveSpeed)
	set receiver_5 = receiver_4
	call unit_setAttackCooldown(receiver_5, attackSpeed, 1)
	set Add_mob[temp] = receiver_5
	if mana > 0 and unit_getMaxMana(Add_mob[this]) > 0. then
		call unit_setMaxMana(Add_mob[this], mana, true)
	endif
	call print("Created mob")
	set temp_2 = this
	set receiver_6 = getTimer("when calling getTimer in BossAdd, line 147")
	call timer_setData(receiver_6, this, "when calling setData in BossAdd, line 148")
	set receiver_7 = receiver_6
	call timer_startPeriodic(receiver_7, Add_UPDATE_FREQ, ref_function_bridge_Add_attack)
	set Add_timer_Attack[temp_2] = receiver_7
	call print("Started timer!")
	set tempIndex = this
	set Add_spawnPoint[tempIndex] = spawnPoint_x
	set Add_spawnPoint_2[tempIndex] = spawnPoint_y
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
	set receiver_6 = null
	set receiver_7 = null
endfunction

function new_Add takes integer id, player owner, real spawnPoint_x, real spawnPoint_y, integer damage, real armor, integer health, integer mana, real moveSpeed, real attackSpeed, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_Add("when calling Add in BossAdd, line 131")
	call construct_Add(this, id, owner, spawnPoint_x, spawnPoint_y, damage, armor, health, mana, moveSpeed, attackSpeed, "when calling construct_Add in BossAdd, line 131")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function rect_getMaxX takes rect this returns real
	return GetRectMaxX(this)
endfunction

function rect_getMaxY takes rect this returns real
	return GetRectMaxY(this)
endfunction

function rect_getMinX takes rect this returns real
	return GetRectMinX(this)
endfunction

function rect_getMinY takes rect this returns real
	return GetRectMinY(this)
endfunction

function rect_randomPoint takes rect this returns real
	set rect_randomPoint_return_x = GetRandomReal(rect_getMinX(this), rect_getMaxX(this))
	set rect_randomPoint_return_y = GetRandomReal(rect_getMinY(this), rect_getMaxY(this))
	return rect_randomPoint_return_x
endfunction

function Table_loadInt takes integer this, integer parentKey returns integer
	return hashtable_loadInt(Table_ht, this, parentKey)
endfunction

function dispatch_Table_Table_Table_loadInt takes integer this, integer parentKey, string stackPos returns integer
	local integer Table_Table_loadInt_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Table.Table_Table_loadInt", "when calling error in ")
		else
			call error("Called Table.Table_Table_loadInt on invalid object.", "when calling error in ")
		endif
	endif
	set Table_Table_loadInt_result = Table_loadInt(this, parentKey)
	set wurst_stack_depth = wurst_stack_depth - 1
	return Table_Table_loadInt_result
endfunction

function timer_getData takes timer this, string stackPos returns integer
	local integer stackTrace_tempReturn
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set stackTrace_tempReturn = dispatch_Table_Table_Table_loadInt(TimerUtils_timerData, timer_getHandleId(this), "when calling loadInt in TimerUtils, line 21")
	set wurst_stack_depth = wurst_stack_depth - 1
	return stackTrace_tempReturn
endfunction

function AddSpawner_spawnAdd takes string stackPos returns nothing
	local integer spawner
	local real spawnPoint_x
	local real spawnPoint_y
	local integer add
	local integer receiver
	local integer receiver_2
	local real temp_spawnPoint_x
	local real temp_spawnPoint_y
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set spawner = timer_getData(GetExpiredTimer(), "when calling getData in BossAdd, line 61")
	set temp_spawnPoint_x = rect_randomPoint(AddSpawner_spawnRect[spawner])
	set temp_spawnPoint_y = rect_randomPoint_return_y
	set spawnPoint_x = temp_spawnPoint_x
	set spawnPoint_y = temp_spawnPoint_y
	set add = new_Add(AddSpawner_addId[spawner], AddSpawner_owner[spawner], spawnPoint_x, spawnPoint_y, AddSpawner_damage[spawner], AddSpawner_armor[spawner], AddSpawner_health[spawner], AddSpawner_mana[spawner], AddSpawner_moveSpeed[spawner], AddSpawner_attackSpeed[spawner], "when calling new_Add in BossAdd, line 63")
	if AddSpawner_funcOnSpawn[spawner] != 0 then
		call dispatch_RemoteFunction_BossAdd_RemoteFunction_run(AddSpawner_funcOnSpawn[spawner], unitToIndex(Add_mob[add]), "when calling run in BossAdd, line 74")
	endif
	call dispatch_LinkedList_LinkedList_LinkedList_add_1(AddSpawner_adds[spawner], add, "when calling add in BossAdd, line 76")
	call print("Created add!")
	set receiver = add
	call dispatch_Add_BossAdd_Add_createSpawnEffect(receiver, AddSpawner_spawnSfx[spawner], "when calling createSpawnEffect in BossAdd, line 82")
	set receiver_2 = receiver
	call dispatch_Add_BossAdd_Add_setTarget(receiver_2, AddSpawner_target[spawner], "when calling setTarget in BossAdd, line 83")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_AddSpawner_spawnAdd takes nothing returns nothing
	set wurst_stack_depth = 0
	call AddSpawner_spawnAdd("BossAdd, line 86")
endfunction

function Add_attack takes string stackPos returns nothing
	local integer add
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set add = timer_getData(GetExpiredTimer(), "when calling getData in BossAdd, line 166")
	call unit_issueTargetOrder(Add_mob[add], "attack", Add_target[add])
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_Add_attack takes nothing returns nothing
	set wurst_stack_depth = 0
	call Add_attack("BossAdd, line 147")
endfunction

function ClickableObject_setDescription takes integer this, string text returns string
	set ClickableObject_description[this] = text
	return ClickableObject_description[this]
endfunction

function dispatch_ClickableObject_BossInformation_ClickableObject_setDescription takes integer this, string text, string stackPos returns string
	local string BossInformation_ClickableObject_setDescription_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ClickableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling ClickableObject.BossInformation_ClickableObject_setDescription", "when calling error in ")
		else
			call error("Called ClickableObject.BossInformation_ClickableObject_setDescription on invalid object.", "when calling error in ")
		endif
	endif
	set BossInformation_ClickableObject_setDescription_result = ClickableObject_setDescription(this, text)
	set wurst_stack_depth = wurst_stack_depth - 1
	return BossInformation_ClickableObject_setDescription_result
endfunction

function alloc_SoundDefinition takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if SoundDefinition_firstFree == 0 then
		if SoundDefinition_maxIndex < 32768 then
			set SoundDefinition_maxIndex = SoundDefinition_maxIndex + 1
			set this = SoundDefinition_maxIndex
			set SoundDefinition_typeId[this] = 709
		else
			call error("Out of memory: Could not create SoundDefinition.", "when calling error in ")
			set this = 0
		endif
	else
		set SoundDefinition_firstFree = SoundDefinition_firstFree - 1
		set this = SoundDefinition_nextFree[SoundDefinition_firstFree]
		set SoundDefinition_typeId[this] = 709
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function alloc_LinkedList takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LinkedList_firstFree == 0 then
		if LinkedList_maxIndex < 32768 then
			set LinkedList_maxIndex = LinkedList_maxIndex + 1
			set this = LinkedList_maxIndex
			set LinkedList_typeId[this] = 689
		else
			call error("Out of memory: Could not create LinkedList.", "when calling error in ")
			set this = 0
		endif
	else
		set LinkedList_firstFree = LinkedList_firstFree - 1
		set this = LinkedList_nextFree[LinkedList_firstFree]
		set LinkedList_typeId[this] = 689
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_LinkedList2 takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set LinkedList_dummy[this] = new_LLEntry(0, 0, 0, "when calling new_LLEntry in LinkedList, line 14")
	set LinkedList_size[this] = 0
	set LinkedList_staticItr[this] = 0
	set LinkedList_staticBackItr[this] = 0
	set LLEntry_next[LinkedList_dummy[this]] = LinkedList_dummy[this]
	set LLEntry_prev[LinkedList_dummy[this]] = LinkedList_dummy[this]
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function new_LinkedList takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_LinkedList("when calling LinkedList in LinkedList, line 27")
	call construct_LinkedList2(this, "when calling construct_LinkedList2 in LinkedList, line 27")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_SoundDefinition takes integer this, string file, boolean looping, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set SoundDefinition_soundStack[this] = new_LinkedList("when calling new_LinkedList in SoundUtils, line 34")
	set SoundDefinition_duration[this] = 10000
	set SoundDefinition_is3D[this] = false
	set SoundDefinition_stopOnLeaveRange[this] = false
	set SoundDefinition_fadeIn[this] = SoundUtils_DEFAULT_SOUND_FADE_IN_RATE
	set SoundDefinition_fadeOut[this] = SoundUtils_DEFAULT_SOUND_FADE_OUT_RATE
	set SoundDefinition_eaxSetting[this] = SoundUtils_DEFAULT_SOUND_EAX_SETTINGS
	set SoundDefinition_file[this] = file
	set SoundDefinition_looping[this] = looping
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function new_SoundDefinition takes string file, boolean looping, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_SoundDefinition("when calling SoundDefinition in SoundUtils, line 45")
	call construct_SoundDefinition(this, file, looping, "when calling construct_SoundDefinition in SoundUtils, line 45")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function ClickableObject_setSoundOnClick takes integer this, string whichSound, string stackPos returns integer
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set ClickableObject_soundOnClick[this] = new_SoundDefinition(whichSound, false, "when calling new_SoundDefinition in BossInformation, line 89")
	set wurst_stack_depth = wurst_stack_depth - 1
	return ClickableObject_soundOnClick[this]
endfunction

function dispatch_ClickableObject_BossInformation_ClickableObject_setSoundOnClick takes integer this, string whichSound, string stackPos returns integer
	local integer BossInformation_ClickableObject_setSoundOnClick_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ClickableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling ClickableObject.BossInformation_ClickableObject_setSoundOnClick", "when calling error in ")
		else
			call error("Called ClickableObject.BossInformation_ClickableObject_setSoundOnClick on invalid object.", "when calling error in ")
		endif
	endif
	set BossInformation_ClickableObject_setSoundOnClick_result = ClickableObject_setSoundOnClick(this, whichSound, "when calling setSoundOnClick in BossInformation, line 88")
	set wurst_stack_depth = wurst_stack_depth - 1
	return BossInformation_ClickableObject_setSoundOnClick_result
endfunction

function UnitObject_setAttackDmg takes integer this, integer dmg returns nothing
	call unit_setBaseDamage(ClickableObject_object[this], dmg, 1)
endfunction

function dispatch_UnitObject_BossInformation_UnitObject_setAttackDmg takes integer this, integer dmg, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ClickableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling UnitObject.BossInformation_UnitObject_setAttackDmg", "when calling error in ")
		else
			call error("Called UnitObject.BossInformation_UnitObject_setAttackDmg on invalid object.", "when calling error in ")
		endif
	endif
	call UnitObject_setAttackDmg(this, dmg)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function UnitObject_setAttackSpeed takes integer this, real speed returns nothing
	set UnitObject_attackspeed[this] = speed
endfunction

function dispatch_UnitObject_BossInformation_UnitObject_setAttackSpeed takes integer this, real speed, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ClickableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling UnitObject.BossInformation_UnitObject_setAttackSpeed", "when calling error in ")
		else
			call error("Called UnitObject.BossInformation_UnitObject_setAttackSpeed on invalid object.", "when calling error in ")
		endif
	endif
	call UnitObject_setAttackSpeed(this, speed)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function UnitObject_setHP takes integer this, integer hp returns nothing
	call unit_setMaxHP(ClickableObject_object[this], hp, true)
endfunction

function dispatch_UnitObject_BossInformation_UnitObject_setHP takes integer this, integer hp, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ClickableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling UnitObject.BossInformation_UnitObject_setHP", "when calling error in ")
		else
			call error("Called UnitObject.BossInformation_UnitObject_setHP on invalid object.", "when calling error in ")
		endif
	endif
	call UnitObject_setHP(this, hp)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function UnitObject_setMoveSpeed takes integer this, real speed returns nothing
	set UnitObject_movespeed[this] = speed
endfunction

function dispatch_UnitObject_BossInformation_UnitObject_setMoveSpeed takes integer this, real speed, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ClickableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling UnitObject.BossInformation_UnitObject_setMoveSpeed", "when calling error in ")
		else
			call error("Called UnitObject.BossInformation_UnitObject_setMoveSpeed on invalid object.", "when calling error in ")
		endif
	endif
	call UnitObject_setMoveSpeed(this, speed)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function int_toString takes integer this returns string
	return I2S(this)
endfunction

function alloc_UnitObject takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ClickableObject_firstFree == 0 then
		if ClickableObject_maxIndex < 32768 then
			set ClickableObject_maxIndex = ClickableObject_maxIndex + 1
			set this = ClickableObject_maxIndex
			set ClickableObject_typeId[this] = 650
		else
			call error("Out of memory: Could not create UnitObject.", "when calling error in ")
			set this = 0
		endif
	else
		set ClickableObject_firstFree = ClickableObject_firstFree - 1
		set this = ClickableObject_nextFree[ClickableObject_firstFree]
		set ClickableObject_typeId[this] = 650
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function UnitIndex_getIndex takes integer this returns integer
	return this
endfunction

function dispatch_UnitIndex_UnitIndexer_UnitIndex_getIndex takes integer this, string stackPos returns integer
	local integer UnitIndexer_UnitIndex_getIndex_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if UnitIndex_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling UnitIndex.UnitIndexer_UnitIndex_getIndex", "when calling error in ")
		else
			call error("Called UnitIndex.UnitIndexer_UnitIndex_getIndex on invalid object.", "when calling error in ")
		endif
	endif
	set UnitIndexer_UnitIndex_getIndex_result = UnitIndex_getIndex(this)
	set wurst_stack_depth = wurst_stack_depth - 1
	return UnitIndexer_UnitIndex_getIndex_result
endfunction

function trigger_registerUnitEvent takes trigger this, unit whichUnit, unitevent whichEvent returns nothing
	call TriggerRegisterUnitEvent(this, whichUnit, whichEvent)
endfunction

function unit_getUserData takes unit this returns integer
	return GetUnitUserData(this)
endfunction

function unit_getIndex takes unit this returns integer
	return unit_getUserData(this)
endfunction

function unit_setName takes unit this, string name returns nothing
	call BlzSetUnitName(this, name)
endfunction

function alloc_UnitIndex takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if UnitIndex_firstFree == 0 then
		if UnitIndex_maxIndex < 32768 then
			set UnitIndex_maxIndex = UnitIndex_maxIndex + 1
			set this = UnitIndex_maxIndex
			set UnitIndex_typeId[this] = 734
		else
			call error("Out of memory: Could not create UnitIndex.", "when calling error in ")
			set this = 0
		endif
	else
		set UnitIndex_firstFree = UnitIndex_firstFree - 1
		set this = UnitIndex_nextFree[UnitIndex_firstFree]
		set UnitIndex_typeId[this] = 734
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function unit_setUserData takes unit this, integer data returns nothing
	call SetUnitUserData(this, data)
endfunction

function construct_UnitIndex takes integer this, unit whichUnit returns nothing
	set UnitIndex__unit[this] = whichUnit
	call unit_setUserData(UnitIndex__unit[this], this)
	call trigger_evaluate(UnitIndexer_onIndexTrigger)
endfunction

function new_UnitIndex takes unit whichUnit, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_UnitIndex("when calling UnitIndex in UnitIndexer, line 166")
	call construct_UnitIndex(this, whichUnit)
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function unit_toUnitIndex takes unit this, string stackPos returns integer
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = unit_getUserData(this)
	if instance == 0 then
		set instance = new_UnitIndex(this, "when calling new_UnitIndex in UnitIndexer, line 125")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return instance
endfunction

function construct_ClickableObject takes integer this, string whichName, unit whichObject, real whichPos_x, real whichPos_y, integer classId, string stackPos returns nothing
	local integer tempIndex
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set ClickableObject_object[this] = whichObject
	call print(int_toString(dispatch_UnitIndex_UnitIndexer_UnitIndex_getIndex(unit_toUnitIndex(ClickableObject_object[this], "when calling toUnitIndex in BossInformation, line 43"), "when calling getIndex in BossInformation, line 43")))
	set ClickableObject_classIds[unit_getIndex(ClickableObject_object[this])] = classId
	call unit_pause(ClickableObject_object[this])
	set ClickableObject_name[this] = whichName
	set tempIndex = this
	set ClickableObject_pos[tempIndex] = whichPos_x
	set ClickableObject_pos_2[tempIndex] = whichPos_y
	call trigger_registerUnitEvent(ClickableObject_clickTrg, ClickableObject_object[this], EVENT_UNIT_SELECTED)
	call trigger_registerUnitEvent(ClickableObject_attackTrg, ClickableObject_object[this], EVENT_UNIT_ATTACKED)
	call unit_setName(ClickableObject_object[this], ClickableObject_name[this])
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function construct_UnitObject takes integer this, string whichName, integer unitTypeId, real pos_x, real pos_y, real facing, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call construct_ClickableObject(this, whichName, createUnit(Player(PLAYER_NEUTRAL_PASSIVE), unitTypeId, pos_x, pos_y, Deg2Rad(facing)), pos_x, pos_y, UnitObject_classId, "when calling construct_ClickableObject in BossInformation, line 210")
	set UnitObject_movespeed[this] = -1.
	set UnitObject_attackspeed[this] = -1.
	set UnitObject_instances[unit_getIndex(ClickableObject_object[this])] = this
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function new_UnitObject takes string whichName, integer unitTypeId, real pos_x, real pos_y, real facing, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_UnitObject("when calling UnitObject in BossInformation, line 210")
	call construct_UnitObject(this, whichName, unitTypeId, pos_x, pos_y, facing, "when calling construct_UnitObject in BossInformation, line 210")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function timer_release takes timer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if this == null then
		call error("Trying to release a null timer", "when calling error in TimerUtils, line 37")
		set wurst_stack_depth = wurst_stack_depth - 1
		return
	endif
	if timer_getData(this, "when calling getData in TimerUtils, line 39") == TimerUtils_HELD then
		call error("ReleaseTimer: Double free!", "when calling error in TimerUtils, line 40")
		set wurst_stack_depth = wurst_stack_depth - 1
		return
	endif
	call timer_setData(this, TimerUtils_HELD, "when calling setData in TimerUtils, line 42")
	call timer_pause(this)
	set TimerUtils_freeTimers[TimerUtils_freeTimersCount] = this
	set TimerUtils_freeTimersCount = TimerUtils_freeTimersCount + 1
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function ArcaneBeing_createBossInfo takes string stackPos returns nothing
	local integer obj
	local integer receiver
	local integer receiver_2
	local integer receiver_3
	local integer receiver_4
	local integer receiver_5
	local integer receiver_6
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_release(GetExpiredTimer(), "when calling release in tm_ArcaneBeing, line 147")
	set receiver = new_UnitObject("Arcane Being", ArcaneBeing_UNITID, 11690., 14590., 20., "when calling new_UnitObject in tm_ArcaneBeing, line 149")
	call dispatch_ClickableObject_BossInformation_ClickableObject_setSoundOnClick(receiver, Sounds_obsidianAvengerWhat2, "when calling setSoundOnClick in tm_ArcaneBeing, line 150")
	set receiver_2 = receiver
	call dispatch_UnitObject_BossInformation_UnitObject_setAttackDmg(receiver_2, R2I(ArcaneBeing_STARTDMG), "when calling setAttackDmg in tm_ArcaneBeing, line 151")
	set receiver_3 = receiver_2
	call dispatch_UnitObject_BossInformation_UnitObject_setAttackSpeed(receiver_3, ArcaneBeing_ATTACKSPEED, "when calling setAttackSpeed in tm_ArcaneBeing, line 152")
	set receiver_4 = receiver_3
	call dispatch_UnitObject_BossInformation_UnitObject_setHP(receiver_4, ArcaneBeing_HP, "when calling setHP in tm_ArcaneBeing, line 153")
	set receiver_5 = receiver_4
	call dispatch_UnitObject_BossInformation_UnitObject_setMoveSpeed(receiver_5, ArcaneBeing_MOVESPEED, "when calling setMoveSpeed in tm_ArcaneBeing, line 154")
	set receiver_6 = receiver_5
	call dispatch_ClickableObject_BossInformation_ClickableObject_setDescription(receiver_6, "" + "One Arcane Being spawns at a random location every " + int_toString(R2I(ArcaneBeing_COOLDOWN)) + "\n" + "seconds. The Arcane Being will grow, increasing its damage gradually\n" + "to " + int_toString(R2I(ArcaneBeing_GROWTH_DMG * 100.)) + "% over " + int_toString(R2I(ArcaneBeing_GROWTH_DURATION)) + " seconds.", "when calling setDescription in tm_ArcaneBeing, line 155")
	set obj = receiver_6
	set ClickableObject_objectAnimation[obj] = "attack"
	set ClickableObject_objType[obj] = "Add"
	call unit_setScale(ClickableObject_object[obj], ArcaneBeing_STARTSCALE)
	call unit_setVertexColor(ClickableObject_object[obj], 255, 100, 150, 75)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_ArcaneBeing_createBossInfo takes nothing returns nothing
	set wurst_stack_depth = 0
	call ArcaneBeing_createBossInfo("tm_ArcaneBeing, line 8")
endfunction

function ArcaneBeing_grow takes string stackPos returns nothing
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in tm_ArcaneBeing, line 82")
	if unit_isAlive(ArcaneBeing_mob[instance]) then
		if ArcaneBeing_growthCounter[instance] <= ArcaneBeing_GROWTH_MAXCOUNT then
			set ArcaneBeing_growthCounter[instance] = ArcaneBeing_growthCounter[instance] + 1
			set ArcaneBeing_scale[instance] = ArcaneBeing_scale[instance] + ArcaneBeing_GROWTH_SCALE_PER_GROWTH
			call unit_setScale(ArcaneBeing_mob[instance], ArcaneBeing_scale[instance])
			set ArcaneBeing_dmg[instance] = ArcaneBeing_dmg[instance] + ArcaneBeing_GROWTH_DMG_PER_GROWTH
			call unit_setBaseDamage(ArcaneBeing_mob[instance], R2I(ArcaneBeing_dmg[instance] * tm_Main_bossDmgInc), 1)
		endif
	else
		call timer_pause(ArcaneBeing_miscTimer[instance])
		call timer_start(ArcaneBeing_miscTimer[instance], 1.0, ref_function_bridge_ArcaneBeing_onDeathDelay)
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_ArcaneBeing_grow takes nothing returns nothing
	set wurst_stack_depth = 0
	call ArcaneBeing_grow("tm_ArcaneBeing, line 106")
endfunction

function group_removeUnit_1 takes group this, unit units_0 returns nothing
	call GroupRemoveUnit(this, units_0)
endfunction

function unit_remove takes unit this returns nothing
	call RemoveUnit(this)
endfunction

function ArcaneBeing_onDestroy takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call group_removeUnit_1(ArcaneBeing_allMobs, ArcaneBeing_mob[this])
	call unit_remove(ArcaneBeing_mob[this])
	call timer_release(ArcaneBeing_miscTimer[this], "when calling release in tm_ArcaneBeing, line 63")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_ArcaneBeing takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ArcaneBeing_typeId[obj] == 0 then
		call error("Double free: object of type ArcaneBeing", "when calling error in ")
	else
		set ArcaneBeing_nextFree[ArcaneBeing_firstFree] = obj
		set ArcaneBeing_firstFree = ArcaneBeing_firstFree + 1
		set ArcaneBeing_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyArcaneBeing takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call ArcaneBeing_onDestroy(this, "when calling ArcaneBeing_onDestroy in tm_ArcaneBeing, line 60")
	call dealloc_ArcaneBeing(this, "when calling ArcaneBeing in tm_ArcaneBeing, line 60")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_ArcaneBeing_destroyArcaneBeing takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ArcaneBeing_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling ArcaneBeing.destroyArcaneBeing", "when calling error in ")
		else
			call error("Called ArcaneBeing.destroyArcaneBeing on invalid object.", "when calling error in ")
		endif
	endif
	call destroyArcaneBeing(this, "when calling destroyArcaneBeing in tm_ArcaneBeing, line 10")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function ArcaneBeing_onDeathDelay takes string stackPos returns nothing
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in tm_ArcaneBeing, line 77")
	call dispatch_ArcaneBeing_destroyArcaneBeing(instance, "when calling ArcaneBeing in tm_ArcaneBeing, line 79")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_ArcaneBeing_onDeathDelay takes nothing returns nothing
	set wurst_stack_depth = 0
	call ArcaneBeing_onDeathDelay("tm_ArcaneBeing, line 98")
endfunction

function ArcaneBeing_orderAttack takes string stackPos returns nothing
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in tm_ArcaneBeing, line 102")
	call unit_unpause(ArcaneBeing_mob[instance])
	call unit_issueTargetOrder(ArcaneBeing_mob[instance], "attack", General_hunter)
	call timer_startPeriodic(ArcaneBeing_miscTimer[instance], ArcaneBeing_GROWTH_FREQ, ref_function_bridge_ArcaneBeing_grow)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_ArcaneBeing_orderAttack takes nothing returns nothing
	set wurst_stack_depth = 0
	call ArcaneBeing_orderAttack("tm_ArcaneBeing, line 144")
endfunction

function ArcaneBeing_runCooldown takes nothing returns nothing
	call timer_start(ArcaneBeing_cooldownTimer, ArcaneBeing_COOLDOWN, ref_function_bridge_ArcaneBeing_spawn)
endfunction

function alloc_ArcaneBeing takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ArcaneBeing_firstFree == 0 then
		if ArcaneBeing_maxIndex < 32768 then
			set ArcaneBeing_maxIndex = ArcaneBeing_maxIndex + 1
			set this = ArcaneBeing_maxIndex
			set ArcaneBeing_typeId[this] = 629
		else
			call error("Out of memory: Could not create ArcaneBeing.", "when calling error in ")
			set this = 0
		endif
	else
		set ArcaneBeing_firstFree = ArcaneBeing_firstFree - 1
		set this = ArcaneBeing_nextFree[ArcaneBeing_firstFree]
		set ArcaneBeing_typeId[this] = 629
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function LLEntry_onDestroy takes integer this returns nothing
endfunction

function dealloc_LLEntry takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LLEntry_typeId[obj] == 0 then
		call error("Double free: object of type LLEntry", "when calling error in ")
	else
		set LLEntry_nextFree[LLEntry_firstFree] = obj
		set LLEntry_firstFree = LLEntry_firstFree + 1
		set LLEntry_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyLLEntry takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call LLEntry_onDestroy(this)
	call dealloc_LLEntry(this, "when calling LLEntry in LinkedList, line 371")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_LLEntry_destroyLLEntry takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LLEntry_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling LLEntry.destroyLLEntry", "when calling error in ")
		else
			call error("Called LLEntry.destroyLLEntry on invalid object.", "when calling error in ")
		endif
	endif
	call destroyLLEntry(this, "when calling destroyLLEntry in LinkedList, line 371")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function LinkedList_removeEntry takes integer this, integer entry, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set LLEntry_next[LLEntry_prev[entry]] = LLEntry_next[entry]
	set LLEntry_prev[LLEntry_next[entry]] = LLEntry_prev[entry]
	call dispatch_LLEntry_destroyLLEntry(entry, "when calling LLEntry in LinkedList, line 351")
	set LinkedList_size[this] = LinkedList_size[this] - 1
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_LinkedList_LinkedList_LinkedList_removeEntry takes integer this, integer entry, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LinkedList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling LinkedList.LinkedList_LinkedList_removeEntry", "when calling error in ")
		else
			call error("Called LinkedList.LinkedList_LinkedList_removeEntry on invalid object.", "when calling error in ")
		endif
	endif
	call LinkedList_removeEntry(this, entry, "when calling removeEntry in LinkedList, line 348")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function LinkedList_pop takes integer this, string stackPos returns integer
	local integer top
	local integer result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set top = LLEntry_prev[LinkedList_dummy[this]]
	set result = 0
	if top != LinkedList_dummy[this] then
		set result = LLEntry_elem[top]
		call dispatch_LinkedList_LinkedList_LinkedList_removeEntry(this, top, "when calling removeEntry in LinkedList, line 87")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return result
endfunction

function dispatch_LinkedList_LinkedList_LinkedList_pop takes integer this, string stackPos returns integer
	local integer LinkedList_LinkedList_pop_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LinkedList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling LinkedList.LinkedList_LinkedList_pop", "when calling error in ")
		else
			call error("Called LinkedList.LinkedList_LinkedList_pop on invalid object.", "when calling error in ")
		endif
	endif
	set LinkedList_LinkedList_pop_result = LinkedList_pop(this, "when calling pop in LinkedList, line 82")
	set wurst_stack_depth = wurst_stack_depth - 1
	return LinkedList_LinkedList_pop_result
endfunction

function LinkedList_size_2 takes integer this returns integer
	return LinkedList_size[this]
endfunction

function dispatch_LinkedList_LinkedList_LinkedList_size takes integer this, string stackPos returns integer
	local integer LinkedList_LinkedList_size_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LinkedList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling LinkedList.LinkedList_LinkedList_size", "when calling error in ")
		else
			call error("Called LinkedList.LinkedList_LinkedList_size on invalid object.", "when calling error in ")
		endif
	endif
	set LinkedList_LinkedList_size_result = LinkedList_size_2(this)
	set wurst_stack_depth = wurst_stack_depth - 1
	return LinkedList_LinkedList_size_result
endfunction

function alloc_SoundInstance takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if SoundInstance_firstFree == 0 then
		if SoundInstance_maxIndex < 32768 then
			set SoundInstance_maxIndex = SoundInstance_maxIndex + 1
			set this = SoundInstance_maxIndex
			set SoundInstance_typeId[this] = 710
		else
			call error("Out of memory: Could not create SoundInstance.", "when calling error in ")
			set this = 0
		endif
	else
		set SoundInstance_firstFree = SoundInstance_firstFree - 1
		set this = SoundInstance_nextFree[SoundInstance_firstFree]
		set SoundInstance_typeId[this] = 710
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_SoundInstance takes integer this returns nothing
	local integer tempIndex = this
	set SoundInstance_pos[tempIndex] = 0.
	set SoundInstance_pos_2[tempIndex] = 0.
	set SoundInstance_pos_3[tempIndex] = 0.
	set SoundInstance_onUnit[this] = null
	set SoundInstance_p[this] = null
	set SoundInstance_s3s[this] = 0
endfunction

function new_SoundInstance takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_SoundInstance("when calling SoundInstance in SoundUtils, line 25")
	call construct_SoundInstance(this)
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function sound_setChannel takes sound this, integer channel returns nothing
	call SetSoundChannel(this, channel)
endfunction

function sound_setDuration takes sound this, integer dur returns nothing
	call SetSoundDuration(this, dur)
endfunction

function sound_setPitch takes sound this, real pitch returns nothing
	call SetSoundPitch(this, pitch)
endfunction

function sound_setVolume takes sound this, integer volume returns nothing
	call SetSoundVolume(this, volume)
endfunction

function SoundDefinition_getSound takes integer this, string stackPos returns integer
	local integer shandle
	local sound receiver
	local sound receiver_2
	local sound receiver_3
	local integer sdata
	local sound receiver_4
	local sound receiver_5
	local sound receiver_6
	local sound receiver_7
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if dispatch_LinkedList_LinkedList_LinkedList_size(SoundDefinition_soundStack[this], "when calling size in SoundUtils, line 55") > 0 then
		set shandle = dispatch_LinkedList_LinkedList_LinkedList_pop(SoundDefinition_soundStack[this], "when calling pop in SoundUtils, line 56")
		set receiver = SoundInstance_snd[shandle]
		call sound_setVolume(receiver, SoundUtils_DEFAULT_SOUND_VOLUME)
		set receiver_2 = receiver
		call sound_setPitch(receiver_2, SoundUtils_DEFAULT_SOUND_PITCH)
		set receiver_3 = receiver_2
		call sound_setChannel(receiver_3, SoundUtils_SOUND_CHANNEL)
		set wurst_stack_depth = wurst_stack_depth - 1
		set receiver = null
		set receiver_2 = null
		set receiver_3 = null
		set receiver_4 = null
		set receiver_5 = null
		set receiver_6 = null
		set receiver_7 = null
		return shandle
	else
		set sdata = new_SoundInstance("when calling new_SoundInstance in SoundUtils, line 61")
		set SoundInstance_snd[sdata] = CreateSound(SoundDefinition_file[this], SoundDefinition_looping[this], SoundDefinition_is3D[this], SoundDefinition_stopOnLeaveRange[this], SoundDefinition_fadeIn[this], SoundDefinition_fadeOut[this], SoundDefinition_eaxSetting[this])
		set SoundInstance_soundDef[sdata] = this
		set receiver_4 = SoundInstance_snd[sdata]
		call sound_setDuration(receiver_4, SoundDefinition_duration[this])
		set receiver_5 = receiver_4
		call sound_setChannel(receiver_5, SoundUtils_SOUND_CHANNEL)
		set receiver_6 = receiver_5
		call sound_setVolume(receiver_6, SoundUtils_DEFAULT_SOUND_VOLUME)
		set receiver_7 = receiver_6
		call sound_setPitch(receiver_7, SoundUtils_DEFAULT_SOUND_PITCH)
		if SoundDefinition_is3D[this] then
			call SetSoundDistances(SoundInstance_snd[sdata], SoundUtils_SOUND_MIN_DIST, SoundUtils_SOUND_MAX_DIST)
			call SetSoundDistanceCutoff(SoundInstance_snd[sdata], SoundUtils_SOUND_DIST_CUT)
			call SetSoundConeAngles(SoundInstance_snd[sdata], 0., 0., SoundUtils_DEFAULT_SOUND_VOLUME)
			call SetSoundConeOrientation(SoundInstance_snd[sdata], 0., 0., 0.)
		endif
		set wurst_stack_depth = wurst_stack_depth - 1
		set receiver = null
		set receiver_2 = null
		set receiver_3 = null
		set receiver_4 = null
		set receiver_5 = null
		set receiver_6 = null
		set receiver_7 = null
		return sdata
	endif
endfunction

function dispatch_SoundDefinition_SoundUtils_SoundDefinition_getSound takes integer this, string stackPos returns integer
	local integer SoundUtils_SoundDefinition_getSound_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if SoundDefinition_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling SoundDefinition.SoundUtils_SoundDefinition_getSound", "when calling error in ")
		else
			call error("Called SoundDefinition.SoundUtils_SoundDefinition_getSound on invalid object.", "when calling error in ")
		endif
	endif
	set SoundUtils_SoundDefinition_getSound_result = SoundDefinition_getSound(this, "when calling getSound in SoundUtils, line 54")
	set wurst_stack_depth = wurst_stack_depth - 1
	return SoundUtils_SoundDefinition_getSound_result
endfunction

function SoundDefinition_play takes integer this, integer duration, string stackPos returns integer
	local integer snd
	local timer receiver
	local timer receiver_2
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set SoundDefinition_duration[this] = duration
	set snd = dispatch_SoundDefinition_SoundUtils_SoundDefinition_getSound(this, "when calling getSound in SoundUtils, line 89")
	set receiver = getTimer("when calling getTimer in SoundUtils, line 90")
	call timer_setData(receiver, snd, "when calling setData in SoundUtils, line 91")
	set receiver_2 = receiver
	call timer_start(receiver_2, 0., ref_function_bridge_SoundDefinition_playSound)
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	return snd
endfunction

function dispatch_SoundDefinition_SoundUtils_SoundDefinition_play takes integer this, integer duration, string stackPos returns integer
	local integer SoundUtils_SoundDefinition_play_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if SoundDefinition_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling SoundDefinition.SoundUtils_SoundDefinition_play", "when calling error in ")
		else
			call error("Called SoundDefinition.SoundUtils_SoundDefinition_play on invalid object.", "when calling error in ")
		endif
	endif
	set SoundUtils_SoundDefinition_play_result = SoundDefinition_play(this, duration, "when calling play in SoundUtils, line 87")
	set wurst_stack_depth = wurst_stack_depth - 1
	return SoundUtils_SoundDefinition_play_result
endfunction

function SoundDefinition_play_2 takes integer this, string stackPos returns integer
	local integer stackTrace_tempReturn
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set stackTrace_tempReturn = dispatch_SoundDefinition_SoundUtils_SoundDefinition_play(this, SoundUtils_DEFAULT_SOUND_DURATION, "when calling play in SoundUtils, line 81")
	set wurst_stack_depth = wurst_stack_depth - 1
	return stackTrace_tempReturn
endfunction

function dispatch_SoundDefinition_SoundUtils_SoundDefinition_play_2 takes integer this, string stackPos returns integer
	local integer SoundUtils_SoundDefinition_play_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if SoundDefinition_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling SoundDefinition.SoundUtils_SoundDefinition_play", "when calling error in ")
		else
			call error("Called SoundDefinition.SoundUtils_SoundDefinition_play on invalid object.", "when calling error in ")
		endif
	endif
	set SoundUtils_SoundDefinition_play_result = SoundDefinition_play_2(this, "when calling play in SoundUtils, line 80")
	set wurst_stack_depth = wurst_stack_depth - 1
	return SoundUtils_SoundDefinition_play_result
endfunction

function real_fromDeg takes real this returns real
	return this * Angle_DEGTORAD
endfunction

function construct_ArcaneBeing takes integer this, string stackPos returns nothing
	local unit receiver
	local unit receiver_2
	local unit receiver_3
	local unit receiver_4
	local unit receiver_5
	local unit receiver_6
	local unit receiver_7
	local unit receiver_8
	local effect receiver_9
	local effect receiver_10
	local integer temp
	local integer tempIndex
	local integer tempIndex_2
	local integer tempIndex_3
	local integer tempIndex_4
	local player temp_2
	local integer temp_3
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set ArcaneBeing_growthCounter[this] = 1
	set ArcaneBeing_mob[this] = null
	set ArcaneBeing_dmg[this] = 0.
	set ArcaneBeing_scale[this] = 1.0
	set tempIndex = this
	set ArcaneBeing_pos[tempIndex] = 0.
	set ArcaneBeing_pos_2[tempIndex] = 0.
	set tempIndex_2 = this
	set ArcaneBeing_pos[tempIndex_2] = rect_randomPoint(ArcaneBeing_SPAWNAREA)
	set ArcaneBeing_pos_2[tempIndex_2] = rect_randomPoint_return_y
	set ArcaneBeing_scale[this] = ArcaneBeing_STARTSCALE
	set ArcaneBeing_dmg[this] = ArcaneBeing_STARTDMG
	set temp = this
	set temp_2 = Player(11)
	set temp_3 = ArcaneBeing_UNITID
	set tempIndex_3 = this
	set receiver = createUnit(temp_2, temp_3, ArcaneBeing_pos[tempIndex_3], ArcaneBeing_pos_2[tempIndex_3], real_fromDeg(GetRandomReal(0., 360.)))
	call unit_pause(receiver)
	set receiver_2 = receiver
	call unit_setVertexColor(receiver_2, 255, 100, 150, 75)
	set receiver_3 = receiver_2
	call unit_setScale(receiver_3, ArcaneBeing_scale[this])
	set receiver_4 = receiver_3
	call unit_setBaseDamage(receiver_4, R2I(ArcaneBeing_dmg[this] * tm_Main_bossDmgInc), 1)
	set receiver_5 = receiver_4
	call unit_setMaxHP(receiver_5, ArcaneBeing_HP, true)
	set receiver_6 = receiver_5
	call unit_setArmor(receiver_6, ArcaneBeing_ARMOR)
	set receiver_7 = receiver_6
	call unit_setAttackCooldown(receiver_7, ArcaneBeing_ATTACKSPEED, 1)
	set receiver_8 = receiver_7
	call unit_setMoveSpeed(receiver_8, ArcaneBeing_MOVESPEED)
	set ArcaneBeing_mob[temp] = receiver_8
	call group_addUnit_1(ArcaneBeing_allMobs, ArcaneBeing_mob[this])
	set tempIndex_4 = this
	set receiver_9 = addEffect("Abilities\\Spells\\Undead\\OrbOfDeath\\OrbOfDeathMissile.mdl", ArcaneBeing_pos[tempIndex_4], ArcaneBeing_pos_2[tempIndex_4])
	call effect_setScale(receiver_9, 1.5)
	set receiver_10 = receiver_9
	call effect_destr(receiver_10)
	call sound_setVolume(SoundInstance_snd[dispatch_SoundDefinition_SoundUtils_SoundDefinition_play_2(ArcaneBeing_sound_Spawn, "when calling play in tm_ArcaneBeing, line 140")], 100)
	set ArcaneBeing_miscTimer[this] = getTimer("when calling getTimer in tm_ArcaneBeing, line 142")
	call timer_setData(ArcaneBeing_miscTimer[this], this, "when calling setData in tm_ArcaneBeing, line 143")
	call timer_start(ArcaneBeing_miscTimer[this], 0.5, ref_function_bridge_ArcaneBeing_orderAttack)
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
	set receiver_6 = null
	set receiver_7 = null
	set receiver_8 = null
	set receiver_9 = null
	set receiver_10 = null
	set temp_2 = null
endfunction

function new_ArcaneBeing takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_ArcaneBeing("when calling ArcaneBeing in tm_ArcaneBeing, line 118")
	call construct_ArcaneBeing(this, "when calling construct_ArcaneBeing in tm_ArcaneBeing, line 118")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function ArcaneBeing_spawn takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call ArcaneBeing_runCooldown()
	call new_ArcaneBeing("when calling new_ArcaneBeing in tm_ArcaneBeing, line 113")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_ArcaneBeing_spawn takes nothing returns nothing
	set wurst_stack_depth = 0
	call ArcaneBeing_spawn("tm_ArcaneBeing, line 116")
endfunction

function texttag_setText takes texttag this, string text, real size returns nothing
	call SetTextTagText(this, text, size * 0.0023)
endfunction

function Bleed_addStack takes nothing returns nothing
	if Bleed_ENABLED then
		if Bleed_stacks == 0 then
			call texttag_setVisibility(Bleed_text, true)
			call timer_startPeriodic(Bleed_timer_UpdateText, 0.03, ref_function_Bleed_updateText)
			call timer_startPeriodic(Bleed_timer_Damage, Bleed_DMG_FREQ, ref_function_Bleed_dealDamage)
		endif
		set Bleed_stacks = Bleed_stacks + 1
		call texttag_setText(Bleed_text, I2S(Bleed_stacks), 16.)
		call timer_start(Bleed_timer_Duration, Bleed_DURATION, ref_function_Bleed_removeStacks)
		if Bleed_RESETFREQONSTACK then
			call timer_startPeriodic(Bleed_timer_Damage, Bleed_DMG_FREQ, ref_function_Bleed_dealDamage)
		endif
	endif
endfunction

function unit_setOwner takes unit this, player p, boolean changeColor returns nothing
	call SetUnitOwner(this, p, changeColor)
endfunction

function InstantDummyCaster_finish takes integer id returns nothing
	call unit_setOwner(InstantDummyCaster_caster, Basics_DUMMY_PLAYER, false)
	call unit_removeAbility(InstantDummyCaster_caster, id)
	call unit_setPos(InstantDummyCaster_caster, MapBounds_boundMax_x, MapBounds_boundMax_y)
endfunction

function unit_setAbilityLevel takes unit this, integer abilId, integer lvl returns nothing
	call SetUnitAbilityLevel(this, abilId, lvl)
endfunction

function unit_setFlyHeight takes unit this, real height, real rate returns nothing
	call SetUnitFlyHeight(this, height, rate)
endfunction

function unit_setX takes unit this, real x returns nothing
	call SetUnitX(this, x)
endfunction

function unit_setY takes unit this, real y returns nothing
	call SetUnitY(this, y)
endfunction

function unit_setXYZ takes unit this, real pos_x, real pos_y, real pos_z returns nothing
	local unit receiver = this
	local unit receiver_2
	local unit receiver_3
	call unit_setX(receiver, pos_x)
	set receiver_2 = receiver
	call unit_setY(receiver_2, pos_y)
	set receiver_3 = receiver_2
	call unit_setFlyHeight(receiver_3, pos_z, 0.)
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
endfunction

function inBoundsXY takes real x, real y returns boolean
	return x > MapBounds_boundMin_x and x < MapBounds_boundMax_x and y > MapBounds_boundMin_y and y < MapBounds_boundMax_y
endfunction

function vec3_inBounds takes real this_x, real this_y, real this_z returns boolean
	return inBoundsXY(this_x, this_y)
endfunction

function InstantDummyCaster_prepare takes player owner, integer id, integer lvl, real pos_x, real pos_y, real pos_z returns nothing
	local unit receiver = InstantDummyCaster_caster
	local unit receiver_2
	call unit_addAbility(receiver, id)
	set receiver_2 = receiver
	call unit_setMana(receiver_2, 1000000.)
	if vec3_inBounds(pos_x, pos_y, pos_z) then
		call unit_setXYZ(InstantDummyCaster_caster, pos_x, pos_y, pos_z)
	endif
	if lvl > 1 then
		call unit_setAbilityLevel(InstantDummyCaster_caster, id, lvl)
	endif
	if owner != null then
		call unit_setOwner(InstantDummyCaster_caster, owner, false)
	endif
	set receiver = null
	set receiver_2 = null
endfunction

function unit_issueTargetOrderById takes unit this, integer id, widget target returns boolean
	return IssueTargetOrderById(this, id, target)
endfunction

function unit_setFacing takes unit this, real a_radians returns nothing
	call SetUnitFacing(this, angle_degrees(a_radians))
endfunction

function vec2_angleTo takes real this_x, real this_y, real v_x, real v_y returns real
	return real_asAngleRadians(Atan2(v_y - this_y, v_x - this_x))
endfunction

function widget_getX takes widget this returns real
	return GetWidgetX(this)
endfunction

function widget_getY takes widget this returns real
	return GetWidgetY(this)
endfunction

function widget_getPos takes widget this returns real
	set widget_getPos_return_x = widget_getX(this)
	set widget_getPos_return_y = widget_getY(this)
	return widget_getPos_return_x
endfunction

function InstantDummyCaster_castTarget takes player owner, integer abilityId, integer lvl, integer orderId, widget target, real casterPos_x, real casterPos_y, real casterPos_z returns boolean
	local boolean b
	call InstantDummyCaster_prepare(owner, abilityId, lvl, casterPos_x, casterPos_y, casterPos_z)
	call unit_setFacing(InstantDummyCaster_caster, vec2_angleTo(unit_getPos(InstantDummyCaster_caster), unit_getPos_return_y, widget_getPos(target), widget_getPos_return_y))
	set b = unit_issueTargetOrderById(InstantDummyCaster_caster, orderId, target)
	call InstantDummyCaster_finish(abilityId)
	return b
endfunction

function vec2_toVec3 takes real this_x, real this_y returns real
	set vec2_toVec3_return_x = this_x
	set vec2_toVec3_return_y = this_y
	set vec2_toVec3_return_z = 0.
	return vec2_toVec3_return_x
endfunction

function InstantDummyCaster_castTarget_2 takes player owner, integer abilityId, integer lvl, integer orderId, widget target returns boolean
	return InstantDummyCaster_castTarget(owner, abilityId, lvl, orderId, target, vec2_toVec3(GetWidgetX(target), GetWidgetY(target)), vec2_toVec3_return_y, vec2_toVec3_return_z)
endfunction

function SoundDefinition_playOnPoint takes integer this, real target_x, real target_y, real target_z, integer duration, string stackPos returns integer
	local integer snd
	local timer receiver
	local timer receiver_2
	local integer tempIndex
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set SoundDefinition_duration[this] = duration
	set snd = dispatch_SoundDefinition_SoundUtils_SoundDefinition_getSound(this, "when calling getSound in SoundUtils, line 116")
	set tempIndex = snd
	set SoundInstance_pos[tempIndex] = target_x
	set SoundInstance_pos_2[tempIndex] = target_y
	set SoundInstance_pos_3[tempIndex] = target_z
	set receiver = getTimer("when calling getTimer in SoundUtils, line 118")
	call timer_setData(receiver, snd, "when calling setData in SoundUtils, line 119")
	set receiver_2 = receiver
	call timer_start(receiver_2, 0., ref_function_bridge_SoundDefinition_playSound_2)
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	return snd
endfunction

function dispatch_SoundDefinition_SoundUtils_SoundDefinition_playOnPoint takes integer this, real target_x, real target_y, real target_z, integer duration, string stackPos returns integer
	local integer SoundUtils_SoundDefinition_playOnPoint_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if SoundDefinition_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling SoundDefinition.SoundUtils_SoundDefinition_playOnPoint", "when calling error in ")
		else
			call error("Called SoundDefinition.SoundUtils_SoundDefinition_playOnPoint on invalid object.", "when calling error in ")
		endif
	endif
	set SoundUtils_SoundDefinition_playOnPoint_result = SoundDefinition_playOnPoint(this, target_x, target_y, target_z, duration, "when calling playOnPoint in SoundUtils, line 114")
	set wurst_stack_depth = wurst_stack_depth - 1
	return SoundUtils_SoundDefinition_playOnPoint_result
endfunction

function SoundDefinition_playOnPoint_2 takes integer this, real target_x, real target_y, real target_z, string stackPos returns integer
	local integer stackTrace_tempReturn
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set stackTrace_tempReturn = dispatch_SoundDefinition_SoundUtils_SoundDefinition_playOnPoint(this, target_x, target_y, target_z, SoundUtils_DEFAULT_SOUND_DURATION, "when calling playOnPoint in SoundUtils, line 112")
	set wurst_stack_depth = wurst_stack_depth - 1
	return stackTrace_tempReturn
endfunction

function dispatch_SoundDefinition_SoundUtils_SoundDefinition_playOnPoint_2 takes integer this, real target_x, real target_y, real target_z, string stackPos returns integer
	local integer SoundUtils_SoundDefinition_playOnPoint_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if SoundDefinition_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling SoundDefinition.SoundUtils_SoundDefinition_playOnPoint", "when calling error in ")
		else
			call error("Called SoundDefinition.SoundUtils_SoundDefinition_playOnPoint on invalid object.", "when calling error in ")
		endif
	endif
	set SoundUtils_SoundDefinition_playOnPoint_result = SoundDefinition_playOnPoint_2(this, target_x, target_y, target_z, "when calling playOnPoint in SoundUtils, line 111")
	set wurst_stack_depth = wurst_stack_depth - 1
	return SoundUtils_SoundDefinition_playOnPoint_result
endfunction

function Attack_onHit takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_SoundDefinition_SoundUtils_SoundDefinition_playOnPoint_2(Attack_hitSounds[GetRandomInt(0, 2)], unit_getPos3Real(General_hunter), unit_getPos3Real_return_y, unit_getPos3Real_return_z, "when calling playOnPoint in bear_Attack, line 82")
	set Attack_onCooldown = true
	call timer_start(Attack_timer_AttackCD, TheBear_currentAttackSpeed, ref_function_Attack_cooldownFinished)
	call UnitDamageTarget(TheBear_theBear, General_hunter, TheBear_ATTACKDMG * (1. + TheBear_damageInc), false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
	call Bleed_addStack()
	if Frenzy_isActive then
		call InstantDummyCaster_castTarget_2(Player(11), 1093677636, 1, Orders_slow, General_hunter)
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_Attack_onHit takes nothing returns nothing
	set wurst_stack_depth = 0
	call Attack_onHit("bear_Attack, line 109")
endfunction

function BossEvent_failed_soundDelay takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_SoundDefinition_SoundUtils_SoundDefinition_play_2(BossEvent_sound_Fail, "when calling play in BossEvent, line 59")
	call timer_start(BossEvent_miscTimer, 3., ref_function_bridge_BossEvent_startFade)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_BossEvent_failed_soundDelay takes nothing returns nothing
	set wurst_stack_depth = 0
	call BossEvent_failed_soundDelay("BossEvent, line 56")
endfunction

function Fade_onFadeIn takes integer this, code codeToFire returns nothing
	set Fade_codeOnFadeIn = codeToFire
endfunction

function dispatch_Fade_FadeAndFilters_Fade_onFadeIn takes integer this, code codeToFire, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Fade_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Fade.FadeAndFilters_Fade_onFadeIn", "when calling error in ")
		else
			call error("Called Fade.FadeAndFilters_Fade_onFadeIn on invalid object.", "when calling error in ")
		endif
	endif
	call Fade_onFadeIn(this, codeToFire)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Fade_onFadeOut takes integer this, code codeToFire returns nothing
	set Fade_codeOnFadeOut = codeToFire
endfunction

function dispatch_Fade_FadeAndFilters_Fade_onFadeOut takes integer this, code codeToFire, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Fade_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Fade.FadeAndFilters_Fade_onFadeOut", "when calling error in ")
		else
			call error("Called Fade.FadeAndFilters_Fade_onFadeOut on invalid object.", "when calling error in ")
		endif
	endif
	call Fade_onFadeOut(this, codeToFire)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Fade_setStartDelay takes integer this, real duration returns nothing
	set Fade_startDelay[this] = duration
endfunction

function dispatch_Fade_FadeAndFilters_Fade_setStartDelay takes integer this, real duration, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Fade_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Fade.FadeAndFilters_Fade_setStartDelay", "when calling error in ")
		else
			call error("Called Fade.FadeAndFilters_Fade_setStartDelay on invalid object.", "when calling error in ")
		endif
	endif
	call Fade_setStartDelay(this, duration)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Fade_start takes integer this, integer fadeType returns nothing
	set Fade_typeOfFade[this] = fadeType
	if fadeType == FadeAndFilters_FADEOUT or fadeType == FadeAndFilters_FADEOUTIN then
		call timer_start(Fade_t1[this], Fade_startDelay[this], ref_function_bridge_Fade_fadeOut)
	elseif fadeType == FadeAndFilters_FADEIN then
		call timer_start(Fade_t1[this], Fade_startDelay[this], ref_function_bridge_Fade_fadeIn_2)
	endif
endfunction

function dispatch_Fade_FadeAndFilters_Fade_start takes integer this, integer fadeType, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Fade_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Fade.FadeAndFilters_Fade_start", "when calling error in ")
		else
			call error("Called Fade.FadeAndFilters_Fade_start on invalid object.", "when calling error in ")
		endif
	endif
	call Fade_start(this, fadeType)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function alloc_Fade takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Fade_firstFree == 0 then
		if Fade_maxIndex < 32768 then
			set Fade_maxIndex = Fade_maxIndex + 1
			set this = Fade_maxIndex
			set Fade_typeId[this] = 666
		else
			call error("Out of memory: Could not create Fade.", "when calling error in ")
			set this = 0
		endif
	else
		set Fade_firstFree = Fade_firstFree - 1
		set this = Fade_nextFree[Fade_firstFree]
		set Fade_typeId[this] = 666
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function Fade_endColor_set takes integer instanceId, integer arrayIndex, integer value, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if arrayIndex < 0 or arrayIndex >= 3 then
		call error("Index out of Bounds", "when calling error in ")
	elseif arrayIndex <= 1 then
		if arrayIndex <= 0 then
		endif
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Fade_startColor_set takes integer instanceId, integer arrayIndex, integer value, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if arrayIndex < 0 or arrayIndex >= 3 then
		call error("Index out of Bounds", "when calling error in ")
	elseif arrayIndex <= 1 then
		if arrayIndex <= 0 then
			set Fade_startColor_0[instanceId] = value
		else
			set Fade_startColor_1[instanceId] = value
		endif
	else
		set Fade_startColor_2[instanceId] = value
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function construct_Fade takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set Fade_typeOfFade[this] = 0
	set Fade_fadeOutDuration[this] = 1.0
	set Fade_fadeInDuration[this] = 1.0
	set Fade_startDelay[this] = 0.
	set Fade_midDelay[this] = 0.
	set Fade_endDelay[this] = 0.
	set Fade_stayFadedOut[this] = false
	set Fade_cinematicMode[this] = true
	call Fade_startColor_set(this, 0, 0, "when calling startColor in FadeAndFilters, line 45")
	call Fade_startColor_set(this, 1, 0, "when calling startColor in FadeAndFilters, line 45")
	call Fade_startColor_set(this, 2, 0, "when calling startColor in FadeAndFilters, line 45")
	call Fade_endColor_set(this, 0, 0, "when calling endColor in FadeAndFilters, line 45")
	call Fade_endColor_set(this, 1, 0, "when calling endColor in FadeAndFilters, line 45")
	call Fade_endColor_set(this, 2, 0, "when calling endColor in FadeAndFilters, line 45")
	set Fade_t1[this] = getTimer("when calling getTimer in FadeAndFilters, line 47")
	call timer_setData(Fade_t1[this], this, "when calling setData in FadeAndFilters, line 48")
	set Fade_t2[this] = getTimer("when calling getTimer in FadeAndFilters, line 50")
	set Fade_stayFadedOut[this] = true
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function new_Fade takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_Fade("when calling Fade in FadeAndFilters, line 45")
	call construct_Fade(this, "when calling construct_Fade in FadeAndFilters, line 45")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function BossEvent_startFade takes string stackPos returns nothing
	local integer receiver
	local integer receiver_2
	local integer receiver_3
	local integer receiver_4
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set receiver = new_Fade("when calling new_Fade in BossEvent, line 47")
	call dispatch_Fade_FadeAndFilters_Fade_setStartDelay(receiver, 0., "when calling setStartDelay in BossEvent, line 48")
	set receiver_2 = receiver
	call dispatch_Fade_FadeAndFilters_Fade_onFadeOut(receiver_2, ref_function_BossEvent_toShop, "when calling onFadeOut in BossEvent, line 49")
	set receiver_3 = receiver_2
	call dispatch_Fade_FadeAndFilters_Fade_onFadeIn(receiver_3, ref_function_BossEvent_inShop, "when calling onFadeIn in BossEvent, line 50")
	set receiver_4 = receiver_3
	call dispatch_Fade_FadeAndFilters_Fade_start(receiver_4, FadeAndFilters_FADEOUTIN, "when calling start in BossEvent, line 51")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_BossEvent_startFade takes nothing returns nothing
	set wurst_stack_depth = 0
	call BossEvent_startFade("BossEvent, line 60")
endfunction

function bridge_BossEvent_startFade_2 takes nothing returns nothing
	set wurst_stack_depth = 0
	call BossEvent_startFade("BossEvent, line 77")
endfunction

function bridge_BossEvent_startFade_3 takes nothing returns nothing
	set wurst_stack_depth = 0
	call BossEvent_startFade("BossEvent, line 67")
endfunction

function BossEvent_win_soundDelay takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_SoundDefinition_SoundUtils_SoundDefinition_play_2(BossEvent_sound_Win, "when calling play in BossEvent, line 66")
	call timer_start(BossEvent_miscTimer, 3., ref_function_bridge_BossEvent_startFade_2)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_BossEvent_win_soundDelay takes nothing returns nothing
	set wurst_stack_depth = 0
	call BossEvent_win_soundDelay("BossEvent, line 71")
endfunction

function testFail takes string msg returns nothing
endfunction

function int_assertEquals takes integer this, integer expected returns nothing
	if this != expected then
		call testFail("Expected <" + int_toString(expected) + ">, Actual <" + int_toString(this) + ">")
	endif
endfunction

function ClosureTimers_closure_impl takes integer this returns nothing
	set ClosureTimers_x = ClosureTimers_x / 2
	call int_assertEquals(ClosureTimers_x, 250)
endfunction

function ClosureTimers_closure_impl_2 takes integer this returns nothing
	set ClosureTimers_x = ClosureTimers_x + 50
endfunction

function ClosureTimers_closure_impl_3 takes integer this returns nothing
	set ClosureTimers_x = ClosureTimers_x * 2
endfunction

function group_destr takes group this returns nothing
	call DestroyGroup(this)
endfunction

function group_enumUnitsInRect takes group this, rect rec, boolexpr filter returns nothing
	call GroupEnumUnitsInRect(this, rec, filter)
endfunction

function group_enumUnitsInRect_2 takes group this, rect rec returns nothing
	call group_enumUnitsInRect(this, rec, null)
endfunction

function trigger_addAction takes trigger this, code actionFunc returns nothing
	call TriggerAddAction(this, actionFunc)
endfunction

function trigger_registerPlayerUnitEvent takes trigger this, player whichPlayer, playerunitevent whichPlayerUnitEvent, boolexpr filter returns nothing
	call TriggerRegisterPlayerUnitEvent(this, whichPlayer, whichPlayerUnitEvent, filter)
endfunction

function registerPlayerUnitEvent takes playerunitevent p, code filter, code condition, code action returns nothing
	local integer hid = handle_getHandleId(p)
	local integer k
	local filterfunc cond_result
	local trigger temp
	local player temp_2
	local playerunitevent temp_3
	if RegisterEvents_t[hid] == null then
		set RegisterEvents_t[hid] = CreateTrigger()
		set k = bj_MAX_PLAYER_SLOTS - 1
		loop
			exitwhen k < 0
			set temp = RegisterEvents_t[hid]
			set temp_2 = Player_players[k]
			set temp_3 = p
			if filter != null then
				set cond_result = Filter(filter)
			else
				set cond_result = null
			endif
			call trigger_registerPlayerUnitEvent(temp, temp_2, temp_3, cond_result)
			set k = k - 1
		endloop
	endif
	if condition != null then
		call trigger_addCondition(RegisterEvents_t[hid], Filter(condition))
	endif
	if action != null then
		call trigger_addAction(RegisterEvents_t[hid], action)
	endif
	set cond_result = null
	set temp = null
	set temp_2 = null
	set temp_3 = null
endfunction

function registerPlayerUnitEvent_2 takes playerunitevent p, code c returns nothing
	call registerPlayerUnitEvent(p, null, c, null)
endfunction

function trigger_registerEnterRegion takes trigger this, region whichRegion, boolexpr filter returns nothing
	call TriggerRegisterEnterRegion(this, whichRegion, filter)
endfunction

function OnUnitEnterLeave_closure_impl_4 takes integer this returns nothing
	local trigger receiver = CreateTrigger()
	local group receiver_2
	local group receiver_3
	call trigger_registerEnterRegion(receiver, MapBounds_boundRegion, Filter(ref_function_OnUnitEnterLeave_closure_impl))
	call registerPlayerUnitEvent_2(EVENT_PLAYER_UNIT_ISSUED_ORDER, ref_function_OnUnitEnterLeave_closure_impl_2)
	call group_enumUnitsInRect_2(OnUnitEnterLeave_preplacedUnits, MapBounds_boundRect)
	call ForGroup(OnUnitEnterLeave_preplacedUnits, ref_function_OnUnitEnterLeave_closure_impl_3)
	set receiver_2 = OnUnitEnterLeave_preplacedUnits
	call group_clear(receiver_2)
	set receiver_3 = receiver_2
	call group_destr(receiver_3)
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
endfunction

function alloc_Closure takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ForGroupCallback_firstFree == 0 then
		if ForGroupCallback_maxIndex < 32768 then
			set ForGroupCallback_maxIndex = ForGroupCallback_maxIndex + 1
			set this = ForGroupCallback_maxIndex
			set ForGroupCallback_typeId[this] = 671
		else
			call error("Out of memory: Could not create Closure.", "when calling error in ")
			set this = 0
		endif
	else
		set ForGroupCallback_firstFree = ForGroupCallback_firstFree - 1
		set this = ForGroupCallback_nextFree[ForGroupCallback_firstFree]
		set ForGroupCallback_typeId[this] = 671
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function Preloader_closure_impl takes integer this, unit u returns nothing
	call unit_remove(u)
endfunction

function dispatch_ForGroupCallback_ClosureForGroups_ForGroupCallback_callback takes integer this, unit u, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ForGroupCallback_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling ForGroupCallback.ClosureForGroups_ForGroupCallback_callback", "when calling error in ")
		else
			call error("Called ForGroupCallback.ClosureForGroups_ForGroupCallback_callback on invalid object.", "when calling error in ")
		endif
	endif
	call Preloader_closure_impl(this, u)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function group_forEachFrom takes group this, integer cb, string stackPos returns nothing
	local unit u
	local group from
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set from = this
	loop
		exitwhen  not group_hasNext(from)
		set u = group_next(from)
		call dispatch_ForGroupCallback_ClosureForGroups_ForGroupCallback_callback(cb, u, "when calling callback in ClosureForGroups, line 31")
	endloop
	set wurst_stack_depth = wurst_stack_depth - 1
	set u = null
	set from = null
endfunction

function finishPreload takes string stackPos returns nothing
	local integer clVar
	local group temp
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call unit_remove(Preloader_dum)
	set temp = Preloader_dumg
	set clVar = alloc_Closure("when calling alloc_Closure in Preloader, line 41")
	call group_forEachFrom(temp, clVar, "when calling forEachFrom in Preloader, line 41")
	call group_destr(Preloader_dumg)
	set Preloader_dumg = null
	set wurst_stack_depth = wurst_stack_depth - 1
	set temp = null
endfunction

function Preloader_closure_impl_2 takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call finishPreload("when calling finishPreload in Preloader, line 50")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_CallbackSingle_ClosureTimers_CallbackSingle_call takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if CallbackSingle_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling CallbackSingle.ClosureTimers_CallbackSingle_call", "when calling error in ")
		else
			call error("Called CallbackSingle.ClosureTimers_CallbackSingle_call on invalid object.", "when calling error in ")
		endif
	endif
	if CallbackSingle_typeId[this] <= 643 then
		if CallbackSingle_typeId[this] <= 642 then
			if CallbackSingle_typeId[this] <= 641 then
				call ClosureTimers_closure_impl_2(this)
			else
				call ClosureTimers_closure_impl_3(this)
			endif
		else
			call ClosureTimers_closure_impl(this)
		endif
	elseif CallbackSingle_typeId[this] <= 644 then
		call OnUnitEnterLeave_closure_impl_4(this)
	else
		call Preloader_closure_impl_2(this, "when calling Preloader_closure_impl in ClosureTimers, line 65")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function CallbackSingle_onDestroy takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_release(CallbackSingle_t[this], "when calling release in ClosureTimers, line 80")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_CallbackSingle takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if CallbackSingle_typeId[obj] == 0 then
		call error("Double free: object of type CallbackSingle", "when calling error in ")
	else
		set CallbackSingle_nextFree[CallbackSingle_firstFree] = obj
		set CallbackSingle_firstFree = CallbackSingle_firstFree + 1
		set CallbackSingle_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyCallbackSingle takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call CallbackSingle_onDestroy(this, "when calling CallbackSingle_onDestroy in ClosureTimers, line 79")
	call dealloc_CallbackSingle(this, "when calling CallbackSingle in ClosureTimers, line 79")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_CallbackSingle_destroyCallbackSingle takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if CallbackSingle_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling CallbackSingle.destroyCallbackSingle", "when calling error in ")
		else
			call error("Called CallbackSingle.destroyCallbackSingle on invalid object.", "when calling error in ")
		endif
	endif
	call destroyCallbackSingle(this, "when calling destroyCallbackSingle in ClosureTimers, line 63")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function CallbackSingle_staticCallback takes string stackPos returns nothing
	local timer t
	local integer cb
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set t = GetExpiredTimer()
	set cb = timer_getData(t, "when calling getData in ClosureTimers, line 75")
	call dispatch_CallbackSingle_ClosureTimers_CallbackSingle_call(cb, "when calling call in ClosureTimers, line 76")
	call dispatch_CallbackSingle_destroyCallbackSingle(cb, "when calling CallbackSingle in ClosureTimers, line 77")
	set wurst_stack_depth = wurst_stack_depth - 1
	set t = null
endfunction

function CallbackSingle_closure_impl takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call CallbackSingle_staticCallback("when calling staticCallback in ClosureTimers, line 70")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_CallbackSingle_closure_impl takes nothing returns nothing
	set wurst_stack_depth = 0
	call CallbackSingle_closure_impl("ClosureTimers, line 68")
endfunction

function InstantDummyCaster_castTarget_3 takes player owner, integer abilityId, integer lvl, integer orderId, widget target, real casterPos_x, real casterPos_y returns boolean
	return InstantDummyCaster_castTarget(owner, abilityId, lvl, orderId, target, vec2_toVec3(casterPos_x, casterPos_y), vec2_toVec3_return_y, vec2_toVec3_return_z)
endfunction

function Charge_hitHunter takes nothing returns nothing
	local effect receiver
	local effect receiver_2
	call print("Hit Hunter!")
	set receiver = addEffect("Abilities\\Spells\\Orc\\WarStomp\\WarStompCaster.mdl", unit_getPos(General_hunter), unit_getPos_return_y)
	call effect_destr(receiver)
	set receiver_2 = widget_addEffect(General_hunter, "Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl", "chest")
	call effect_destr(receiver_2)
	call unit_setTimeScale(TheBear_theBear, 1.)
	call unit_unpause(TheBear_theBear)
	call InstantDummyCaster_castTarget_3(Player(11), 1093677637, Charge_STUN_DURATION_HUNTER, Orders_slow, General_hunter, unit_getPos(General_hunter), unit_getPos_return_y)
	call UnitDamageTarget(TheBear_theBear, General_hunter, Charge_DAMAGE, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
	call Charge_stop()
	set receiver = null
	set receiver_2 = null
endfunction

function Rock_onDestroy takes integer this returns nothing
	call effect_destr(Rock_model[this])
	call unit_remove(Rock_collisionDummy[this])
	set Rock_objects[Rock_index[this]] = 0
endfunction

function dealloc_Rock takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Rock_typeId[obj] == 0 then
		call error("Double free: object of type Rock", "when calling error in ")
	else
		set Rock_nextFree[Rock_firstFree] = obj
		set Rock_firstFree = Rock_firstFree + 1
		set Rock_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyRock takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call Rock_onDestroy(this)
	call dealloc_Rock(this, "when calling Rock in bear_Charge, line 263")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_Rock_destroyRock takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Rock_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Rock.destroyRock", "when calling error in ")
		else
			call error("Called Rock.destroyRock on invalid object.", "when calling error in ")
		endif
	endif
	call destroyRock(this, "when calling destroyRock in bear_Charge, line 238")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Charge_hitRock takes integer rock, string stackPos returns nothing
	local effect receiver
	local effect receiver_2
	local effect receiver_3
	local effect receiver_4
	local integer tempIndex
	local integer tempIndex_2
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call unit_setAnimation(TheBear_theBear, 0)
	call unit_addAbility(TheBear_theBear, 1093677638)
	call unit_pause(TheBear_theBear)
	call unit_setTimeScale(TheBear_theBear, 1.)
	set Charge_stunSFX = widget_addEffect(TheBear_theBear, "Abilities\\Spells\\Human\\Thunderclap\\ThunderclapTarget.mdl", "overhead")
	call dispatch_SoundDefinition_SoundUtils_SoundDefinition_playOnPoint_2(Charge_effectSound2, unit_getPos3Real(TheBear_theBear), unit_getPos3Real_return_y, unit_getPos3Real_return_z, "when calling playOnPoint in bear_Charge, line 154")
	set tempIndex = rock
	set receiver = addEffect("Abilities\\Spells\\Orc\\WarStomp\\WarStompCaster.mdl", Rock_pos[tempIndex], Rock_pos_2[tempIndex])
	call effect_destr(receiver)
	set tempIndex_2 = rock
	set receiver_2 = addEffect("Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl", Rock_pos[tempIndex_2], Rock_pos_2[tempIndex_2])
	call effect_setOrientation(receiver_2, 0., 0., GetRandomReal(0., 2. * Maths_PI))
	set receiver_3 = receiver_2
	call effect_setScale(receiver_3, 1.2)
	set receiver_4 = receiver_3
	call effect_destr(receiver_4)
	call timer_start(Charge_timer_Misc, Charge_STUN_DURATION_BEAR, ref_function_Charge_stop)
	call CameraSetEQNoiseForPlayer(Player(0), 4.)
	call timer_start(getTimer("when calling getTimer in bear_Charge, line 165"), 1.5, ref_function_Charge_stopShake)
	call dispatch_Rock_destroyRock(rock, "when calling Rock in bear_Charge, line 167")
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
endfunction

function vec2_length takes real this_x, real this_y returns real
	return SquareRoot(this_x * this_x + this_y * this_y)
endfunction

function vec2_op_minus takes real this_x, real this_y, real v_x, real v_y returns real
	set vec2_op_minus_return_x = this_x - v_x
	set vec2_op_minus_return_y = this_y - v_y
	return vec2_op_minus_return_x
endfunction

function vec2_op_mult takes real this_x, real this_y, real factor returns real
	set vec2_op_mult_return_x = this_x * factor
	set vec2_op_mult_return_y = this_y * factor
	return vec2_op_mult_return_x
endfunction

function vec2_normalizedPointerTo takes real this_x, real this_y, real target_x, real target_y returns real
	local real temp_diff_x = vec2_op_minus(target_x, target_y, this_x, this_y)
	local real temp_diff_y = vec2_op_minus_return_y
	local real diff_x = temp_diff_x
	local real diff_y = temp_diff_y
	local real len = vec2_length(diff_x, diff_y)
	local real temp_diff_x_2
	local real temp_diff_y_2
	local real temp_diff_x_3
	local real temp_diff_y_3
	if len > 0. then
		set temp_diff_x_2 = vec2_op_mult(diff_x, diff_y, 1. / len)
		set temp_diff_y_2 = vec2_op_mult_return_y
		set diff_x = temp_diff_x_2
		set diff_y = temp_diff_y_2
	else
		set temp_diff_x_3 = 1.
		set temp_diff_y_3 = 0.
		set diff_x = temp_diff_x_3
		set diff_y = temp_diff_y_3
	endif
	set vec2_normalizedPointerTo_return_x = diff_x
	set vec2_normalizedPointerTo_return_y = diff_y
	return vec2_normalizedPointerTo_return_x
endfunction

function vec2_op_plus takes real this_x, real this_y, real v_x, real v_y returns real
	set vec2_op_plus_return_x = this_x + v_x
	set vec2_op_plus_return_y = this_y + v_y
	return vec2_op_plus_return_x
endfunction

function vec2_moveTowards takes real this_x, real this_y, real target_x, real target_y, real dist returns real
	set vec2_moveTowards_return_x = vec2_op_plus(this_x, this_y, vec2_op_mult(vec2_normalizedPointerTo(this_x, this_y, target_x, target_y), vec2_normalizedPointerTo_return_y, dist), vec2_op_mult_return_y)
	set vec2_moveTowards_return_y = vec2_op_plus_return_y
	return vec2_moveTowards_return_x
endfunction

function Charge_move takes string stackPos returns nothing
	local real distance1
	local real directAdjust
	local real cond_result
	local real targetPos_x
	local real targetPos_y
	local real bearPos_x
	local real bearPos_y
	local boolean rockIsInRange
	local integer i
	local real temp_targetPos_x
	local real temp_targetPos_y
	local real temp_bearPos_x
	local real temp_bearPos_y
	local real temp_Charge_targetPoint_x
	local real temp_Charge_targetPoint_y
	local integer tempIndex
	local real temp
	local real temp_2
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set distance1 = vec2_distanceTo(Charge_targetPoint_x, Charge_targetPoint_y, unit_getPos(General_hunter), unit_getPos_return_y)
	if distance1 > Charge_MOVE_ADJUSTPERSEC then
		set cond_result = Charge_MOVE_ADJUSTPERSEC
	else
		set cond_result = distance1
	endif
	set directAdjust = cond_result
	set temp_targetPos_x = vec2_moveTowards(unit_getPos(TheBear_theBear), unit_getPos_return_y, Charge_targetPoint_x, Charge_targetPoint_y, Charge_MOVE_RANGEPERUPDATE)
	set temp_targetPos_y = vec2_moveTowards_return_y
	set targetPos_x = temp_targetPos_x
	set targetPos_y = temp_targetPos_y
	set temp_bearPos_x = unit_getPos(TheBear_theBear)
	set temp_bearPos_y = unit_getPos_return_y
	set bearPos_x = temp_bearPos_x
	set bearPos_y = temp_bearPos_y
	set rockIsInRange = false
	set temp_Charge_targetPoint_x = vec2_moveTowards(Charge_targetPoint_x, Charge_targetPoint_y, unit_getPos(General_hunter), unit_getPos_return_y, directAdjust)
	set temp_Charge_targetPoint_y = vec2_moveTowards_return_y
	set Charge_targetPoint_x = temp_Charge_targetPoint_x
	set Charge_targetPoint_y = temp_Charge_targetPoint_y
	call unit_setFacing(TheBear_theBear, vec2_angleTo(unit_getPos(TheBear_theBear), unit_getPos_return_y, unit_getPos(General_hunter), unit_getPos_return_y))
	set i = 0
	loop
		exitwhen i > 3
		set temp = bearPos_x
		set temp_2 = bearPos_y
		set tempIndex = Rock_objects[i]
		if vec2_distanceTo(temp, temp_2, Rock_pos[tempIndex], Rock_pos_2[tempIndex]) < Charge_HITRANGE and Rock_objects[i] != 0 then
			set rockIsInRange = true
			call timer_pause(Charge_timer_Misc)
			call timer_pause(Charge_timer_Animation)
			call timer_pause(Charge_timer_SFX)
			call Charge_hitRock(Rock_objects[i], "when calling hitRock in bear_Charge, line 127")
		endif
		set i = i + 1
	endloop
	if rockIsInRange == false and vec2_distanceTo(bearPos_x, bearPos_y, unit_getPos(General_hunter), unit_getPos_return_y) < Charge_HITRANGE then
		call timer_pause(Charge_timer_Misc)
		call timer_pause(Charge_timer_Animation)
		call timer_pause(Charge_timer_SFX)
		call Charge_hitHunter()
	elseif rockIsInRange == false then
		call unit_setX(TheBear_theBear, targetPos_x)
		call unit_setY(TheBear_theBear, targetPos_y)
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_Charge_move takes nothing returns nothing
	set wurst_stack_depth = 0
	call Charge_move("bear_Charge, line 91")
endfunction

function Charge_startDelay1 takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call unit_setTimeScale(TheBear_theBear, 0.75)
	call unit_setAnimation(TheBear_theBear, 5)
	call unit_queueAnimation(TheBear_theBear, "stand")
	call addEffect("Abilities\\Spells\\NightElf\\BattleRoar\\RoarCaster.mdl", unit_getPos(TheBear_theBear), unit_getPos_return_y)
	call dispatch_SoundDefinition_SoundUtils_SoundDefinition_play_2(Charge_effectSound1, "when calling play in bear_Charge, line 77")
	call timer_start(Charge_timer_Misc, 2.5, ref_function_Charge_startDelay2)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_Charge_startDelay1 takes nothing returns nothing
	set wurst_stack_depth = 0
	call Charge_startDelay1("bear_Charge, line 69")
endfunction

function ClickableObject_sfxOnClick_get takes integer index1, integer index2, string stackPos returns integer
	local integer returnVal
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if index2 < 0 or index2 >= 3 then
		call error("Index out of Bounds", "when calling error in ")
	elseif index2 <= 1 then
		if index2 <= 0 then
			set returnVal = ClickableObject_sfxOnClick_0[index1]
		else
			set returnVal = ClickableObject_sfxOnClick_1[index1]
		endif
	else
		set returnVal = ClickableObject_sfxOnClick_2[index1]
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return returnVal
endfunction

function ExecutableEffect_color_get takes integer index1, integer index2, string stackPos returns integer
	local integer returnVal
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if index2 < 0 or index2 >= 4 then
		call error("Index out of Bounds", "when calling error in ")
	elseif index2 <= 1 then
		if index2 <= 0 then
			set returnVal = ExecutableEffect_color_0[index1]
		else
			set returnVal = ExecutableEffect_color_1[index1]
		endif
	elseif index2 <= 2 then
		set returnVal = ExecutableEffect_color_2[index1]
	else
		set returnVal = ExecutableEffect_color_3[index1]
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return returnVal
endfunction

function effect_setAlpha takes effect this, integer alpha returns nothing
	call BlzSetSpecialEffectAlpha(this, alpha)
endfunction

function effect_setColor takes effect this, integer r, integer g, integer b returns nothing
	call BlzSetSpecialEffectColor(this, r, g, b)
endfunction

function ExecutableEffect_start takes integer this, string stackPos returns nothing
	local effect receiver
	local effect receiver_2
	local integer temp
	local integer tempIndex
	local string temp_2
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ExecutableEffect_sfx[this] != null then
		call effect_destr(ExecutableEffect_sfx[this])
	endif
	set temp = this
	set temp_2 = ExecutableEffect_sfxModel[this]
	set tempIndex = this
	set receiver = addEffect_2(temp_2, ExecutableEffect_pos[tempIndex], ExecutableEffect_pos_2[tempIndex], ExecutableEffect_pos_3[tempIndex])
	call effect_setColor(receiver, ExecutableEffect_color_get(this, 0, "when calling color in ExecutableEffect, line 50"), ExecutableEffect_color_get(this, 1, "when calling color in ExecutableEffect, line 50"), ExecutableEffect_color_get(this, 2, "when calling color in ExecutableEffect, line 50"))
	set receiver_2 = receiver
	call effect_setAlpha(receiver_2, ExecutableEffect_color_get(this, 3, "when calling color in ExecutableEffect, line 51"))
	set ExecutableEffect_sfx[temp] = receiver_2
	if ExecutableEffect_destroyOnStart[this] then
		call effect_destr(ExecutableEffect_sfx[this])
	else
		if ExecutableEffect_t[this] != null then
			call timer_pause(ExecutableEffect_t[this])
		else
			set ExecutableEffect_t[this] = getTimer("when calling getTimer in ExecutableEffect, line 59")
			call timer_setData(ExecutableEffect_t[this], ExecutableEffect_index[this], "when calling setData in ExecutableEffect, line 60")
		endif
		call timer_start(ExecutableEffect_t[this], ExecutableEffect_DURATION, ref_function_bridge_ExecutableEffect_stop)
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
endfunction

function dispatch_ExecutableEffect_ExecutableEffect_ExecutableEffect_start takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ExecutableEffect_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling ExecutableEffect.ExecutableEffect_ExecutableEffect_start", "when calling error in ")
		else
			call error("Called ExecutableEffect.ExecutableEffect_ExecutableEffect_start on invalid object.", "when calling error in ")
		endif
	endif
	call ExecutableEffect_start(this, "when calling start in ExecutableEffect, line 44")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function ClickableObject_onClickGeneric takes integer this, string stackPos returns nothing
	local integer i
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ClickableObject_soundOnClick[this] != 0 then
		call dispatch_SoundDefinition_SoundUtils_SoundDefinition_play_2(ClickableObject_soundOnClick[this], "when calling play in BossInformation, line 60")
	endif
	set i = 0
	loop
		exitwhen i > 2
		if ClickableObject_sfxOnClick_get(this, i, "when calling sfxOnClick in BossInformation, line 63") != 0 then
			call dispatch_ExecutableEffect_ExecutableEffect_ExecutableEffect_start(ClickableObject_sfxOnClick_get(this, i, "when calling sfxOnClick in BossInformation, line 64"), "when calling start in BossInformation, line 64")
		endif
		set i = i + 1
	endloop
	if ClickableObject_objectAnimation[this] != "" then
		call unit_setAnimation_2(ClickableObject_object[this], ClickableObject_objectAnimation[this])
		call unit_queueAnimation(ClickableObject_object[this], "stand")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_ClickableObject_BossInformation_ClickableObject_onClickGeneric takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ClickableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling ClickableObject.BossInformation_ClickableObject_onClickGeneric", "when calling error in ")
		else
			call error("Called ClickableObject.BossInformation_ClickableObject_onClickGeneric on invalid object.", "when calling error in ")
		endif
	endif
	call ClickableObject_onClickGeneric(this, "when calling onClickGeneric in BossInformation, line 58")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Mechanic_onClick takes integer unitIndex, string stackPos returns nothing
	local integer instance
	local integer receiver
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = Mechanic_instances[unitIndex]
	call print("onClick Mech runs")
	call ClearTextMessages()
	set receiver = instance
	call dispatch_ClickableObject_BossInformation_ClickableObject_onClickGeneric(receiver, "when calling onClickGeneric in BossInformation, line 171")
	call print("|cff009999" + ClickableObject_name[instance] + "|r")
	call print("Spell")
	if Mechanic_castBy[instance] != "" then
		call print(Mechanic_castBy[instance])
	endif
	call print(ClickableObject_description[instance])
	if ClickableObject_objectAnimation[instance] != "" then
		call unit_setAnimation_2(ClickableObject_object[instance], ClickableObject_objectAnimation[instance])
		call unit_queueAnimation(ClickableObject_object[instance], "stand")
	endif
	if ClickableObject_unitSfxAnimation[instance] != "" then
		call unit_setAnimation_2(ClickableObject_unitSfx[instance], ClickableObject_unitSfxAnimation[instance])
		call unit_queueAnimation(ClickableObject_unitSfx[instance], "stand")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function real_toString takes real this, integer precision returns string
	return R2SW(this, precision, precision)
endfunction

function UnitObject_onClick takes integer unitIndex, string stackPos returns nothing
	local integer inst
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set inst = UnitObject_instances[unitIndex]
	call dispatch_ClickableObject_BossInformation_ClickableObject_onClickGeneric(inst, "when calling onClickGeneric in BossInformation, line 218")
	call ClearTextMessages()
	call print("|cff009999" + ClickableObject_name[inst] + "|r")
	if ClickableObject_objType[inst] != "" then
		call print("|cffAFEEEE" + ClickableObject_objType[inst] + "|r")
	endif
	if UnitObject_attackspeed[inst] > -1. then
		call print("|cffAFEEEEAttack speed:|r " + real_toString(UnitObject_attackspeed[inst], 1))
	endif
	if UnitObject_movespeed[inst] > -1. then
		call print("|cffAFEEEEMovement speed:|r " + int_toString(R2I(UnitObject_movespeed[inst])))
	endif
	call print("\n" + ClickableObject_description[inst])
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function ClickableObject_registerClick takes string stackPos returns boolean
	local integer unitIndex
	local integer classId
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set unitIndex = unit_getIndex(GetTriggerUnit())
	set classId = ClickableObject_classIds[unitIndex]
	if classId == Mechanic_classId then
		call Mechanic_onClick(unitIndex, "when calling onClick in BossInformation, line 77")
	elseif classId == UnitObject_classId then
		call UnitObject_onClick(unitIndex, "when calling onClick in BossInformation, line 79")
	elseif classId == 3 then
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return false
endfunction

function bridge_ClickableObject_registerClick takes nothing returns boolean
	set wurst_stack_depth = 0
	return ClickableObject_registerClick("BossInformation, line 11")
endfunction

function currentCallback takes nothing returns integer
	return ClosureForGroups_tempCallbacks[ClosureForGroups_tempCallbacksCount - 1]
endfunction

function ClosureForGroups_closure_impl takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_ForGroupCallback_ClosureForGroups_ForGroupCallback_callback(currentCallback(), GetFilterUnit(), "when calling callback in ClosureForGroups, line 12")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_ClosureForGroups_closure_impl takes nothing returns nothing
	set wurst_stack_depth = 0
	call ClosureForGroups_closure_impl("ClosureForGroups, line 12")
endfunction

function ArrayQueue_units_set takes integer instanceId, integer arrayIndex, unit value, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if arrayIndex < 0 or arrayIndex >= 6 then
		call error("Index out of Bounds", "when calling error in ")
	elseif arrayIndex <= 2 then
		if arrayIndex <= 1 then
			if arrayIndex <= 0 then
			endif
		endif
	elseif arrayIndex <= 4 then
		if arrayIndex <= 3 then
		endif
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function ArrayQueue_enqueue takes integer this, unit u, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ArrayQueue_size[this] < DummyRecycler_SAVED_UNITS_PER_ANGLE then
		set ArrayQueue_size[this] = ArrayQueue_size[this] + 1
		set ArrayQueue_rp[this] = ModuloInteger(ArrayQueue_rp[this] + 1, DummyRecycler_SAVED_UNITS_PER_ANGLE)
		call ArrayQueue_units_set(this, ArrayQueue_rp[this], u, "when calling units in DummyRecycler, line 58")
	else
		call error("Queue Overflow", "when calling error in DummyRecycler, line 60")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_ArrayQueue_DummyRecycler_ArrayQueue_enqueue takes integer this, unit u, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ArrayQueue_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling ArrayQueue.DummyRecycler_ArrayQueue_enqueue", "when calling error in ")
		else
			call error("Called ArrayQueue.DummyRecycler_ArrayQueue_enqueue on invalid object.", "when calling error in ")
		endif
	endif
	call ArrayQueue_enqueue(this, u, "when calling enqueue in DummyRecycler, line 54")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function real_asAngleDegrees takes real this returns real
	return this * Angle_DEGTORAD
endfunction

function unit_setVertexColor_2 takes unit this, integer col_red, integer col_green, integer col_blue, integer col_alpha returns nothing
	call SetUnitVertexColor(this, col_red, col_green, col_blue, col_alpha)
endfunction

function unit_setXY takes unit this, real pos_x, real pos_y returns nothing
	local unit receiver = this
	local unit receiver_2
	call unit_setX(receiver, pos_x)
	set receiver_2 = receiver
	call unit_setY(receiver_2, pos_y)
	set receiver = null
	set receiver_2 = null
endfunction

function DummyRecycler_recycle takes unit u, string stackPos returns nothing
	local integer smallestQueue
	local integer i
	local integer temp
	local unit receiver
	local unit receiver_2
	local unit receiver_3
	local unit receiver_4
	local unit receiver_5
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set smallestQueue = 0
	set i = 1
	set temp = DummyRecycler_DIFFERENT_ANGLES - 1
	loop
		exitwhen i > temp
		if ArrayQueue_size[DummyRecycler_angleQueues[smallestQueue]] > ArrayQueue_size[DummyRecycler_angleQueues[i]] then
			set smallestQueue = i
		endif
		set i = i + 1
	endloop
	if ArrayQueue_size[DummyRecycler_angleQueues[smallestQueue]] >= DummyRecycler_SAVED_UNITS_PER_ANGLE then
		call unit_remove(u)
	else
		call dispatch_ArrayQueue_DummyRecycler_ArrayQueue_enqueue(DummyRecycler_angleQueues[smallestQueue], u, "when calling enqueue in DummyRecycler, line 38")
		set receiver = u
		call unit_setXY(receiver, MapBounds_boundMax_x, MapBounds_boundMax_y)
		set receiver_2 = receiver
		call unit_pause(receiver_2)
		set receiver_3 = receiver_2
		call unit_setFacing(receiver_3, real_asAngleDegrees(smallestQueue * DummyRecycler_ANGLE_DEGREE))
		set receiver_4 = receiver_3
		call unit_setScale(receiver_4, 1.)
		set receiver_5 = receiver_4
		call unit_setVertexColor_2(receiver_5, Colors_COLOR_WHITE_red, Colors_COLOR_WHITE_green, Colors_COLOR_WHITE_blue, Colors_COLOR_WHITE_alpha)
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
endfunction

function DelayNode_onDestroy takes integer this returns nothing
endfunction

function dealloc_DelayNode takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if DelayNode_typeId[obj] == 0 then
		call error("Double free: object of type DelayNode", "when calling error in ")
	else
		set DelayNode_firstFree = DelayNode_firstFree + 1
		set DelayNode_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyDelayNode takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call DelayNode_onDestroy(this)
	call dealloc_DelayNode(this, "when calling DelayNode in DummyRecycler, line 71")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_DelayNode_destroyDelayNode takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if DelayNode_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling DelayNode.destroyDelayNode", "when calling error in ")
		else
			call error("Called DelayNode.destroyDelayNode on invalid object.", "when calling error in ")
		endif
	endif
	call destroyDelayNode(this, "when calling destroyDelayNode in DummyRecycler, line 71")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function timer_getElapsed takes timer this returns real
	return TimerGetElapsed(this)
endfunction

function getElapsedGameTime takes nothing returns real
	return timer_getElapsed(GameTimer_gameTimer)
endfunction

function DelayNode_recycle takes string stackPos returns nothing
	local integer tmp
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call DummyRecycler_recycle(DelayNode_u[DelayNode_first], "when calling recycle in DummyRecycler, line 120")
	set tmp = DelayNode_first
	if DelayNode_next[DelayNode_first] == 0 then
		set DelayNode_first = 0
	else
		set DelayNode_first = DelayNode_next[DelayNode_first]
		call timer_start(DelayNode_t, DelayNode_delayTime[DelayNode_first] - getElapsedGameTime(), ref_function_bridge_DelayNode_recycle)
	endif
	call dispatch_DelayNode_destroyDelayNode(tmp, "when calling DelayNode in DummyRecycler, line 129")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_DelayNode_recycle takes nothing returns nothing
	set wurst_stack_depth = 0
	call DelayNode_recycle("DummyRecycler, line 127")
endfunction

function LinkedList_remove takes integer this, integer elem, string stackPos returns nothing
	local integer entry
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set entry = LLEntry_next[LinkedList_dummy[this]]
	loop
		exitwhen  not (entry != LinkedList_dummy[this])
		if LLEntry_elem[entry] == elem then
			call dispatch_LinkedList_LinkedList_LinkedList_removeEntry(this, entry, "when calling removeEntry in LinkedList, line 117")
			set wurst_stack_depth = wurst_stack_depth - 1
			return
		endif
		set entry = LLEntry_next[entry]
	endloop
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_LinkedList_LinkedList_LinkedList_remove takes integer this, integer elem, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LinkedList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling LinkedList.LinkedList_LinkedList_remove", "when calling error in ")
		else
			call error("Called LinkedList.LinkedList_LinkedList_remove on invalid object.", "when calling error in ")
		endif
	endif
	call LinkedList_remove(this, elem, "when calling remove in LinkedList, line 113")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function DiseaseCloud_onDestroy takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call debugMsg("Destroying Cloud!")
	call dispatch_LinkedList_LinkedList_LinkedList_remove(DiseaseCloud_instances, this, "when calling remove in DiseaseCloud, line 234")
	call unit_remove(DiseaseCloud_dummy[this])
	call effect_destr(DiseaseCloud_sfx[this])
	call timer_release(DiseaseCloud_timer_Damage[this], "when calling release in DiseaseCloud, line 237")
	call timer_release(DiseaseCloud_timer_Duration[this], "when calling release in DiseaseCloud, line 238")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_DiseaseCloud takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if DiseaseCloud_typeId[obj] == 0 then
		call error("Double free: object of type DiseaseCloud", "when calling error in ")
	else
		set DiseaseCloud_nextFree[DiseaseCloud_firstFree] = obj
		set DiseaseCloud_firstFree = DiseaseCloud_firstFree + 1
		set DiseaseCloud_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyDiseaseCloud takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call DiseaseCloud_onDestroy(this, "when calling DiseaseCloud_onDestroy in DiseaseCloud, line 232")
	call dealloc_DiseaseCloud(this, "when calling DiseaseCloud in DiseaseCloud, line 232")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_DiseaseCloud_destroyDiseaseCloud takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if DiseaseCloud_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling DiseaseCloud.destroyDiseaseCloud", "when calling error in ")
		else
			call error("Called DiseaseCloud.destroyDiseaseCloud on invalid object.", "when calling error in ")
		endif
	endif
	call destroyDiseaseCloud(this, "when calling destroyDiseaseCloud in DiseaseCloud, line 214")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function DiseaseCloud_closure_impl takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_DiseaseCloud_destroyDiseaseCloud(timer_getData(GetExpiredTimer(), "when calling getData in DiseaseCloud, line 271"), "when calling DiseaseCloud in DiseaseCloud, line 271")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_DiseaseCloud_closure_impl takes nothing returns nothing
	set wurst_stack_depth = 0
	call DiseaseCloud_closure_impl("DiseaseCloud, line 269")
endfunction

function group_close takes group this returns nothing
	call group_clear(this)
	call group_destr(this)
endfunction

function group_enumUnitsInRange_2 takes group this, real pos_x, real pos_y, real range returns nothing
	call GroupEnumUnitsInRange(this, pos_x, pos_y, range, null)
endfunction

function group_iterator takes group this returns group
	set Group_iterGroup = CreateGroup()
	call ForGroup(this, ref_function_Group_closure_impl_3)
	return Group_iterGroup
endfunction

function player_isAllyOf takes player this, player p returns boolean
	return IsPlayerAlly(this, p)
endfunction

function unit_addToHitTargets takes unit this, string stackPos returns nothing
	local integer index
	local timer receiver
	local timer receiver_2
	local integer cond_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if  not DiseaseCloud_STACKDAMAGE then
		set index = 0
		loop
			exitwhen  not (DiseaseCloud_hitTargets[index] != null)
			set index = index + 1
		endloop
		set DiseaseCloud_hitTargets[index] = this
		set receiver = getTimer("when calling getTimer in DiseaseCloud, line 337")
		call timer_setData(receiver, index, "when calling setData in DiseaseCloud, line 338")
		set receiver_2 = receiver
		call timer_start(receiver_2, DiseaseCloud_DAMAGEFREQ - 0.01, ref_function_bridge_removeFromHitTargets)
		if index > DiseaseCloud_hitTargets_HighestIndex then
			set cond_result = index
		else
			set cond_result = DiseaseCloud_hitTargets_HighestIndex
		endif
		set DiseaseCloud_hitTargets_HighestIndex = cond_result
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
endfunction

function unit_isHit takes unit this returns boolean
	local integer index
	local integer temp
	if DiseaseCloud_STACKDAMAGE then
		return false
	endif
	set index = 0
	set temp = DiseaseCloud_hitTargets_HighestIndex
	loop
		exitwhen index > temp
		if DiseaseCloud_hitTargets[index] == this then
			return true
		endif
		set index = index + 1
	endloop
	return false
endfunction

function damage takes unit source, real damage_2, real range, string stackPos returns nothing
	local group targets
	local group iterator
	local unit u
	local unit u_2
	local group from
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set targets = Group_ENUM_GROUP
	call group_enumUnitsInRange_2(targets, unit_getPos(source), unit_getPos_return_y, range)
	set iterator = group_iterator(targets)
	loop
		exitwhen  not group_hasNext(iterator)
		set u = group_next(iterator)
		if u == source or ( not unit_isAlive(u)) or player_isAllyOf(unit_getOwner(u), unit_getOwner(source)) or unit_isHit(u) then
			call group_removeUnit_1(targets, u)
		endif
	endloop
	call group_close(iterator)
	set from = targets
	loop
		exitwhen  not group_hasNext(from)
		set u_2 = group_next(from)
		call unit_damageTarget(source, u_2, damage_2)
		call unit_addToHitTargets(u_2, "when calling addToHitTargets in DiseaseCloud, line 313")
	endloop
	set wurst_stack_depth = wurst_stack_depth - 1
	set targets = null
	set iterator = null
	set u = null
	set u_2 = null
	set from = null
endfunction

function DiseaseCloud_orderDamage takes string stackPos returns nothing
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in DiseaseCloud, line 241")
	call print("On orderDamage: " + unit_getName(DiseaseCloud_dummy[instance]))
	call damage(DiseaseCloud_dummy[instance], DiseaseCloud_damage[instance], DiseaseCloud_range[instance], "when calling damage in DiseaseCloud, line 243")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_DiseaseCloud_orderDamage takes nothing returns nothing
	set wurst_stack_depth = 0
	call DiseaseCloud_orderDamage("DiseaseCloud, line 273")
endfunction

function Disease_orderDamage takes string stackPos returns nothing
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in DiseaseCloud, line 150")
	call damage(Disease_unitWithAbility[instance], Disease_diseaseDamage[instance], Disease_diseaseRange[instance], "when calling damage in DiseaseCloud, line 151")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_Disease_orderDamage takes nothing returns nothing
	set wurst_stack_depth = 0
	call Disease_orderDamage("DiseaseCloud, line 106")
endfunction

function Disease_deactivateTriggers takes nothing returns nothing
	call trigger_disable(Disease_trg_UnitDies)
	call trigger_disable(Disease_trg_UnitIsRemoved)
endfunction

function Table_removeInt takes integer this, integer parentKey returns nothing
	call RemoveSavedInteger(Table_ht, this, parentKey)
endfunction

function dispatch_Table_Table_Table_removeInt takes integer this, integer parentKey, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Table.Table_Table_removeInt", "when calling error in ")
		else
			call error("Called Table.Table_Table_removeInt on invalid object.", "when calling error in ")
		endif
	endif
	call Table_removeInt(this, parentKey)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function HashMap_remove takes integer this, integer key, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_Table_Table_Table_removeInt(this, key, "when calling removeInt in HashMap, line 24")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function HashList_decrOccurences takes integer this, integer elem, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call hashtable_saveInt(HashList_occurences, this, elem, dispatch_HashList_HashList_HashList_count(this, elem, "when calling count in HashList, line 17") - 1)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_HashList_HashList_HashList_decrOccurences takes integer this, integer elem, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if HashList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling HashList.HashList_HashList_decrOccurences", "when calling error in ")
		else
			call error("Called HashList.HashList_HashList_decrOccurences on invalid object.", "when calling error in ")
		endif
	endif
	call HashList_decrOccurences(this, elem, "when calling decrOccurences in HashList, line 16")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function HashList_removeAt takes integer this, integer index, string stackPos returns nothing
	local integer i
	local integer temp
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_HashList_HashList_HashList_decrOccurences(this, hashtable_loadInt(HashList_ht, this, index), "when calling decrOccurences in HashList, line 49")
	set i = index
	set temp = HashList_size[this]
	loop
		exitwhen i > temp
		call hashtable_saveInt(HashList_ht, this, i, hashtable_loadInt(HashList_ht, this, i + 1))
		set i = i + 1
	endloop
	set HashList_size[this] = HashList_size[this] - 1
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_HashList_HashList_HashList_removeAt takes integer this, integer index, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if HashList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling HashList.HashList_HashList_removeAt", "when calling error in ")
		else
			call error("Called HashList.HashList_HashList_removeAt on invalid object.", "when calling error in ")
		endif
	endif
	call HashList_removeAt(this, index, "when calling removeAt in HashList, line 48")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function HashList_remove takes integer this, integer t, string stackPos returns nothing
	local integer i
	local integer temp
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set i = 0
	set temp = HashList_size[this] - 1
	loop
		exitwhen i > temp
		if t == hashtable_loadInt(HashList_ht, this, i) then
			call dispatch_HashList_HashList_HashList_removeAt(this, i, "when calling removeAt in HashList, line 58")
			exitwhen true
		endif
		set i = i + 1
	endloop
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_HashList_HashList_HashList_remove takes integer this, integer t, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if HashList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling HashList.HashList_HashList_remove", "when calling error in ")
		else
			call error("Called HashList.HashList_HashList_remove on invalid object.", "when calling error in ")
		endif
	endif
	call HashList_remove(this, t, "when calling remove in HashList, line 55")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function IterableMap_remove takes integer this, integer key, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call HashMap_remove(this, key, "when calling remove in HashMap, line 48")
	if dispatch_IterableMap_HashMap_IterableMap_hasKey(this, key, "when calling hasKey in HashMap, line 49") then
		call dispatch_HashList_HashList_HashList_remove(IterableMap_keys[this], key, "when calling remove in HashMap, line 50")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_IterableMap_HashMap_IterableMap_remove takes integer this, integer key, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling IterableMap.HashMap_IterableMap_remove", "when calling error in ")
		else
			call error("Called IterableMap.HashMap_IterableMap_remove on invalid object.", "when calling error in ")
		endif
	endif
	call IterableMap_remove(this, key, "when calling remove in HashMap, line 47")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Disease_onDestroy takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set Disease_instanceCount = Disease_instanceCount - 1
	if Disease_instanceCount == 0 then
		call Disease_deactivateTriggers()
	endif
	call dispatch_IterableMap_HashMap_IterableMap_remove(Disease_instances, unitToIndex(Disease_unitWithAbility[this]), "when calling remove in DiseaseCloud, line 117")
	call effect_destr(Disease_sfx[this])
	call timer_release(Disease_timer_Damage[this], "when calling release in DiseaseCloud, line 119")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_Disease takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Disease_typeId[obj] == 0 then
		call error("Double free: object of type Disease", "when calling error in ")
	else
		set Disease_nextFree[Disease_firstFree] = obj
		set Disease_firstFree = Disease_firstFree + 1
		set Disease_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyDisease takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call Disease_onDestroy(this, "when calling Disease_onDestroy in DiseaseCloud, line 111")
	call dealloc_Disease(this, "when calling Disease in DiseaseCloud, line 111")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_Disease_destroyDisease takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Disease_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Disease.destroyDisease", "when calling error in ")
		else
			call error("Called Disease.destroyDisease on invalid object.", "when calling error in ")
		endif
	endif
	call destroyDisease(this, "when calling destroyDisease in DiseaseCloud, line 68")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function HashMap_get takes integer this, integer key, string stackPos returns integer
	local integer stackTrace_tempReturn
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set stackTrace_tempReturn = dispatch_Table_Table_Table_loadInt(this, key, "when calling loadInt in HashMap, line 20")
	set wurst_stack_depth = wurst_stack_depth - 1
	return stackTrace_tempReturn
endfunction

function dispatch_HashMap_HashMap_HashMap_get takes integer this, integer key, string stackPos returns integer
	local integer HashMap_HashMap_get_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling HashMap.HashMap_HashMap_get", "when calling error in ")
		else
			call error("Called HashMap.HashMap_HashMap_get on invalid object.", "when calling error in ")
		endif
	endif
	set HashMap_HashMap_get_result = HashMap_get(this, key, "when calling get in HashMap, line 19")
	set wurst_stack_depth = wurst_stack_depth - 1
	return HashMap_HashMap_get_result
endfunction

function Table_hasInt takes integer this, integer parentKey returns boolean
	return hashtable_hasInt(Table_ht, this, parentKey)
endfunction

function dispatch_Table_Table_Table_hasInt takes integer this, integer parentKey, string stackPos returns boolean
	local boolean Table_Table_hasInt_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Table.Table_Table_hasInt", "when calling error in ")
		else
			call error("Called Table.Table_Table_hasInt on invalid object.", "when calling error in ")
		endif
	endif
	set Table_Table_hasInt_result = Table_hasInt(this, parentKey)
	set wurst_stack_depth = wurst_stack_depth - 1
	return Table_Table_hasInt_result
endfunction

function HashMap_has takes integer this, integer key, string stackPos returns boolean
	local boolean stackTrace_tempReturn
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set stackTrace_tempReturn = dispatch_Table_Table_Table_hasInt(this, key, "when calling hasInt in HashMap, line 12")
	set wurst_stack_depth = wurst_stack_depth - 1
	return stackTrace_tempReturn
endfunction

function dispatch_HashMap_HashMap_HashMap_has takes integer this, integer key, string stackPos returns boolean
	local boolean HashMap_HashMap_has_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling HashMap.HashMap_HashMap_has", "when calling error in ")
		else
			call error("Called HashMap.HashMap_HashMap_has on invalid object.", "when calling error in ")
		endif
	endif
	set HashMap_HashMap_has_result = HashMap_has(this, key, "when calling has in HashMap, line 11")
	set wurst_stack_depth = wurst_stack_depth - 1
	return HashMap_HashMap_has_result
endfunction

function alloc_DiseaseCloud takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if DiseaseCloud_firstFree == 0 then
		if DiseaseCloud_maxIndex < 32768 then
			set DiseaseCloud_maxIndex = DiseaseCloud_maxIndex + 1
			set this = DiseaseCloud_maxIndex
			set DiseaseCloud_typeId[this] = 659
		else
			call error("Out of memory: Could not create DiseaseCloud.", "when calling error in ")
			set this = 0
		endif
	else
		set DiseaseCloud_firstFree = DiseaseCloud_firstFree - 1
		set this = DiseaseCloud_nextFree[DiseaseCloud_firstFree]
		set DiseaseCloud_typeId[this] = 659
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function DiseaseCloud_initialize takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call debugMsg("Initializing DiseaseCloud class")
	if  not DiseaseCloud_hasBeenInitialized then
		set DiseaseCloud_hasBeenInitialized = true
		set DiseaseCloud_instances = new_LinkedList("when calling new_LinkedList in DiseaseCloud, line 292")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function player_getId takes player this returns integer
	return GetPlayerId(this)
endfunction

function real_toString_2 takes real this returns string
	return R2S(this)
endfunction

function vec2_toString takes real this_x, real this_y returns string
	return "Vector2 [" + real_toString_2(this_x) + ", " + real_toString_2(this_y) + "]"
endfunction

function construct_DiseaseCloud takes integer this, player owner, real pos_x, real pos_y, real damage_2, real duration, real range, string stackPos returns nothing
	local timer receiver
	local timer receiver_2
	local timer receiver_3
	local timer receiver_4
	local integer temp
	local integer tempIndex
	local integer tempIndex_2
	local player temp_2
	local integer temp_3
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call debugMsg("Creating new cloud! Stats: " + "Player" + int_toString(player_getId(owner)) + ", Position:" + vec2_toString(pos_x, pos_y) + ", Damage: " + real_toString_2(damage_2) + ", Duration: " + real_toString_2(duration) + ", Range: " + real_toString_2(range))
	if  not DiseaseCloud_hasBeenInitialized then
		call DiseaseCloud_initialize("when calling initialize in DiseaseCloud, line 254")
	endif
	call dispatch_LinkedList_LinkedList_LinkedList_add_1(DiseaseCloud_instances, this, "when calling add in DiseaseCloud, line 256")
	set tempIndex = this
	set DiseaseCloud_pos[tempIndex] = pos_x
	set DiseaseCloud_pos_2[tempIndex] = pos_y
	set DiseaseCloud_damage[this] = damage_2
	set DiseaseCloud_range[this] = range
	set DiseaseCloud_sfx[this] = addEffect_2(DiseaseCloud_SFX, vec2_withTerrainZ(pos_x, pos_y, 100.), vec2_withTerrainZ_return_y, vec2_withTerrainZ_return_z)
	set temp_3 = this
	set temp_2 = owner
	set tempIndex_2 = this
	set DiseaseCloud_dummy[temp_3] = createUnit(temp_2, 1747988532, DiseaseCloud_pos[tempIndex_2], DiseaseCloud_pos_2[tempIndex_2], 0.)
	set DiseaseCloud_timer_Duration[this] = getTimer("when calling getTimer in DiseaseCloud, line 267")
	if duration > 0. then
		set receiver = DiseaseCloud_timer_Duration[this]
		call timer_setData(receiver, this, "when calling setData in DiseaseCloud, line 270")
		set receiver_2 = receiver
		call timer_start(receiver_2, duration + 0.1, ref_function_bridge_DiseaseCloud_closure_impl)
	endif
	set temp = this
	set receiver_3 = getTimer("when calling getTimer in DiseaseCloud, line 273")
	call timer_setData(receiver_3, this, "when calling setData in DiseaseCloud, line 274")
	set receiver_4 = receiver_3
	call timer_startPeriodic(receiver_4, DiseaseCloud_DAMAGEFREQ, ref_function_bridge_DiseaseCloud_orderDamage)
	set DiseaseCloud_timer_Damage[temp] = receiver_4
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set temp_2 = null
endfunction

function new_DiseaseCloud takes player owner, real pos_x, real pos_y, real damage_2, real duration, real range, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_DiseaseCloud("when calling DiseaseCloud in DiseaseCloud, line 246")
	call construct_DiseaseCloud(this, owner, pos_x, pos_y, damage_2, duration, range, "when calling construct_DiseaseCloud in DiseaseCloud, line 246")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function Disease_unitDies takes string stackPos returns boolean
	local unit dyingUnit
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set dyingUnit = GetDyingUnit()
	if dispatch_HashMap_HashMap_HashMap_has(Disease_instances, unitToIndex(dyingUnit), "when calling has in DiseaseCloud, line 201") then
		call debugMsg("Disease: Unit in instance died!")
		set instance = dispatch_HashMap_HashMap_HashMap_get(Disease_instances, unitToIndex(dyingUnit), "when calling get in DiseaseCloud, line 203")
		if Disease_leaveCloud[instance] then
			call new_DiseaseCloud(unit_getOwner(Disease_unitWithAbility[instance]), unit_getPos(Disease_unitWithAbility[instance]), unit_getPos_return_y, Disease_cloudDamage[instance], Disease_cloudDuration[instance], Disease_cloudRange[instance], "when calling new_DiseaseCloud in DiseaseCloud, line 205")
		endif
		call dispatch_Disease_destroyDisease(instance, "when calling Disease in DiseaseCloud, line 206")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set dyingUnit = null
	return false
endfunction

function bridge_Disease_unitDies takes nothing returns boolean
	set wurst_stack_depth = 0
	return Disease_unitDies("DiseaseCloud, line 180")
endfunction

function Disease_unitIsRemoved takes string stackPos returns boolean
	local unit removedUnit
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set removedUnit = GetLeavingUnit()
	if dispatch_HashMap_HashMap_HashMap_has(Disease_instances, unitToIndex(removedUnit), "when calling has in DiseaseCloud, line 192") then
		call dispatch_Disease_destroyDisease(dispatch_HashMap_HashMap_HashMap_get(Disease_instances, unitToIndex(removedUnit), "when calling get in DiseaseCloud, line 193"), "when calling Disease in DiseaseCloud, line 193")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set removedUnit = null
	return false
endfunction

function bridge_Disease_unitIsRemoved takes nothing returns boolean
	set wurst_stack_depth = 0
	return Disease_unitIsRemoved("DiseaseCloud, line 185")
endfunction

function DynamicSound_TimedLoop_stopTimedLoopAndDestroy takes integer this returns nothing
	set DynamicSound_TimedLoop_mode[this] = 3
endfunction

function dispatch_DynamicSound_SoundUtils_DynamicSound_TimedLoop_stopTimedLoopAndDestroy takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if DynamicSound_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling DynamicSound.SoundUtils_DynamicSound_TimedLoop_stopTimedLoopAndDestroy", "when calling error in ")
		else
			call error("Called DynamicSound.SoundUtils_DynamicSound_TimedLoop_stopTimedLoopAndDestroy on invalid object.", "when calling error in ")
		endif
	endif
	call DynamicSound_TimedLoop_stopTimedLoopAndDestroy(this)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function sound_isPlaying takes sound this returns boolean
	return GetSoundIsPlaying(this)
endfunction

function DynamicSound_setAbsolutePitch takes integer this, real pitch, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if DynamicSound_soundData[this] == 0 then
		call error("Must play sound before setting pitch", "when calling error in SoundUtils, line 178")
	endif
	if  not sound_isPlaying(SoundInstance_snd[DynamicSound_soundData[this]]) then
		if pitch == 1. then
			call sound_setPitch(SoundInstance_snd[DynamicSound_soundData[this]], 1.0001)
		else
			call sound_setPitch(SoundInstance_snd[DynamicSound_soundData[this]], pitch)
		endif
	else
		call sound_setPitch(SoundInstance_snd[DynamicSound_soundData[this]], 1. / DynamicSound_currentPitch[this])
		call sound_setPitch(SoundInstance_snd[DynamicSound_soundData[this]], pitch)
	endif
	set DynamicSound_currentPitch[this] = pitch
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_DynamicSound_SoundUtils_DynamicSound_setAbsolutePitch takes integer this, real pitch, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if DynamicSound_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling DynamicSound.SoundUtils_DynamicSound_setAbsolutePitch", "when calling error in ")
		else
			call error("Called DynamicSound.SoundUtils_DynamicSound_setAbsolutePitch on invalid object.", "when calling error in ")
		endif
	endif
	call DynamicSound_setAbsolutePitch(this, pitch, "when calling setAbsolutePitch in SoundUtils, line 176")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function real_lerp takes real this, real target, real alpha returns real
	return this * (1.0 - alpha) + target * alpha
endfunction

function DynamicSound_onTimedLoop takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if DynamicSound_soundData[this] != 0 then
		call dispatch_DynamicSound_SoundUtils_DynamicSound_setAbsolutePitch(this, real_lerp(DynamicSound_currentPitch[this], DynamicSound_targetPitch[this], DynamicSound_smoothness[this]), "when calling setAbsolutePitch in SoundUtils, line 191")
		set DynamicSound_minimumLength[this] = DynamicSound_minimumLength[this] - Basics_ANIMATION_PERIOD
		if ( not sound_isPlaying(SoundInstance_snd[DynamicSound_soundData[this]])) and DynamicSound_minimumLength[this] <= 0. then
			call dispatch_DynamicSound_SoundUtils_DynamicSound_TimedLoop_stopTimedLoopAndDestroy(this, "when calling stopTimedLoopAndDestroy in SoundUtils, line 194")
		endif
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_DynamicSound_SoundUtils_DynamicSound_onTimedLoop takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if DynamicSound_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling DynamicSound.SoundUtils_DynamicSound_onTimedLoop", "when calling error in ")
		else
			call error("Called DynamicSound.SoundUtils_DynamicSound_onTimedLoop on invalid object.", "when calling error in ")
		endif
	endif
	call DynamicSound_onTimedLoop(this, "when calling onTimedLoop in SoundUtils, line 189")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Log_warn takes string msg returns nothing
	call printLog(Player_localPlayer, 3, msg)
endfunction

function DynamicSound_TimedLoop_stopTimedLoop takes integer this returns nothing
	set DynamicSound_TimedLoop_mode[this] = 2
endfunction

function dispatch_DynamicSound_SoundUtils_DynamicSound_TimedLoop_stopTimedLoop takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if DynamicSound_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling DynamicSound.SoundUtils_DynamicSound_TimedLoop_stopTimedLoop", "when calling error in ")
		else
			call error("Called DynamicSound.SoundUtils_DynamicSound_TimedLoop_stopTimedLoop on invalid object.", "when calling error in ")
		endif
	endif
	call DynamicSound_TimedLoop_stopTimedLoop(this)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function sound_stop takes sound this, boolean killWhenDone, boolean fadeOut returns nothing
	call StopSound(this, killWhenDone, fadeOut)
endfunction

function DynamicSound_onDestroy takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_DynamicSound_SoundUtils_DynamicSound_setAbsolutePitch(this, 1., "when calling setAbsolutePitch in SoundUtils, line 197")
	call sound_stop(SoundInstance_snd[DynamicSound_soundData[this]], false, false)
	call dispatch_DynamicSound_SoundUtils_DynamicSound_setAbsolutePitch(this, 1., "when calling setAbsolutePitch in SoundUtils, line 199")
	if DynamicSound_TimedLoop_mode[this] != 1 then
		call dispatch_DynamicSound_SoundUtils_DynamicSound_TimedLoop_stopTimedLoop(this, "when calling stopTimedLoop in TimerUtils, line 113")
		call Log_warn("Destroyed Instance using TimedLoop before stopping the Loop")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_DynamicSound takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if DynamicSound_typeId[obj] == 0 then
		call error("Double free: object of type DynamicSound", "when calling error in ")
	else
		set DynamicSound_firstFree = DynamicSound_firstFree + 1
		set DynamicSound_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyDynamicSound takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call DynamicSound_onDestroy(this, "when calling DynamicSound_onDestroy in SoundUtils, line 196")
	call dealloc_DynamicSound(this, "when calling DynamicSound in SoundUtils, line 196")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_DynamicSound_destroyDynamicSound takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if DynamicSound_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling DynamicSound.destroyDynamicSound", "when calling error in ")
		else
			call error("Called DynamicSound.destroyDynamicSound on invalid object.", "when calling error in ")
		endif
	endif
	call destroyDynamicSound(this, "when calling destroyDynamicSound in SoundUtils, line 154")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function DynamicSound_TimedLoop_onExpire takes string stackPos returns boolean
	local integer i
	local integer t
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set i = DynamicSound_TimedLoop_instanceCount - 1
	loop
		exitwhen  not (i >= 0)
		set t = DynamicSound_TimedLoop_instances[i]
		call dispatch_DynamicSound_SoundUtils_DynamicSound_onTimedLoop(t, "when calling onTimedLoop in TimerUtils, line 78")
		if DynamicSound_TimedLoop_mode[t] != 0 then
			set DynamicSound_TimedLoop_instanceCount = DynamicSound_TimedLoop_instanceCount - 1
			set DynamicSound_TimedLoop_instances[i] = DynamicSound_TimedLoop_instances[DynamicSound_TimedLoop_instanceCount]
			if DynamicSound_TimedLoop_mode[t] == 3 then
				set DynamicSound_TimedLoop_mode[t] = 1
				call dispatch_DynamicSound_destroyDynamicSound(t, "when calling DynamicSound in TimerUtils, line 84")
			else
				set DynamicSound_TimedLoop_mode[t] = 1
			endif
		endif
		set i = i - 1
	endloop
	if DynamicSound_TimedLoop_instanceCount == 0 then
		call TriggerRemoveCondition(TimerUtils_timedLoopTrig, DynamicSound_TimedLoop_triggerCond)
		set DynamicSound_TimedLoop_triggerCond = null
		set TimerUtils_conditionCount = TimerUtils_conditionCount - 1
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return false
endfunction

function bridge_DynamicSound_TimedLoop_onExpire takes nothing returns boolean
	set wurst_stack_depth = 0
	return DynamicSound_TimedLoop_onExpire("TimerUtils, line 67")
endfunction

function EffectDuration_onDestroy takes integer this, string stackPos returns nothing
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in TimedEffect, line 15")
	call effect_destr(EffectDuration_SFX[instance])
	call timer_release(EffectDuration_t[instance], "when calling release in TimedEffect, line 17")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_EffectDuration takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if EffectDuration_typeId[obj] == 0 then
		call error("Double free: object of type EffectDuration", "when calling error in ")
	else
		set EffectDuration_nextFree[EffectDuration_firstFree] = obj
		set EffectDuration_firstFree = EffectDuration_firstFree + 1
		set EffectDuration_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyEffectDuration takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call EffectDuration_onDestroy(this, "when calling EffectDuration_onDestroy in TimedEffect, line 14")
	call dealloc_EffectDuration(this, "when calling EffectDuration in TimedEffect, line 14")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_EffectDuration_destroyEffectDuration takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if EffectDuration_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling EffectDuration.destroyEffectDuration", "when calling error in ")
		else
			call error("Called EffectDuration.destroyEffectDuration on invalid object.", "when calling error in ")
		endif
	endif
	call destroyEffectDuration(this, "when calling destroyEffectDuration in TimedEffect, line 8")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function EffectDuration_destr takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_EffectDuration_destroyEffectDuration(timer_getData(GetExpiredTimer(), "when calling getData in TimedEffect, line 20"), "when calling EffectDuration in TimedEffect, line 20")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_EffectDuration_destr takes nothing returns nothing
	set wurst_stack_depth = 0
	call EffectDuration_destr("TimedEffect, line 26")
endfunction

function ExecutableEffect_stop takes string stackPos returns nothing
	local integer inst
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set inst = ExecutableEffect_instances[timer_getData(GetExpiredTimer(), "when calling getData in ExecutableEffect, line 40")]
	call effect_destr(ExecutableEffect_sfx[inst])
	call timer_release(ExecutableEffect_t[inst], "when calling release in ExecutableEffect, line 42")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_ExecutableEffect_stop takes nothing returns nothing
	set wurst_stack_depth = 0
	call ExecutableEffect_stop("ExecutableEffect, line 61")
endfunction

function Fade_OnFadeIn takes string stackPos returns nothing
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in FadeAndFilters, line 69")
	if Fade_codeOnFadeIn != null then
		call timer_start(Fade_t2[instance], Fade_endDelay[instance], Fade_codeOnFadeIn)
	endif
	call DisplayCineFilter(false)
	call ShowInterface(true, 0.01)
	call EnableUserControl(true)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_Fade_OnFadeIn takes nothing returns nothing
	set wurst_stack_depth = 0
	call Fade_OnFadeIn("FadeAndFilters, line 94")
endfunction

function Fade_OnFadeOut takes string stackPos returns nothing
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in FadeAndFilters, line 98")
	if Fade_codeOnFadeOut != null then
		call timer_start(Fade_t2[instance], 0., Fade_codeOnFadeOut)
	endif
	if Fade_typeOfFade[instance] == FadeAndFilters_FADEOUTIN then
		call timer_start(Fade_t1[instance], Fade_midDelay[instance], ref_function_bridge_Fade_fadeIn)
	else
		call timer_start(Fade_t1[instance], Fade_midDelay[instance], ref_function_bridge_Fade_endFade)
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_Fade_OnFadeOut takes nothing returns nothing
	set wurst_stack_depth = 0
	call Fade_OnFadeOut("FadeAndFilters, line 123")
endfunction

function Fade_onDestroy takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_release(Fade_t1[this], "when calling release in FadeAndFilters, line 40")
	call timer_release(Fade_t2[this], "when calling release in FadeAndFilters, line 41")
	set Fade_codeOnFadeIn = null
	set Fade_codeOnFadeOut = null
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_Fade takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Fade_typeId[obj] == 0 then
		call error("Double free: object of type Fade", "when calling error in ")
	else
		set Fade_nextFree[Fade_firstFree] = obj
		set Fade_firstFree = Fade_firstFree + 1
		set Fade_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyFade takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call Fade_onDestroy(this, "when calling Fade_onDestroy in FadeAndFilters, line 39")
	call dealloc_Fade(this, "when calling Fade in FadeAndFilters, line 39")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_Fade_destroyFade takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Fade_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Fade.destroyFade", "when calling error in ")
		else
			call error("Called Fade.destroyFade on invalid object.", "when calling error in ")
		endif
	endif
	call destroyFade(this, "when calling destroyFade in FadeAndFilters, line 11")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Fade_endFade takes string stackPos returns nothing
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in FadeAndFilters, line 56")
	if  not Fade_stayFadedOut[instance] then
		call DisplayCineFilter(false)
		call ShowInterface(true, 0.01)
		call EnableUserControl(true)
	endif
	call dispatch_Fade_destroyFade(instance, "when calling Fade in FadeAndFilters, line 63")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_Fade_endFade takes nothing returns nothing
	set wurst_stack_depth = 0
	call Fade_endFade("FadeAndFilters, line 107")
endfunction

function Fade_startColor_get takes integer index1, integer index2, string stackPos returns integer
	local integer returnVal
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if index2 < 0 or index2 >= 3 then
		call error("Index out of Bounds", "when calling error in ")
	elseif index2 <= 1 then
		if index2 <= 0 then
			set returnVal = Fade_startColor_0[index1]
		else
			set returnVal = Fade_startColor_1[index1]
		endif
	else
		set returnVal = Fade_startColor_2[index1]
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return returnVal
endfunction

function Fade_fadeIn takes string stackPos returns nothing
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in FadeAndFilters, line 81")
	if Fade_cinematicMode[instance] then
		call ShowInterface(Fade_cinematicMode[instance], 0.01)
		call EnableUserControl(Fade_cinematicMode[instance])
	endif
	call SetCineFilterTexture("ReplaceableTextures\\CameraMasks\\White_mask.blp")
	call SetCineFilterBlendMode(BLEND_MODE_BLEND)
	call SetCineFilterStartColor(Fade_startColor_get(instance, 0, "when calling startColor in FadeAndFilters, line 89"), Fade_startColor_get(instance, 1, "when calling startColor in FadeAndFilters, line 89"), Fade_startColor_get(instance, 2, "when calling startColor in FadeAndFilters, line 89"), 255)
	call SetCineFilterEndColor(Fade_startColor_get(instance, 0, "when calling startColor in FadeAndFilters, line 90"), Fade_startColor_get(instance, 1, "when calling startColor in FadeAndFilters, line 90"), Fade_startColor_get(instance, 2, "when calling startColor in FadeAndFilters, line 90"), 0)
	call SetCineFilterDuration(Fade_fadeInDuration[instance])
	call DisplayCineFilter(true)
	call timer_start(Fade_t1[instance], Fade_fadeInDuration[instance], ref_function_bridge_Fade_OnFadeIn)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_Fade_fadeIn takes nothing returns nothing
	set wurst_stack_depth = 0
	call Fade_fadeIn("FadeAndFilters, line 105")
endfunction

function bridge_Fade_fadeIn_2 takes nothing returns nothing
	set wurst_stack_depth = 0
	call Fade_fadeIn("FadeAndFilters, line 134")
endfunction

function Fade_fadeOut takes string stackPos returns nothing
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in FadeAndFilters, line 110")
	if Fade_cinematicMode[instance] then
		call ShowInterface(Fade_cinematicMode[instance], 0.01)
		call EnableUserControl(Fade_cinematicMode[instance])
	endif
	call SetCineFilterTexture("ReplaceableTextures\\CameraMasks\\White_mask.blp")
	call SetCineFilterBlendMode(BLEND_MODE_BLEND)
	call SetCineFilterStartColor(Fade_startColor_get(instance, 0, "when calling startColor in FadeAndFilters, line 118"), Fade_startColor_get(instance, 1, "when calling startColor in FadeAndFilters, line 118"), Fade_startColor_get(instance, 2, "when calling startColor in FadeAndFilters, line 118"), 0)
	call SetCineFilterEndColor(Fade_startColor_get(instance, 0, "when calling startColor in FadeAndFilters, line 119"), Fade_startColor_get(instance, 1, "when calling startColor in FadeAndFilters, line 119"), Fade_startColor_get(instance, 2, "when calling startColor in FadeAndFilters, line 119"), 255)
	call SetCineFilterDuration(Fade_fadeOutDuration[instance])
	call DisplayCineFilter(true)
	call timer_start(Fade_t1[instance], Fade_fadeOutDuration[instance], ref_function_bridge_Fade_OnFadeOut)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_Fade_fadeOut takes nothing returns nothing
	set wurst_stack_depth = 0
	call Fade_fadeOut("FadeAndFilters, line 131")
endfunction

function FlameStrike_sfx_set takes integer instanceId, integer arrayIndex, effect value, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if arrayIndex < 0 or arrayIndex >= 16 then
		call error("Index out of Bounds", "when calling error in ")
	elseif arrayIndex <= 7 then
		if arrayIndex <= 3 then
			if arrayIndex <= 1 then
				if arrayIndex <= 0 then
					set FlameStrike_sfx_0[instanceId] = value
				else
					set FlameStrike_sfx_1[instanceId] = value
				endif
			elseif arrayIndex <= 2 then
				set FlameStrike_sfx_2[instanceId] = value
			else
				set FlameStrike_sfx_3[instanceId] = value
			endif
		elseif arrayIndex <= 5 then
			if arrayIndex <= 4 then
				set FlameStrike_sfx_4[instanceId] = value
			else
				set FlameStrike_sfx_5[instanceId] = value
			endif
		elseif arrayIndex <= 6 then
			set FlameStrike_sfx_6[instanceId] = value
		else
			set FlameStrike_sfx_7[instanceId] = value
		endif
	elseif arrayIndex <= 11 then
		if arrayIndex <= 9 then
			if arrayIndex <= 8 then
				set FlameStrike_sfx_8[instanceId] = value
			else
				set FlameStrike_sfx_9[instanceId] = value
			endif
		elseif arrayIndex <= 10 then
			set FlameStrike_sfx_10[instanceId] = value
		else
			set FlameStrike_sfx_11[instanceId] = value
		endif
	elseif arrayIndex <= 13 then
		if arrayIndex <= 12 then
			set FlameStrike_sfx_12[instanceId] = value
		else
			set FlameStrike_sfx_13[instanceId] = value
		endif
	elseif arrayIndex <= 14 then
		set FlameStrike_sfx_14[instanceId] = value
	else
		set FlameStrike_sfx_15[instanceId] = value
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function vec2_polarOffset takes real this_x, real this_y, real ang_radians, real dist returns real
	set vec2_polarOffset_return_x = vec2_op_plus(this_x, this_y, angle_toVec(ang_radians, dist), angle_toVec_return_y)
	set vec2_polarOffset_return_y = vec2_op_plus_return_y
	return vec2_polarOffset_return_x
endfunction

function FlameStrike_initialDamage takes string stackPos returns nothing
	local integer instance
	local effect receiver
	local integer i
	local real randomAngleOffset
	local effect receiver_2
	local integer i_2
	local real randomAngleOffset_2
	local effect receiver_3
	local integer temp
	local integer temp_2
	local integer temp_3
	local integer temp_4
	local integer temp_5
	local integer tempIndex
	local integer tempIndex_2
	local integer tempIndex_3
	local integer tempIndex_4
	local real temp_6
	local real temp_7
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in tm_FlameStrike, line 126")
	if FlameStrike_initDmgCount[instance] < FlameStrike_INITDMG_REPEATS then
		set FlameStrike_initDmgCount[instance] = FlameStrike_initDmgCount[instance] + 1
		set temp_6 = unit_getPos(General_hunter)
		set temp_7 = unit_getPos_return_y
		set tempIndex = instance
		if vec2_distanceTo(temp_6, temp_7, FlameStrike_pos[tempIndex], FlameStrike_pos_2[tempIndex]) <= FlameStrike_AOERANGE then
			call print("damage")
			call unit_damageTarget(tm_Main_theMonster, General_hero, FlameStrike_INITDMG_AMOUNT * tm_Main_bossDmgInc)
			call widget_addEffect(General_hunter, "Abilities\\Spells\\Items\\AIfb\\AIfbSpecialArt.mdl", "chest")
		endif
	else
		call timer_pause(FlameStrike_miscTimer[instance])
		call print("making effects")
		set temp = instance
		set tempIndex_2 = instance
		set receiver = addEffect("Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl", FlameStrike_pos[tempIndex_2], FlameStrike_pos_2[tempIndex_2])
		call effect_setScale(receiver, GetRandomReal(3., 3.5))
		call FlameStrike_sfx_set(temp, 2, receiver, "when calling sfx in tm_FlameStrike, line 140")
		set i = 0
		loop
			exitwhen i > 8
			set randomAngleOffset = GetRandomReal(0., 40.)
			set temp_2 = instance
			set temp_3 = i + 3
			set tempIndex_3 = instance
			set receiver_2 = addEffect("Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl", vec2_polarOffset(FlameStrike_pos[tempIndex_3], FlameStrike_pos_2[tempIndex_3], real_fromDeg(randomAngleOffset + 40 * i + GetRandomReal(-4., 4.)), GetRandomReal(FlameStrike_AOERANGE * 0.75, FlameStrike_AOERANGE * 0.75)), vec2_polarOffset_return_y)
			call effect_setScale(receiver_2, GetRandomReal(2.5, 3.5))
			call FlameStrike_sfx_set(temp_2, temp_3, receiver_2, "when calling sfx in tm_FlameStrike, line 147")
			set i = i + 1
		endloop
		set i_2 = 0
		loop
			exitwhen i_2 > 3
			set randomAngleOffset_2 = GetRandomReal(0., 90.)
			set temp_4 = instance
			set temp_5 = i_2 + 12
			set tempIndex_4 = instance
			set receiver_3 = addEffect("Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeEmbers.mdl", vec2_polarOffset(FlameStrike_pos[tempIndex_4], FlameStrike_pos_2[tempIndex_4], real_fromDeg(randomAngleOffset_2 + 90 * i_2 + GetRandomReal( - 8.0, 8.0)), GetRandomReal(FlameStrike_AOERANGE * 0.50, FlameStrike_AOERANGE * 0.55)), vec2_polarOffset_return_y)
			call effect_setScale(receiver_3, GetRandomReal(2.5, 3.5))
			call FlameStrike_sfx_set(temp_4, temp_5, receiver_3, "when calling sfx in tm_FlameStrike, line 152")
			set i_2 = i_2 + 1
		endloop
		set FlameStrike_readyToBurn[instance] = true
		if  not FlameStrike_burnIsActive then
			set FlameStrike_burnIsActive = true
			call timer_startPeriodic(FlameStrike_burnTimer, FlameStrike_BURN_CHECK_FREQ, ref_function_FlameStrike_burnDmg)
		endif
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
endfunction

function bridge_FlameStrike_initialDamage takes nothing returns nothing
	set wurst_stack_depth = 0
	call FlameStrike_initialDamage("tm_FlameStrike, line 173")
endfunction

function FlameStrike_sfx_get takes integer index1, integer index2, string stackPos returns effect
	local effect returnVal
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if index2 < 0 or index2 >= 16 then
		call error("Index out of Bounds", "when calling error in ")
	elseif index2 <= 7 then
		if index2 <= 3 then
			if index2 <= 1 then
				if index2 <= 0 then
					set returnVal = FlameStrike_sfx_0[index1]
				else
					set returnVal = FlameStrike_sfx_1[index1]
				endif
			elseif index2 <= 2 then
				set returnVal = FlameStrike_sfx_2[index1]
			else
				set returnVal = FlameStrike_sfx_3[index1]
			endif
		elseif index2 <= 5 then
			if index2 <= 4 then
				set returnVal = FlameStrike_sfx_4[index1]
			else
				set returnVal = FlameStrike_sfx_5[index1]
			endif
		elseif index2 <= 6 then
			set returnVal = FlameStrike_sfx_6[index1]
		else
			set returnVal = FlameStrike_sfx_7[index1]
		endif
	elseif index2 <= 11 then
		if index2 <= 9 then
			if index2 <= 8 then
				set returnVal = FlameStrike_sfx_8[index1]
			else
				set returnVal = FlameStrike_sfx_9[index1]
			endif
		elseif index2 <= 10 then
			set returnVal = FlameStrike_sfx_10[index1]
		else
			set returnVal = FlameStrike_sfx_11[index1]
		endif
	elseif index2 <= 13 then
		if index2 <= 12 then
			set returnVal = FlameStrike_sfx_12[index1]
		else
			set returnVal = FlameStrike_sfx_13[index1]
		endif
	elseif index2 <= 14 then
		set returnVal = FlameStrike_sfx_14[index1]
	else
		set returnVal = FlameStrike_sfx_15[index1]
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set FlameStrike_sfx_gettempReturn = returnVal
	set returnVal = null
	return FlameStrike_sfx_gettempReturn
endfunction

function FlameStrike_initialEffect takes string stackPos returns nothing
	local integer instance
	local effect receiver
	local integer temp
	local integer tempIndex
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in tm_FlameStrike, line 167")
	call effect_destr(FlameStrike_sfx_get(instance, 0, "when calling sfx in tm_FlameStrike, line 169"))
	set temp = instance
	set tempIndex = instance
	set receiver = addEffect("Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl", FlameStrike_pos[tempIndex], FlameStrike_pos_2[tempIndex])
	call effect_setScale(receiver, 1. * (FlameStrike_AOERANGE / 100.))
	call FlameStrike_sfx_set(temp, 1, receiver, "when calling sfx in tm_FlameStrike, line 170")
	call timer_startPeriodic(FlameStrike_miscTimer[instance], FlameStrike_INITDMG_FREQ, ref_function_bridge_FlameStrike_initialDamage)
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
endfunction

function bridge_FlameStrike_initialEffect takes nothing returns nothing
	set wurst_stack_depth = 0
	call FlameStrike_initialEffect("tm_FlameStrike, line 205")
endfunction

function FlameStrike_runCooldown takes nothing returns nothing
	call timer_start(FlameStrike_cooldownTimer, FlameStrike_COOLDOWN, ref_function_FlameStrike_setReady)
endfunction

function alloc_FlameStrike takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if FlameStrike_firstFree == 0 then
		if FlameStrike_maxIndex < 32768 then
			set FlameStrike_maxIndex = FlameStrike_maxIndex + 1
			set this = FlameStrike_maxIndex
			set FlameStrike_typeId[this] = 667
		else
			call error("Out of memory: Could not create FlameStrike.", "when calling error in ")
			set this = 0
		endif
	else
		set FlameStrike_firstFree = FlameStrike_firstFree - 1
		set this = FlameStrike_nextFree[FlameStrike_firstFree]
		set FlameStrike_typeId[this] = 667
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_FlameStrike takes integer this, string stackPos returns nothing
	local effect receiver
	local integer temp
	local integer tempIndex
	local integer tempIndex_2
	local integer tempIndex_3
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set FlameStrike_readyToBurn[this] = false
	set tempIndex = this
	set FlameStrike_pos[tempIndex] = 0.
	set FlameStrike_pos_2[tempIndex] = 0.
	set FlameStrike_initDmgCount[this] = 0
	set FlameStrike_instances[FlameStrike_instanceCounter] = this
	set FlameStrike_instanceCounter = FlameStrike_instanceCounter + 1
	set tempIndex_2 = this
	set FlameStrike_pos[tempIndex_2] = unit_getPos(GetSpellTargetUnit())
	set FlameStrike_pos_2[tempIndex_2] = unit_getPos_return_y
	set FlameStrike_initDmgCount[this] = 0
	set temp = this
	set tempIndex_3 = this
	set receiver = addEffect("Abilities\\Spells\\Human\\FlameStrike\\FlameStrikeTarget.mdl", FlameStrike_pos[tempIndex_3], FlameStrike_pos_2[tempIndex_3])
	call effect_setScale(receiver, 0.5)
	call FlameStrike_sfx_set(temp, 0, receiver, "when calling sfx in tm_FlameStrike, line 200")
	set FlameStrike_miscTimer[this] = getTimer("when calling getTimer in tm_FlameStrike, line 203")
	call timer_setData(FlameStrike_miscTimer[this], this, "when calling setData in tm_FlameStrike, line 204")
	call timer_start(FlameStrike_miscTimer[this], FlameStrike_INITDMG_DELAY, ref_function_bridge_FlameStrike_initialEffect)
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
endfunction

function new_FlameStrike takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_FlameStrike("when calling FlameStrike in tm_FlameStrike, line 192")
	call construct_FlameStrike(this, "when calling construct_FlameStrike in tm_FlameStrike, line 192")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function FlameStrike_onCast takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call setIdle(1.)
	call FlameStrike_runCooldown()
	call new_FlameStrike("when calling new_FlameStrike in tm_FlameStrike, line 67")
	set wurst_stack_depth = wurst_stack_depth - 1
	return false
endfunction

function bridge_FlameStrike_onCast takes nothing returns boolean
	set wurst_stack_depth = 0
	return FlameStrike_onCast("tm_FlameStrike, line 47")
endfunction

function ClickableObject_sfx_get takes integer index1, integer index2, string stackPos returns effect
	local effect returnVal
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if index2 < 0 or index2 >= 3 then
		call error("Index out of Bounds", "when calling error in ")
	elseif index2 <= 1 then
		if index2 <= 0 then
			set returnVal = ClickableObject_sfx_0[index1]
		else
			set returnVal = ClickableObject_sfx_1[index1]
		endif
	else
		set returnVal = ClickableObject_sfx_2[index1]
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set ClickableObject_sfx_gettempReturn = returnVal
	set returnVal = null
	return ClickableObject_sfx_gettempReturn
endfunction

function ClickableObject_sfx_set takes integer instanceId, integer arrayIndex, effect value, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if arrayIndex < 0 or arrayIndex >= 3 then
		call error("Index out of Bounds", "when calling error in ")
	elseif arrayIndex <= 1 then
		if arrayIndex <= 0 then
			set ClickableObject_sfx_0[instanceId] = value
		else
			set ClickableObject_sfx_1[instanceId] = value
		endif
	else
		set ClickableObject_sfx_2[instanceId] = value
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function ClickableObject_setSfx takes integer this, string whichEffect, real zoffset, string stackPos returns effect
	local boolean foundEmptySlot
	local integer i
	local effect stackTrace_tempReturn
	local integer tempIndex
	local string temp
	local integer temp_2
	local integer temp_3
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set foundEmptySlot = false
	set i = 0
	loop
		exitwhen  not (( not foundEmptySlot) and i < 3)
		if ClickableObject_sfx_get(this, i, "when calling sfx in BossInformation, line 98") == null then
			set foundEmptySlot = true
		else
			set i = i + 1
		endif
	endloop
	if foundEmptySlot then
		set temp_2 = this
		set temp_3 = i
		set temp = whichEffect
		set tempIndex = this
		call ClickableObject_sfx_set(temp_2, temp_3, addEffect_2(temp, vec2_withTerrainZ(ClickableObject_pos[tempIndex], ClickableObject_pos_2[tempIndex], zoffset), vec2_withTerrainZ_return_y, vec2_withTerrainZ_return_z), "when calling sfx in BossInformation, line 104")
		set stackTrace_tempReturn = ClickableObject_sfx_get(this, i, "when calling sfx in BossInformation, line 105")
		set wurst_stack_depth = wurst_stack_depth - 1
		set ClickableObject_setSfxtempReturn = stackTrace_tempReturn
		set stackTrace_tempReturn = null
		return ClickableObject_setSfxtempReturn
	else
		call error("Too sfxs assigned", "when calling error in BossInformation, line 107")
		set wurst_stack_depth = wurst_stack_depth - 1
		set stackTrace_tempReturn = null
		return null
	endif
endfunction

function dispatch_ClickableObject_BossInformation_ClickableObject_setSfx takes integer this, string whichEffect, real zoffset, string stackPos returns effect
	local effect BossInformation_ClickableObject_setSfx_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ClickableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling ClickableObject.BossInformation_ClickableObject_setSfx", "when calling error in ")
		else
			call error("Called ClickableObject.BossInformation_ClickableObject_setSfx on invalid object.", "when calling error in ")
		endif
	endif
	set BossInformation_ClickableObject_setSfx_result = ClickableObject_setSfx(this, whichEffect, zoffset, "when calling setSfx in BossInformation, line 93")
	set wurst_stack_depth = wurst_stack_depth - 1
	set dispatch_ClickableObject_BossInformation_ClickableObject_setSfxtempReturn = BossInformation_ClickableObject_setSfx_result
	set BossInformation_ClickableObject_setSfx_result = null
	return dispatch_ClickableObject_BossInformation_ClickableObject_setSfxtempReturn
endfunction

function ClickableObject_sfxOnClick_set takes integer instanceId, integer arrayIndex, integer value, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if arrayIndex < 0 or arrayIndex >= 3 then
		call error("Index out of Bounds", "when calling error in ")
	elseif arrayIndex <= 1 then
		if arrayIndex <= 0 then
			set ClickableObject_sfxOnClick_0[instanceId] = value
		else
			set ClickableObject_sfxOnClick_1[instanceId] = value
		endif
	else
		set ClickableObject_sfxOnClick_2[instanceId] = value
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function alloc_ExecutableEffect takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ExecutableEffect_firstFree == 0 then
		if ExecutableEffect_maxIndex < 32768 then
			set ExecutableEffect_maxIndex = ExecutableEffect_maxIndex + 1
			set this = ExecutableEffect_maxIndex
			set ExecutableEffect_typeId[this] = 665
		else
			call error("Out of memory: Could not create ExecutableEffect.", "when calling error in ")
			set this = 0
		endif
	else
		set ExecutableEffect_firstFree = ExecutableEffect_firstFree - 1
		set this = ExecutableEffect_nextFree[ExecutableEffect_firstFree]
		set ExecutableEffect_typeId[this] = 665
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function ExecutableEffect_color_set takes integer instanceId, integer arrayIndex, integer value, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if arrayIndex < 0 or arrayIndex >= 4 then
		call error("Index out of Bounds", "when calling error in ")
	elseif arrayIndex <= 1 then
		if arrayIndex <= 0 then
			set ExecutableEffect_color_0[instanceId] = value
		else
			set ExecutableEffect_color_1[instanceId] = value
		endif
	elseif arrayIndex <= 2 then
		set ExecutableEffect_color_2[instanceId] = value
	else
		set ExecutableEffect_color_3[instanceId] = value
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function construct_ExecutableEffect takes integer this, string whichEffect, real whichPos_x, real whichPos_y, real whichPos_z, string stackPos returns nothing
	local integer tempIndex
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set ExecutableEffect_index[this] = -1
	set ExecutableEffect_destroyOnStart[this] = false
	call ExecutableEffect_color_set(this, 0, 255, "when calling color in ExecutableEffect, line 30")
	call ExecutableEffect_color_set(this, 1, 255, "when calling color in ExecutableEffect, line 30")
	call ExecutableEffect_color_set(this, 2, 255, "when calling color in ExecutableEffect, line 30")
	call ExecutableEffect_color_set(this, 3, 255, "when calling color in ExecutableEffect, line 30")
	set ExecutableEffect_instanceCount = ExecutableEffect_instanceCount + 1
	set ExecutableEffect_instances[ExecutableEffect_instanceCount] = this
	set ExecutableEffect_index[this] = ExecutableEffect_instanceCount
	set ExecutableEffect_sfxModel[this] = whichEffect
	set tempIndex = this
	set ExecutableEffect_pos[tempIndex] = whichPos_x
	set ExecutableEffect_pos_2[tempIndex] = whichPos_y
	set ExecutableEffect_pos_3[tempIndex] = whichPos_z
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function new_ExecutableEffect takes string whichEffect, real whichPos_x, real whichPos_y, real whichPos_z, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_ExecutableEffect("when calling ExecutableEffect in ExecutableEffect, line 30")
	call construct_ExecutableEffect(this, whichEffect, whichPos_x, whichPos_y, whichPos_z, "when calling construct_ExecutableEffect in ExecutableEffect, line 30")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function vec2_withTerrainZ_2 takes real this_x, real this_y returns real
	set vec2_withTerrainZ_return_x_2 = this_x
	set vec2_withTerrainZ_return_y_2 = this_y
	set vec2_withTerrainZ_return_z_2 = vec2_getTerrainZ(this_x, this_y)
	return vec2_withTerrainZ_return_x_2
endfunction

function ClickableObject_setSfxOnClick takes integer this, string whichEffect, string stackPos returns integer
	local boolean foundEmptySlot
	local integer i
	local integer stackTrace_tempReturn
	local integer tempIndex
	local string temp
	local integer temp_2
	local integer temp_3
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set foundEmptySlot = false
	set i = 0
	loop
		exitwhen  not (( not foundEmptySlot) and i < 3)
		if ClickableObject_sfxOnClick_get(this, i, "when calling sfxOnClick in BossInformation, line 115") == 0 then
			set foundEmptySlot = true
		else
			set i = i + 1
		endif
	endloop
	if foundEmptySlot then
		set temp_2 = this
		set temp_3 = i
		set temp = whichEffect
		set tempIndex = this
		call ClickableObject_sfxOnClick_set(temp_2, temp_3, new_ExecutableEffect(temp, vec2_withTerrainZ_2(ClickableObject_pos[tempIndex], ClickableObject_pos_2[tempIndex]), vec2_withTerrainZ_return_y_2, vec2_withTerrainZ_return_z_2, "when calling new_ExecutableEffect in BossInformation, line 121"), "when calling sfxOnClick in BossInformation, line 121")
		set stackTrace_tempReturn = ClickableObject_sfxOnClick_get(this, i, "when calling sfxOnClick in BossInformation, line 122")
		set wurst_stack_depth = wurst_stack_depth - 1
		return stackTrace_tempReturn
	else
		call error("Too many Executable SFXs assigned", "when calling error in BossInformation, line 124")
		set wurst_stack_depth = wurst_stack_depth - 1
		return 0
	endif
endfunction

function dispatch_ClickableObject_BossInformation_ClickableObject_setSfxOnClick takes integer this, string whichEffect, string stackPos returns integer
	local integer BossInformation_ClickableObject_setSfxOnClick_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ClickableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling ClickableObject.BossInformation_ClickableObject_setSfxOnClick", "when calling error in ")
		else
			call error("Called ClickableObject.BossInformation_ClickableObject_setSfxOnClick on invalid object.", "when calling error in ")
		endif
	endif
	set BossInformation_ClickableObject_setSfxOnClick_result = ClickableObject_setSfxOnClick(this, whichEffect, "when calling setSfxOnClick in BossInformation, line 111")
	set wurst_stack_depth = wurst_stack_depth - 1
	return BossInformation_ClickableObject_setSfxOnClick_result
endfunction

function Mechanic_setCastBy takes integer this, string text returns string
	set Mechanic_castBy[this] = text
	return Mechanic_castBy[this]
endfunction

function dispatch_Mechanic_BossInformation_Mechanic_setCastBy takes integer this, string text, string stackPos returns string
	local string BossInformation_Mechanic_setCastBy_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ClickableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Mechanic.BossInformation_Mechanic_setCastBy", "when calling error in ")
		else
			call error("Called Mechanic.BossInformation_Mechanic_setCastBy on invalid object.", "when calling error in ")
		endif
	endif
	set BossInformation_Mechanic_setCastBy_result = Mechanic_setCastBy(this, text)
	set wurst_stack_depth = wurst_stack_depth - 1
	return BossInformation_Mechanic_setCastBy_result
endfunction

function effect_setColorByPlayer takes effect this, player whichPlayer returns nothing
	call BlzSetSpecialEffectColorByPlayer(this, whichPlayer)
endfunction

function alloc_Mechanic takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ClickableObject_firstFree == 0 then
		if ClickableObject_maxIndex < 32768 then
			set ClickableObject_maxIndex = ClickableObject_maxIndex + 1
			set this = ClickableObject_maxIndex
			set ClickableObject_typeId[this] = 649
		else
			call error("Out of memory: Could not create Mechanic.", "when calling error in ")
			set this = 0
		endif
	else
		set ClickableObject_firstFree = ClickableObject_firstFree - 1
		set this = ClickableObject_nextFree[ClickableObject_firstFree]
		set ClickableObject_typeId[this] = 649
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_Mechanic takes integer this, string name, real pos_x, real pos_y, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call construct_ClickableObject(this, name, createUnit(Player(PLAYER_NEUTRAL_PASSIVE), ClickableObject_placeholderId, pos_x, pos_y, 0.), pos_x, pos_y, 1, "when calling construct_ClickableObject in BossInformation, line 155")
	set Mechanic_index[this] = -1
	set Mechanic_castBy[this] = ""
	call unit_setInvulnerable(ClickableObject_object[this], true)
	call unit_setVertexColor(ClickableObject_object[this], 0, 0, 0, 0)
	set Mechanic_index[this] = unit_getIndex(ClickableObject_object[this])
	set Mechanic_instances[Mechanic_index[this]] = this
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function new_Mechanic takes string name, real pos_x, real pos_y, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_Mechanic("when calling Mechanic in BossInformation, line 155")
	call construct_Mechanic(this, name, pos_x, pos_y, "when calling construct_Mechanic in BossInformation, line 155")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function dispatch_HashMap_HashMap_HashMap_put takes integer this, integer key, integer value, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling HashMap.HashMap_HashMap_put", "when calling error in ")
		else
			call error("Called HashMap.HashMap_HashMap_put on invalid object.", "when calling error in ")
		endif
	endif
	if Table_typeId[this] <= 723 then
		call HashMap_put(this, key, value, "when calling put in HashMap, line 15")
	else
		call IterableMap_put(this, key, value, "when calling put in HashMap, line 15")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function hashtable_loadTriggerHandle takes hashtable this, integer parentKey, integer childKey returns trigger
	return LoadTriggerHandle(this, parentKey, childKey)
endfunction

function Table_loadTrigger takes integer this, integer parentKey returns trigger
	return hashtable_loadTriggerHandle(Table_ht, this, parentKey)
endfunction

function dispatch_Table_Table_Table_loadTrigger takes integer this, integer parentKey, string stackPos returns trigger
	local trigger Table_Table_loadTrigger_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Table.Table_Table_loadTrigger", "when calling error in ")
		else
			call error("Called Table.Table_Table_loadTrigger on invalid object.", "when calling error in ")
		endif
	endif
	set Table_Table_loadTrigger_result = Table_loadTrigger(this, parentKey)
	set wurst_stack_depth = wurst_stack_depth - 1
	set dispatch_Table_Table_Table_loadTriggertempReturn = Table_Table_loadTrigger_result
	set Table_Table_loadTrigger_result = null
	return dispatch_Table_Table_Table_loadTriggertempReturn
endfunction

function triggerFromIndex takes integer index, string stackPos returns trigger
	local trigger stackTrace_tempReturn
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_Table_Table_Table_saveFogState(TypeCasting_typecastdata, 0, ConvertFogState(index), "when calling saveFogState in TypeCasting, line 88")
	set stackTrace_tempReturn = dispatch_Table_Table_Table_loadTrigger(TypeCasting_typecastdata, 0, "when calling loadTrigger in TypeCasting, line 89")
	set wurst_stack_depth = wurst_stack_depth - 1
	set triggerFromIndextempReturn = stackTrace_tempReturn
	set stackTrace_tempReturn = null
	return triggerFromIndextempReturn
endfunction

function triggerToIndex takes trigger object returns integer
	return handle_getHandleId(object)
endfunction

function registerSpellEffectEvent takes integer abil, code onCast, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if  not dispatch_HashMap_HashMap_HashMap_has(RegisterEvents_onCastMap, abil, "when calling has in RegisterEvents, line 61") then
		call dispatch_HashMap_HashMap_HashMap_put(RegisterEvents_onCastMap, abil, triggerToIndex(CreateTrigger()), "when calling put in RegisterEvents, line 62")
	endif
	call trigger_addCondition(triggerFromIndex(dispatch_HashMap_HashMap_HashMap_get(RegisterEvents_onCastMap, abil, "when calling get in RegisterEvents, line 63"), "when calling triggerFromIndex in RegisterEvents, line 63"), Filter(onCast))
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function FlameStrike_onGameInit takes string stackPos returns nothing
	local integer mech
	local integer receiver
	local integer receiver_2
	local integer receiver_3
	local effect receiver_4
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_release(GetExpiredTimer(), "when calling release in tm_FlameStrike, line 46")
	call registerSpellEffectEvent(1093677620, ref_function_bridge_FlameStrike_onCast, "when calling registerSpellEffectEvent in tm_FlameStrike, line 47")
	set receiver = new_Mechanic("Flame Strike", 11937., 14909., "when calling new_Mechanic in tm_FlameStrike, line 49")
	call dispatch_ClickableObject_BossInformation_ClickableObject_setDescription(receiver, "" + "A blast of ice instantly dealing " + "\n" + " damage, and slowing the targets movement speed by 70%.", "when calling setDescription in tm_FlameStrike, line 50")
	set receiver_2 = receiver
	call dispatch_Mechanic_BossInformation_Mechanic_setCastBy(receiver_2, "The Monster", "when calling setCastBy in tm_FlameStrike, line 53")
	set receiver_3 = receiver_2
	call dispatch_ClickableObject_BossInformation_ClickableObject_setSfx(receiver_3, "Environment\\LargeBuildingFire\\LargeBuildingFire1.mdl", 100., "when calling setSfx in tm_FlameStrike, line 54")
	set mech = receiver_3
	set receiver_4 = dispatch_ClickableObject_BossInformation_ClickableObject_setSfx(mech, "units\\nightelf\\Wisp\\Wisp.mdl", 0., "when calling setSfx in tm_FlameStrike, line 56")
	call effect_setColorByPlayer(receiver_4, Player(5))
	call dispatch_ClickableObject_BossInformation_ClickableObject_setSfxOnClick(mech, "Abilities\\Spells\\Human\\FlameStrike\\FlameStrike1.mdl", "when calling setSfxOnClick in tm_FlameStrike, line 59")
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver_4 = null
endfunction

function bridge_FlameStrike_onGameInit takes nothing returns nothing
	set wurst_stack_depth = 0
	call FlameStrike_onGameInit("tm_FlameStrike, line 9")
endfunction

function IceBlast_runCooldown takes nothing returns nothing
	call timer_start(IceBlast_cooldownTimer, IceBlast_COOLDOWN, ref_function_IceBlast_setReady)
endfunction

function unit_getPos3Fly takes unit this returns real
	set unit_getPos3Fly_return_x = unit_getX(this)
	set unit_getPos3Fly_return_y = unit_getY(this)
	set unit_getPos3Fly_return_z = unit_getFlyHeight(this)
	return unit_getPos3Fly_return_x
endfunction

function IceBlast_onCast takes string stackPos returns nothing
	local effect receiver
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call unit_damageTarget(tm_Main_theMonster, General_hunter, IceBlast_DAMAGE * tm_Main_bossDmgInc)
	set receiver = widget_addEffect(General_hunter, "Abilities\\Weapons\\FrostWyrmMissile\\FrostWyrmMissile.mdl", "chest")
	call effect_destr(receiver)
	call dispatch_SoundDefinition_SoundUtils_SoundDefinition_playOnPoint(IceBlast_sound_Hit, unit_getPos3Fly(General_hunter), unit_getPos3Fly_return_y, unit_getPos3Fly_return_z, 3, "when calling playOnPoint in tm_IceBlast, line 38")
	call setIdle(1.)
	call IceBlast_runCooldown()
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
endfunction

function bridge_IceBlast_onCast takes nothing returns nothing
	set wurst_stack_depth = 0
	call IceBlast_onCast("tm_IceBlast, line 11")
endfunction

function ExecutableEffect_destroyOnStart_2 takes integer this, boolean flag returns nothing
	set ExecutableEffect_destroyOnStart[this] = flag
endfunction

function dispatch_ExecutableEffect_ExecutableEffect_ExecutableEffect_destroyOnStart takes integer this, boolean flag, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ExecutableEffect_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling ExecutableEffect.ExecutableEffect_ExecutableEffect_destroyOnStart", "when calling error in ")
		else
			call error("Called ExecutableEffect.ExecutableEffect_ExecutableEffect_destroyOnStart on invalid object.", "when calling error in ")
		endif
	endif
	call ExecutableEffect_destroyOnStart_2(this, flag)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function ExecutableEffect_setZ takes integer this, real zoffset returns real
	local integer tempIndex = this
	local integer temp = tempIndex
	local integer tempIndex_2 = this
	local integer tempIndex_3
	set ExecutableEffect_pos[temp] = vec2_withTerrainZ(vec3_toVec2(ExecutableEffect_pos[tempIndex_2], ExecutableEffect_pos_2[tempIndex_2], ExecutableEffect_pos_3[tempIndex_2]), vec3_toVec2_return_y, zoffset)
	set ExecutableEffect_pos_2[tempIndex] = vec2_withTerrainZ_return_y
	set ExecutableEffect_pos_3[tempIndex] = vec2_withTerrainZ_return_z
	set tempIndex_3 = this
	set ExecutableEffect_setZ_return_x = ExecutableEffect_pos[tempIndex_3]
	set ExecutableEffect_setZ_return_y = ExecutableEffect_pos_2[tempIndex_3]
	set ExecutableEffect_setZ_return_z = ExecutableEffect_pos_3[tempIndex_3]
	return ExecutableEffect_setZ_return_x
endfunction

function dispatch_ExecutableEffect_ExecutableEffect_ExecutableEffect_setZ takes integer this, real zoffset, string stackPos returns real
	local real ExecutableEffect_ExecutableEffect_setZ_result_x
	local real temp_ExecutableEffect_ExecutableEffect_setZ_result_x
	local real temp_ExecutableEffect_ExecutableEffect_setZ_result_y
	local real temp_ExecutableEffect_ExecutableEffect_setZ_result_z
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ExecutableEffect_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling ExecutableEffect.ExecutableEffect_ExecutableEffect_setZ", "when calling error in ")
		else
			call error("Called ExecutableEffect.ExecutableEffect_ExecutableEffect_setZ on invalid object.", "when calling error in ")
		endif
	endif
	set temp_ExecutableEffect_ExecutableEffect_setZ_result_x = ExecutableEffect_setZ(this, zoffset)
	set temp_ExecutableEffect_ExecutableEffect_setZ_result_y = ExecutableEffect_setZ_return_y
	set temp_ExecutableEffect_ExecutableEffect_setZ_result_z = ExecutableEffect_setZ_return_z
	set ExecutableEffect_ExecutableEffect_setZ_result_x = temp_ExecutableEffect_ExecutableEffect_setZ_result_x
	set wurst_stack_depth = wurst_stack_depth - 1
	set dispatch_ExecutableEffect_ExecutableEffect_ExecutableEffect_setZ_return_x = ExecutableEffect_ExecutableEffect_setZ_result_x
	return dispatch_ExecutableEffect_ExecutableEffect_ExecutableEffect_setZ_return_x
endfunction

function IceBlast_setupBossInfo takes string stackPos returns nothing
	local integer mech
	local integer receiver
	local integer receiver_2
	local integer receiver_3
	local effect receiver_4
	local effect receiver_5
	local effect receiver_6
	local effect receiver_7
	local integer receiver_8
	local integer receiver_9
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_release(GetExpiredTimer(), "when calling release in tm_IceBlast, line 55")
	set receiver = new_Mechanic("Ice Blast", 11720., 14950., "when calling new_Mechanic in tm_IceBlast, line 57")
	call dispatch_ClickableObject_BossInformation_ClickableObject_setSoundOnClick(receiver, Sounds_frostArrowHit1, "when calling setSoundOnClick in tm_IceBlast, line 58")
	set receiver_2 = receiver
	call dispatch_ClickableObject_BossInformation_ClickableObject_setDescription(receiver_2, "" + "A blast of ice instantly dealing " + I2S(R2I(IceBlast_DAMAGE)) + "\n" + " damage, and slowing the targets movement speed by 70%.", "when calling setDescription in tm_IceBlast, line 59")
	set receiver_3 = receiver_2
	call dispatch_Mechanic_BossInformation_Mechanic_setCastBy(receiver_3, "The Monster", "when calling setCastBy in tm_IceBlast, line 62")
	set mech = receiver_3
	set receiver_4 = dispatch_ClickableObject_BossInformation_ClickableObject_setSfx(mech, "Abilities\\Weapons\\ZigguratFrostMissile\\ZigguratFrostMissile.mdl", 150., "when calling setSfx in tm_IceBlast, line 64")
	call effect_setScale(receiver_4, 2.)
	set receiver_5 = dispatch_ClickableObject_BossInformation_ClickableObject_setSfx(mech, "units\\nightelf\\Wisp\\Wisp.mdl", 0., "when calling setSfx in tm_IceBlast, line 67")
	call effect_setColor(receiver_5, 150, 150, 255)
	set receiver_6 = receiver_5
	call effect_setAlpha(receiver_6, 150)
	set receiver_7 = receiver_6
	call effect_setColorByPlayer(receiver_7, Player(21))
	set receiver_8 = dispatch_ClickableObject_BossInformation_ClickableObject_setSfxOnClick(mech, "Abilities\\Weapons\\FrostWyrmMissile\\FrostWyrmMissile.mdl", "when calling setSfxOnClick in tm_IceBlast, line 72")
	call dispatch_ExecutableEffect_ExecutableEffect_ExecutableEffect_setZ(receiver_8, 100., "when calling setZ in tm_IceBlast, line 73")
	set receiver_9 = receiver_8
	call dispatch_ExecutableEffect_ExecutableEffect_ExecutableEffect_destroyOnStart(receiver_9, true, "when calling destroyOnStart in tm_IceBlast, line 74")
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver_4 = null
	set receiver_5 = null
	set receiver_6 = null
	set receiver_7 = null
endfunction

function bridge_IceBlast_setupBossInfo takes nothing returns nothing
	set wurst_stack_depth = 0
	call IceBlast_setupBossInfo("tm_IceBlast, line 13")
endfunction

function SoundDefinition_onDestroy takes integer this returns nothing
endfunction

function dealloc_SoundDefinition takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if SoundDefinition_typeId[obj] == 0 then
		call error("Double free: object of type SoundDefinition", "when calling error in ")
	else
		set SoundDefinition_nextFree[SoundDefinition_firstFree] = obj
		set SoundDefinition_firstFree = SoundDefinition_firstFree + 1
		set SoundDefinition_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroySoundDefinition takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call SoundDefinition_onDestroy(this)
	call dealloc_SoundDefinition(this, "when calling SoundDefinition in SoundUtils, line 33")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_SoundDefinition_destroySoundDefinition takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if SoundDefinition_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling SoundDefinition.destroySoundDefinition", "when calling error in ")
		else
			call error("Called SoundDefinition.destroySoundDefinition on invalid object.", "when calling error in ")
		endif
	endif
	call destroySoundDefinition(this, "when calling destroySoundDefinition in SoundUtils, line 33")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function InteractableObject_onDestroy takes integer this, string stackPos returns nothing
	local integer i
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if InteractableObject_customSound[this] != 0 and InteractableObject_customSound[this] != InteractableObject_STANDARDSOUND then
		call dispatch_SoundDefinition_destroySoundDefinition(InteractableObject_customSound[this], "when calling SoundDefinition in InteractableObjects, line 87")
	endif
	call unit_remove(InteractableObject_object[this])
	call unit_remove(InteractableObject_sfx[this])
	call timer_release(InteractableObject_t[this], "when calling release in InteractableObjects, line 91")
	set i = InteractableObject_index[this]
	loop
		exitwhen  not (InteractableObject_instances[i + 1] != 0)
		set InteractableObject_instances[i] = InteractableObject_instances[i + 1]
		set InteractableObject_index[InteractableObject_instances[i]] = i
		set i = i + 1
	endloop
	set InteractableObject_instances[i] = 0
	set InteractableObject_instanceCount = InteractableObject_instanceCount - 1
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_InteractableObject takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if InteractableObject_typeId[obj] == 0 then
		call error("Double free: object of type InteractableObject", "when calling error in ")
	else
		set InteractableObject_nextFree[InteractableObject_firstFree] = obj
		set InteractableObject_firstFree = InteractableObject_firstFree + 1
		set InteractableObject_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyInteractableObject takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call InteractableObject_onDestroy(this, "when calling InteractableObject_onDestroy in InteractableObjects, line 85")
	call dealloc_InteractableObject(this, "when calling InteractableObject in InteractableObjects, line 85")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_InteractableObject_destroyInteractableObject takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if InteractableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling InteractableObject.destroyInteractableObject", "when calling error in ")
		else
			call error("Called InteractableObject.destroyInteractableObject on invalid object.", "when calling error in ")
		endif
	endif
	call destroyInteractableObject(this, "when calling destroyInteractableObject in InteractableObjects, line 10")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function InteractableObject_onInteract takes integer this, string stackPos returns nothing
	local integer soundToPlay
	local integer tempIndex
	local integer temp
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if InteractableObject_playSound[this] then
		if InteractableObject_customSound[this] == 0 then
			set soundToPlay = InteractableObject_STANDARDSOUND
		else
			set soundToPlay = InteractableObject_customSound[this]
		endif
		if InteractableObject_soundOnPoint[this] then
			set temp = soundToPlay
			set tempIndex = this
			call dispatch_SoundDefinition_SoundUtils_SoundDefinition_playOnPoint_2(temp, vec2_withTerrainZ_2(InteractableObject_pos[tempIndex], InteractableObject_pos_2[tempIndex]), vec2_withTerrainZ_return_y_2, vec2_withTerrainZ_return_z_2, "when calling playOnPoint in InteractableObjects, line 157")
		else
			call dispatch_SoundDefinition_SoundUtils_SoundDefinition_play_2(soundToPlay, "when calling play in InteractableObjects, line 159")
		endif
	endif
	call ClearTextMessages()
	if InteractableObject_infoName[this] == "" then
		call print("|cffFE890D" + InteractableObject_name[this] + "|r")
	else
		call print("|cffFE890D" + InteractableObject_infoName[this] + "|r")
	endif
	call print(InteractableObject_info[this])
	if InteractableObject_removeOnInteract[this] then
		call dispatch_InteractableObject_destroyInteractableObject(this, "when calling InteractableObject in InteractableObjects, line 170")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_InteractableObject_InteractableObjects_InteractableObject_onInteract takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if InteractableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling InteractableObject.InteractableObjects_InteractableObject_onInteract", "when calling error in ")
		else
			call error("Called InteractableObject.InteractableObjects_InteractableObject_onInteract on invalid object.", "when calling error in ")
		endif
	endif
	call InteractableObject_onInteract(this, "when calling onInteract in InteractableObjects, line 148")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function InteractableObject_checkDistance takes string stackPos returns nothing
	local integer instance
	local integer tempIndex
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = InteractableObject_instances[timer_getData(GetExpiredTimer(), "when calling getData in InteractableObjects, line 176")]
	if InteractableObjects_orderTarget == InteractableObject_object[instance] then
		set tempIndex = instance
		if vec2_distanceTo(InteractableObject_pos[tempIndex], InteractableObject_pos_2[tempIndex], unit_getPos(General_hunter), unit_getPos_return_y) < InteractableObject_activateDist[instance] then
			call timer_pause(InteractableObject_t[instance])
			call dispatch_InteractableObject_InteractableObjects_InteractableObject_onInteract(instance, "when calling onInteract in InteractableObjects, line 181")
		endif
	else
		call timer_pause(InteractableObject_t[instance])
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_InteractableObject_checkDistance takes nothing returns nothing
	set wurst_stack_depth = 0
	call InteractableObject_checkDistance("InteractableObjects, line 193")
endfunction

function unit_setPathing takes unit this, boolean value returns nothing
	call SetUnitPathing(this, value)
endfunction

function MagicCrystal_initiateAbsorb takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call unit_pause(tm_Main_theMonster)
	call unit_setPathing(tm_Main_theMonster, true)
	call unit_setMoveSpeed(tm_Main_theMonster, MagicCrystal_standardMoveSpeed)
	call timer_setData(MagicCrystal_runTimer1, this, "when calling setData in tm_MagicCrystal, line 348")
	call timer_start(MagicCrystal_runTimer1, 2.0, ref_function_bridge_MagicCrystal_initiateAbsorbDelay1)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_MagicCrystal_tm_MagicCrystal_MagicCrystal_initiateAbsorb takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if MagicCrystal_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling MagicCrystal.tm_MagicCrystal_MagicCrystal_initiateAbsorb", "when calling error in ")
		else
			call error("Called MagicCrystal.tm_MagicCrystal_MagicCrystal_initiateAbsorb on invalid object.", "when calling error in ")
		endif
	endif
	call MagicCrystal_initiateAbsorb(this, "when calling initiateAbsorb in tm_MagicCrystal, line 342")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function unit_getFacing takes unit this returns real
	return GetUnitFacing(this)
endfunction

function unit_issuePointOrder takes unit this, string order, real target_x, real target_y returns boolean
	return IssuePointOrder(this, order, target_x, target_y)
endfunction

function MagicCrystal_checkDistance takes string stackPos returns nothing
	local integer instance
	local real bossFacing
	local real angleBetween
	local real difference
	local real distance
	local integer tempIndex
	local integer tempIndex_2
	local integer tempIndex_3
	local integer tempIndex_4
	local real temp
	local real temp_2
	local real temp_3
	local real temp_4
	local real temp_5
	local real temp_6
	local unit temp_7
	local unit temp_8
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = MagicCrystal_crystals[timer_getData(GetExpiredTimer(), "when calling getData in tm_MagicCrystal, line 354")]
	set bossFacing = unit_getFacing(tm_Main_theMonster)
	set temp = unit_getPos(tm_Main_theMonster)
	set temp_2 = unit_getPos_return_y
	set tempIndex = instance
	set angleBetween = angle_degrees(vec2_angleTo(temp, temp_2, MagicCrystal_pos[tempIndex], MagicCrystal_pos_2[tempIndex]))
	set difference = (bossFacing - angleBetween) * 1.
	set temp_3 = unit_getPos(tm_Main_theMonster)
	set temp_4 = unit_getPos_return_y
	set tempIndex_2 = instance
	set distance = vec2_distanceTo(temp_3, temp_4, MagicCrystal_pos[tempIndex_2], MagicCrystal_pos_2[tempIndex_2])
	if distance < 500. then
		if difference < 10. then
			call unit_issueImmediateOrder(tm_Main_theMonster, "stop")
			call timer_pause(MagicCrystal_runTimer1)
			call dispatch_MagicCrystal_tm_MagicCrystal_MagicCrystal_initiateAbsorb(instance, "when calling initiateAbsorb in tm_MagicCrystal, line 365")
		else
			set temp_7 = tm_Main_theMonster
			set temp_5 = unit_getPos(tm_Main_theMonster)
			set temp_6 = unit_getPos_return_y
			set tempIndex_3 = instance
			call unit_setFacing(temp_7, vec2_angleTo(temp_5, temp_6, MagicCrystal_pos[tempIndex_3], MagicCrystal_pos_2[tempIndex_3]))
		endif
	elseif unit_getCurrentOrder(tm_Main_theMonster) != Orders_move then
		set temp_8 = tm_Main_theMonster
		set tempIndex_4 = instance
		call unit_issuePointOrder(temp_8, "move", MagicCrystal_pos[tempIndex_4], MagicCrystal_pos_2[tempIndex_4])
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set temp_7 = null
	set temp_8 = null
endfunction

function bridge_MagicCrystal_checkDistance takes nothing returns nothing
	set wurst_stack_depth = 0
	call MagicCrystal_checkDistance("tm_MagicCrystal, line 384")
endfunction

function ClickableObject_setUnitSfx takes integer this, integer unitType, real facing returns unit
	local integer temp_3 = this
	local player temp = Player(PLAYER_NEUTRAL_PASSIVE)
	local integer temp_2 = unitType
	local integer tempIndex = this
	set ClickableObject_unitSfx[temp_3] = createUnit(temp, temp_2, ClickableObject_pos[tempIndex], ClickableObject_pos_2[tempIndex], Deg2Rad(facing))
	set temp = null
	return ClickableObject_unitSfx[this]
endfunction

function dispatch_ClickableObject_BossInformation_ClickableObject_setUnitSfx takes integer this, integer unitType, real facing, string stackPos returns unit
	local unit BossInformation_ClickableObject_setUnitSfx_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ClickableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling ClickableObject.BossInformation_ClickableObject_setUnitSfx", "when calling error in ")
		else
			call error("Called ClickableObject.BossInformation_ClickableObject_setUnitSfx on invalid object.", "when calling error in ")
		endif
	endif
	set BossInformation_ClickableObject_setUnitSfx_result = ClickableObject_setUnitSfx(this, unitType, facing)
	set wurst_stack_depth = wurst_stack_depth - 1
	set dispatch_ClickableObject_BossInformation_ClickableObject_setUnitSfxtempReturn = BossInformation_ClickableObject_setUnitSfx_result
	set BossInformation_ClickableObject_setUnitSfx_result = null
	return dispatch_ClickableObject_BossInformation_ClickableObject_setUnitSfxtempReturn
endfunction

function effect_setColor_2 takes effect this, integer color_red, integer color_green, integer color_blue, integer color_alpha returns nothing
	call BlzSetSpecialEffectColor(this, color_red, color_green, color_blue)
	call BlzSetSpecialEffectAlpha(this, color_alpha)
endfunction

function effect_setTimeScale takes effect this, real timeScale returns nothing
	call BlzSetSpecialEffectTimeScale(this, timeScale)
endfunction

function MagicCrystal_createBossInfo takes string stackPos returns nothing
	local integer obj
	local integer receiver
	local integer receiver_2
	local unit receiver_3
	local unit receiver_4
	local effect receiver_5
	local effect receiver_6
	local effect receiver_7
	local effect receiver_8
	local integer receiver_9
	local integer receiver_10
	local unit receiver_11
	local unit receiver_12
	local effect receiver_13
	local effect receiver_14
	local effect receiver_15
	local effect receiver_16
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_release(GetExpiredTimer(), "when calling release in tm_MagicCrystal, line 412")
	set receiver = new_Mechanic("Magic Crystal", 11520., 14750., "when calling new_Mechanic in tm_MagicCrystal, line 414")
	call dispatch_ClickableObject_BossInformation_ClickableObject_setSoundOnClick(receiver, Sounds_arcaneVaultWhat1, "when calling setSoundOnClick in tm_MagicCrystal, line 415")
	set receiver_2 = receiver
	call dispatch_ClickableObject_BossInformation_ClickableObject_setDescription(receiver_2, "" + "Two Magic Crystals are present during the fight.\n" + "When The Monster reaches " + int_toString(R2I(MagicCrystal_activationHp[0] * 100.)) + "% and " + int_toString(R2I(MagicCrystal_activationHp[1] * 100.)) + "% HP\n" + "it will attempt to consume a crystal. If the crystal\n" + "is not destroyed within " + int_toString(R2I(MagicCrystal_ABSORB_DUR)) + " seconds, The Monster\n" + "gain unstoppable powers. During its consumption the\n" + "crystal will damage the Hunter every " + int_toString(R2I(MagicCrystal_LIGHTNING_FREQ)) + " seconds, dealing " + int_toString(R2I(MagicCrystal_LIGHTNING_DMG)) + " damage.", "when calling setDescription in tm_MagicCrystal, line 416")
	set obj = receiver_2
	call unit_setMaxHP(ClickableObject_object[obj], MagicCrystal_CRYSTAL_HP, true)
	set receiver_3 = dispatch_ClickableObject_BossInformation_ClickableObject_setUnitSfx(obj, MagicCrystal_sfxId, 180., "when calling setUnitSfx in tm_MagicCrystal, line 426")
	call unit_setVertexColor(receiver_3, 150, 255, 150, 255)
	set receiver_4 = receiver_3
	call unit_setTimeScale(receiver_4, 1.5)
	set receiver_5 = dispatch_ClickableObject_BossInformation_ClickableObject_setSfx(obj, "units\\nightelf\\Wisp\\Wisp.mdl", 200., "when calling setSfx in tm_MagicCrystal, line 430")
	call effect_setColorByPlayer(receiver_5, Player(22))
	set receiver_6 = receiver_5
	call effect_setColor_2(receiver_6, 150, 200, 255, 100)
	set receiver_7 = receiver_6
	call effect_setScale(receiver_7, 1.5)
	set receiver_8 = receiver_7
	call effect_setTimeScale(receiver_8, 0.25)
	set ClickableObject_objType[obj] = "Spell"
	set receiver_9 = new_Mechanic("Lesser Magic Crystal", 11570., 14880., "when calling new_Mechanic in tm_MagicCrystal, line 439")
	call dispatch_ClickableObject_BossInformation_ClickableObject_setSoundOnClick(receiver_9, Sounds_arcaneVaultWhat1, "when calling setSoundOnClick in tm_MagicCrystal, line 440")
	set receiver_10 = receiver_9
	call dispatch_ClickableObject_BossInformation_ClickableObject_setDescription(receiver_10, "" + "", "when calling setDescription in tm_MagicCrystal, line 441")
	set obj = receiver_10
	set receiver_11 = dispatch_ClickableObject_BossInformation_ClickableObject_setUnitSfx(obj, MagicCrystal_sfxId, 180., "when calling setUnitSfx in tm_MagicCrystal, line 444")
	call unit_setVertexColor(receiver_11, 255, 255, 255, 255)
	set receiver_12 = receiver_11
	call unit_setTimeScale(receiver_12, 1.5)
	set receiver_13 = dispatch_ClickableObject_BossInformation_ClickableObject_setSfx(obj, "units\\nightelf\\Wisp\\Wisp.mdl", 200., "when calling setSfx in tm_MagicCrystal, line 448")
	call effect_setColorByPlayer(receiver_13, Player(2))
	set receiver_14 = receiver_13
	call effect_setColor_2(receiver_14, 150, 200, 255, 100)
	set receiver_15 = receiver_14
	call effect_setScale(receiver_15, 1.5)
	set receiver_16 = receiver_15
	call effect_setTimeScale(receiver_16, 0.25)
	set ClickableObject_objType[obj] = "Spell"
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
	set receiver_6 = null
	set receiver_7 = null
	set receiver_8 = null
	set receiver_11 = null
	set receiver_12 = null
	set receiver_13 = null
	set receiver_14 = null
	set receiver_15 = null
	set receiver_16 = null
endfunction

function bridge_MagicCrystal_createBossInfo takes nothing returns nothing
	set wurst_stack_depth = 0
	call MagicCrystal_createBossInfo("tm_MagicCrystal, line 16")
endfunction

function MagicCrystal_death takes integer this returns nothing
	call unit_remove(MagicCrystal_placeholder[this])
	call unit_setAnimation_2(MagicCrystal_crystal[this], "death")
	call effect_setTimeScale(MagicCrystal_crystalSFX[this], 1.)
	call effect_destr(MagicCrystal_crystalSFX[this])
	call timer_pause(MagicCrystal_lightningTimer[this])
endfunction

function dispatch_MagicCrystal_tm_MagicCrystal_MagicCrystal_death takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if MagicCrystal_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling MagicCrystal.tm_MagicCrystal_MagicCrystal_death", "when calling error in ")
		else
			call error("Called MagicCrystal.tm_MagicCrystal_MagicCrystal_death on invalid object.", "when calling error in ")
		endif
	endif
	call MagicCrystal_death(this)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function alloc_EffectDuration takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if EffectDuration_firstFree == 0 then
		if EffectDuration_maxIndex < 32768 then
			set EffectDuration_maxIndex = EffectDuration_maxIndex + 1
			set this = EffectDuration_maxIndex
			set EffectDuration_typeId[this] = 663
		else
			call error("Out of memory: Could not create EffectDuration.", "when calling error in ")
			set this = 0
		endif
	else
		set EffectDuration_firstFree = EffectDuration_firstFree - 1
		set this = EffectDuration_nextFree[EffectDuration_firstFree]
		set EffectDuration_typeId[this] = 663
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_EffectDuration takes integer this, effect sfx, real duration, string stackPos returns nothing
	local timer receiver
	local timer receiver_2
	local integer temp
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set EffectDuration_SFX[this] = sfx
	set temp = this
	set receiver = getTimer("when calling getTimer in TimedEffect, line 26")
	call timer_setData(receiver, this, "when calling setData in TimedEffect, line 27")
	set receiver_2 = receiver
	call timer_start(receiver_2, duration, ref_function_bridge_EffectDuration_destr)
	set EffectDuration_t[temp] = receiver_2
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
endfunction

function new_EffectDuration takes effect sfx, real duration, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_EffectDuration("when calling EffectDuration in TimedEffect, line 22")
	call construct_EffectDuration(this, sfx, duration, "when calling construct_EffectDuration in TimedEffect, line 22")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function addEffectDuration takes effect sfx, real duration, string stackPos returns effect
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call new_EffectDuration(sfx, duration, "when calling new_EffectDuration in TimedEffect, line 5")
	set wurst_stack_depth = wurst_stack_depth - 1
	return sfx
endfunction

function MagicCrystal_releaseBoss takes integer this, string stackPos returns nothing
	local effect receiver
	local effect receiver_2
	local effect receiver_3
	local effect receiver_4
	local effect receiver_5
	local effect receiver_6
	local effect receiver_7
	local effect receiver_8
	local effect receiver_9
	local effect receiver_10
	local integer tempIndex
	local integer tempIndex_2
	local integer tempIndex_3
	local string temp
	local string temp_2
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_pause(MagicCrystal_runTimer1)
	call timer_pause(MagicCrystal_runTimer2)
	call timer_pause(MagicCrystal_runTimer3)
	if MagicCrystal_index[this] == 2 then
		call unit_setAnimation_2(tm_Main_theMonster, "attack")
		call unit_queueAnimation(tm_Main_theMonster, "stand")
		call addEffectDuration(widget_addEffect(tm_Main_theMonster, Abilities_forkedLightningTarget, "origin"), 3., "when calling addEffectDuration in tm_MagicCrystal, line 236")
		set receiver = widget_addEffect(tm_Main_theMonster, Abilities_farseerMissile, "origin")
		call effect_destr(receiver)
		set temp = Abilities_forkedLightningTarget
		set tempIndex = this
		set receiver_2 = addEffectDuration(addEffect_2(temp, vec2_withTerrainZ(MagicCrystal_pos[tempIndex], MagicCrystal_pos_2[tempIndex], 50.), vec2_withTerrainZ_return_y, vec2_withTerrainZ_return_z), 3., "when calling addEffectDuration in tm_MagicCrystal, line 240")
		call effect_setScale(receiver_2, 1.5)
		set temp_2 = Abilities_farseerMissile
		set tempIndex_2 = this
		set receiver_3 = addEffect_2(temp_2, vec2_withTerrainZ(MagicCrystal_pos[tempIndex_2], MagicCrystal_pos_2[tempIndex_2], 50.), vec2_withTerrainZ_return_y, vec2_withTerrainZ_return_z)
		call effect_setScale(receiver_3, 1.5)
		set receiver_4 = receiver_3
		call effect_destr(receiver_4)
		call timer_start(MagicCrystal_runTimer1, 2.0, ref_function_MagicCrystal_releaseBossDelay1)
	elseif tm_Main_bossHasAbsorbed then
		set receiver_5 = MagicCrystal_absorbSFX[0]
		call effect_setTimeScale(receiver_5, 1.)
		set receiver_6 = receiver_5
		call effect_destr(receiver_6)
		set receiver_7 = MagicCrystal_absorbSFX[1]
		call effect_destr(receiver_7)
		call unit_setInvulnerable(tm_Main_theMonster, true)
		call unit_setAnimation_2(tm_Main_theMonster, "attack")
		call unit_queueAnimation(tm_Main_theMonster, "stand")
		call addEffectDuration(widget_addEffect(tm_Main_theMonster, "Abilities\\Spells\\Human\\ManaFlare\\ManaFlareBoltImpact.mdl", "chest"), 3.0, "when calling addEffectDuration in tm_MagicCrystal, line 262")
		set tempIndex_3 = this
		call addEffectDuration(addEffect_2("Abilities\\Spells\\Human\\ManaFlare\\ManaFlareBoltImpact.mdl", vec2_withTerrainZ(MagicCrystal_pos[tempIndex_3], MagicCrystal_pos_2[tempIndex_3], 50.), vec2_withTerrainZ_return_y, vec2_withTerrainZ_return_z), 3.0, "when calling addEffectDuration in tm_MagicCrystal, line 263")
		call timer_start(MagicCrystal_runTimer1, 2.0, ref_function_MagicCrystal_releaseBossDelay1)
		call print("Boss has absorbed!")
	else
		set receiver_8 = MagicCrystal_absorbSFX[0]
		call effect_setTimeScale(receiver_8, 1.)
		set receiver_9 = receiver_8
		call effect_destr(receiver_9)
		set receiver_10 = MagicCrystal_absorbSFX[1]
		call effect_destr(receiver_10)
		call unit_setAnimation_2(tm_Main_theMonster, "stand")
		call timer_start(MagicCrystal_runTimer1, 2.0, ref_function_MagicCrystal_releaseBossDelay2)
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
	set receiver_6 = null
	set receiver_7 = null
	set receiver_8 = null
	set receiver_9 = null
	set receiver_10 = null
endfunction

function dispatch_MagicCrystal_tm_MagicCrystal_MagicCrystal_releaseBoss takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if MagicCrystal_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling MagicCrystal.tm_MagicCrystal_MagicCrystal_releaseBoss", "when calling error in ")
		else
			call error("Called MagicCrystal.tm_MagicCrystal_MagicCrystal_releaseBoss on invalid object.", "when calling error in ")
		endif
	endif
	call MagicCrystal_releaseBoss(this, "when calling releaseBoss in tm_MagicCrystal, line 225")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function MagicCrystal_dies takes string stackPos returns nothing
	local unit u
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set u = GetDyingUnit()
	if unit_getTypeId(u) == MagicCrystal_placeholderId then
		if u == MagicCrystal_placeholder[MagicCrystal_crystals[0]] then
			call dispatch_MagicCrystal_tm_MagicCrystal_MagicCrystal_death(MagicCrystal_crystals[0], "when calling death in tm_MagicCrystal, line 183")
			call dispatch_MagicCrystal_tm_MagicCrystal_MagicCrystal_releaseBoss(MagicCrystal_crystals[0], "when calling releaseBoss in tm_MagicCrystal, line 184")
		elseif u == MagicCrystal_placeholder[MagicCrystal_crystals[1]] then
			call dispatch_MagicCrystal_tm_MagicCrystal_MagicCrystal_death(MagicCrystal_crystals[1], "when calling death in tm_MagicCrystal, line 186")
			call dispatch_MagicCrystal_tm_MagicCrystal_MagicCrystal_releaseBoss(MagicCrystal_crystals[1], "when calling releaseBoss in tm_MagicCrystal, line 187")
		elseif u == MagicCrystal_placeholder[MagicCrystal_crystals[2]] then
			call dispatch_MagicCrystal_tm_MagicCrystal_MagicCrystal_death(MagicCrystal_crystals[2], "when calling death in tm_MagicCrystal, line 190")
			call dispatch_MagicCrystal_tm_MagicCrystal_MagicCrystal_releaseBoss(MagicCrystal_crystals[2], "when calling releaseBoss in tm_MagicCrystal, line 191")
		else
			call print("ERROR: A CRYSTAL DIED, BUT IS NOT AN INSTANCE!")
		endif
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set u = null
endfunction

function bridge_MagicCrystal_dies takes nothing returns nothing
	set wurst_stack_depth = 0
	call MagicCrystal_dies("tm_MagicCrystal, line 12")
endfunction

function unit_kill takes unit this returns nothing
	call KillUnit(this)
endfunction

function MagicCrystal_finishAbsorb takes string stackPos returns nothing
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in tm_MagicCrystal, line 282")
	call print("Absorb  has finished")
	set tm_Main_bossHasAbsorbed = true
	if MagicCrystal_index[instance] == 2 then
		set tm_Main_bossIsEnraged = true
		call dispatch_MagicCrystal_tm_MagicCrystal_MagicCrystal_death(instance, "when calling death in tm_MagicCrystal, line 289")
		call dispatch_MagicCrystal_tm_MagicCrystal_MagicCrystal_releaseBoss(instance, "when calling releaseBoss in tm_MagicCrystal, line 290")
	elseif MagicCrystal_index[instance] == 0 or MagicCrystal_index[instance] == 1 then
		call unit_kill(MagicCrystal_placeholder[instance])
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_MagicCrystal_finishAbsorb takes nothing returns nothing
	set wurst_stack_depth = 0
	call MagicCrystal_finishAbsorb("tm_MagicCrystal, line 330")
endfunction

function bridge_MagicCrystal_finishAbsorb_2 takes nothing returns nothing
	set wurst_stack_depth = 0
	call MagicCrystal_finishAbsorb("tm_MagicCrystal, line 311")
endfunction

function MagicCrystal_loopSound takes string stackPos returns nothing
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in tm_MagicCrystal, line 300")
	call sound_setVolume(SoundInstance_snd[dispatch_SoundDefinition_SoundUtils_SoundDefinition_playOnPoint_2(MagicCrystal_sound_AbsorbCrystal, unit_getPos3Fly(MagicCrystal_placeholder[instance]), unit_getPos3Fly_return_y, unit_getPos3Fly_return_z, "when calling playOnPoint in tm_MagicCrystal, line 301")], 75)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function lightning_getColorA takes lightning this returns real
	return GetLightningColorA(this)
endfunction

function lightning_setColor takes lightning this, integer c_red, integer c_green, integer c_blue, integer c_alpha returns boolean
	return SetLightningColor(this, c_red * 1. / 255, c_green * 1. / 255, c_blue * 1. / 255, c_alpha * 1. / 255)
endfunction

function UnitLightning_setColor takes integer this, integer red, integer green, integer blue returns nothing
	call lightning_setColor(UnitLightning_sfx[this], red, green, blue, R2I(lightning_getColorA(UnitLightning_sfx[this]) * 255.))
endfunction

function dispatch_UnitLightning_UnitLightning_UnitLightning_setColor takes integer this, integer red, integer green, integer blue, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if UnitLightning_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling UnitLightning.UnitLightning_UnitLightning_setColor", "when calling error in ")
		else
			call error("Called UnitLightning.UnitLightning_UnitLightning_setColor on invalid object.", "when calling error in ")
		endif
	endif
	call UnitLightning_setColor(this, red, green, blue)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function alloc_UnitLightning takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if UnitLightning_firstFree == 0 then
		if UnitLightning_maxIndex < 32768 then
			set UnitLightning_maxIndex = UnitLightning_maxIndex + 1
			set this = UnitLightning_maxIndex
			set UnitLightning_typeId[this] = 735
		else
			call error("Out of memory: Could not create UnitLightning.", "when calling error in ")
			set this = 0
		endif
	else
		set UnitLightning_firstFree = UnitLightning_firstFree - 1
		set this = UnitLightning_nextFree[UnitLightning_firstFree]
		set UnitLightning_typeId[this] = 735
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_UnitLightning takes integer this, unit sourceUnit, unit targetUnit, real duration, string lightningtype, string stackPos returns nothing
	local timer receiver
	local timer receiver_2
	local timer receiver_3
	local timer receiver_4
	local integer temp
	local integer temp_2
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set UnitLightning_source[this] = sourceUnit
	set UnitLightning_target[this] = targetUnit
	set UnitLightning_sourceZ[this] = 300.
	set UnitLightning_targetZ[this] = 300.
	set UnitLightning_sfx[this] = AddLightningEx(lightningtype, false, unit_getX(UnitLightning_source[this]), unit_getY(UnitLightning_source[this]), unit_getLocalZ(UnitLightning_source[this]) + UnitLightning_sourceZ[this], unit_getX(UnitLightning_target[this]), unit_getY(UnitLightning_target[this]), unit_getLocalZ(UnitLightning_target[this]) + UnitLightning_targetZ[this])
	set temp = this
	set receiver = getTimer("when calling getTimer in UnitLightning, line 55")
	call timer_setData(receiver, this, "when calling setData in UnitLightning, line 56")
	set receiver_2 = receiver
	call timer_startPeriodic(receiver_2, UnitLightning_UPDATE_FREQ, ref_function_bridge_UnitLightning_update)
	set UnitLightning_updateTimer[temp] = receiver_2
	set temp_2 = this
	set receiver_3 = getTimer("when calling getTimer in UnitLightning, line 59")
	call timer_setData(receiver_3, this, "when calling setData in UnitLightning, line 60")
	set receiver_4 = receiver_3
	call timer_start(receiver_4, duration, ref_function_bridge_UnitLightning_kill)
	set UnitLightning_durationTimer[temp_2] = receiver_4
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
endfunction

function new_UnitLightning takes unit sourceUnit, unit targetUnit, real duration, string lightningtype, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_UnitLightning("when calling UnitLightning in UnitLightning, line 43")
	call construct_UnitLightning(this, sourceUnit, targetUnit, duration, lightningtype, "when calling construct_UnitLightning in UnitLightning, line 43")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function MagicCrystal_initiateAbsorbDelay1 takes string stackPos returns nothing
	local integer instance
	local unit receiver
	local unit receiver_2
	local integer receiver_3
	local effect receiver_4
	local effect receiver_5
	local timer receiver_6
	local integer temp
	local integer temp_2
	local integer tempIndex
	local player temp_3
	local integer temp_4
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in tm_MagicCrystal, line 306")
	if MagicCrystal_index[instance] == 2 then
		call timer_start(MagicCrystal_runTimer1, 0., ref_function_bridge_MagicCrystal_finishAbsorb)
	elseif MagicCrystal_index[instance] == 0 or MagicCrystal_index[instance] == 1 then
		set temp = instance
		set temp_3 = Player(11)
		set temp_4 = MagicCrystal_placeholderId
		set tempIndex = instance
		set receiver = createUnit(temp_3, temp_4, MagicCrystal_pos[tempIndex], MagicCrystal_pos_2[tempIndex], 0.)
		call unit_setVertexColor(receiver, 255, 255, 255, 0)
		set receiver_2 = receiver
		call unit_setMaxHP(receiver_2, MagicCrystal_CRYSTAL_HP, true)
		set MagicCrystal_placeholder[temp] = receiver_2
		set receiver_3 = new_UnitLightning(MagicCrystal_placeholder[instance], tm_Main_theMonster, MagicCrystal_ABSORB_DUR, "MBUR", "when calling new_UnitLightning in tm_MagicCrystal, line 318")
		call dispatch_UnitLightning_UnitLightning_UnitLightning_setColor(receiver_3, 255, 255, 255, "when calling setColor in tm_MagicCrystal, line 319")
		set receiver_4 = addEffect_2("units\\nightelf\\Wisp\\Wisp.mdl", unit_getX(tm_Main_theMonster), unit_getY(tm_Main_theMonster), unit_getLocalZ(tm_Main_theMonster) - 200.)
		call effect_setColorByPlayer(receiver_4, Player(22))
		set receiver_5 = receiver_4
		call effect_setScale(receiver_5, 1.5)
		set MagicCrystal_absorbSFX[0] = receiver_5
		set MagicCrystal_absorbSFX[1] = widget_addEffect(tm_Main_theMonster, "Abilities\\Spells\\Other\\Drain\\ManaDrainTarget.mdl", "chest")
		call timer_setData(MagicCrystal_runTimer1, instance, "when calling setData in tm_MagicCrystal, line 326")
		call timer_setData(MagicCrystal_runTimer2, instance, "when calling setData in tm_MagicCrystal, line 327")
		call timer_setData(MagicCrystal_runTimer3, instance, "when calling setData in tm_MagicCrystal, line 328")
		call timer_start(MagicCrystal_runTimer1, MagicCrystal_ABSORB_DUR, ref_function_bridge_MagicCrystal_finishAbsorb_2)
		call MagicCrystal_loopSound("when calling loopSound in tm_MagicCrystal, line 331")
		call timer_startPeriodic(MagicCrystal_runTimer2, 1.65, ref_function_bridge_MagicCrystal_loopSound)
		call MagicCrystal_animation()
		call timer_startPeriodic(MagicCrystal_runTimer3, 1.1, ref_function_MagicCrystal_animation)
		set temp_2 = instance
		set receiver_6 = getTimer("when calling getTimer in tm_MagicCrystal, line 336")
		call timer_setData(receiver_6, instance, "when calling setData in tm_MagicCrystal, line 337")
		set MagicCrystal_lightningTimer[temp_2] = receiver_6
		call timer_startPeriodic(MagicCrystal_lightningTimer[instance], MagicCrystal_LIGHTNING_FREQ, ref_function_bridge_MagicCrystal_lightning_Fire)
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set receiver_4 = null
	set receiver_5 = null
	set receiver_6 = null
	set temp_3 = null
endfunction

function bridge_MagicCrystal_initiateAbsorbDelay1 takes nothing returns nothing
	set wurst_stack_depth = 0
	call MagicCrystal_initiateAbsorbDelay1("tm_MagicCrystal, line 349")
endfunction

function MagicCrystal_lightning_Fire takes string stackPos returns nothing
	local integer instance
	local integer receiver
	local effect receiver_2
	local effect receiver_3
	local effect receiver_4
	local effect receiver_5
	local effect receiver_6
	local effect receiver_7
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in tm_MagicCrystal, line 141")
	set receiver = new_UnitLightning(MagicCrystal_placeholder[instance], General_hunter, 1., "FORK", "when calling new_UnitLightning in tm_MagicCrystal, line 143")
	call dispatch_UnitLightning_UnitLightning_UnitLightning_setColor(receiver, 150, 255, 150, "when calling setColor in tm_MagicCrystal, line 144")
	set receiver_2 = addEffectDuration(widget_addEffect(MagicCrystal_placeholder[instance], "Abilities\\Spells\\NightElf\\Blink\\BlinkTarget.mdl", "chest"), 2.0, "when calling addEffectDuration in tm_MagicCrystal, line 146")
	call effect_setColor(receiver_2, 100, 255, 0)
	set receiver_3 = addEffectDuration(widget_addEffect(General_hunter, "Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl", "origin"), 2.0, "when calling addEffectDuration in tm_MagicCrystal, line 148")
	call effect_setColor(receiver_3, 100, 255, 0)
	set receiver_4 = widget_addEffect(General_hunter, "Abilities\\Weapons\\FarseerMissile\\FarseerMissile.mdl", "chest")
	call effect_setColor(receiver_4, 100, 255, 0)
	set receiver_5 = receiver_4
	call effect_destr(receiver_5)
	set receiver_6 = widget_addEffect(General_hunter, "units\\nightelf\\Wisp\\Wisp.mdl", "origin")
	call effect_setColorByPlayer(receiver_6, Player(22))
	set receiver_7 = receiver_6
	call effect_destr(receiver_7)
	call unit_damageTarget(tm_Main_theMonster, General_hunter, MagicCrystal_LIGHTNING_DMG)
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
	set receiver_6 = null
	set receiver_7 = null
endfunction

function bridge_MagicCrystal_lightning_Fire takes nothing returns nothing
	set wurst_stack_depth = 0
	call MagicCrystal_lightning_Fire("tm_MagicCrystal, line 338")
endfunction

function bridge_MagicCrystal_loopSound takes nothing returns nothing
	set wurst_stack_depth = 0
	call MagicCrystal_loopSound("tm_MagicCrystal, line 332")
endfunction

function RegisterEvents_closure_impl takes string stackPos returns boolean
	local boolean stackTrace_tempReturn
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set stackTrace_tempReturn = trigger_evaluate(triggerFromIndex(dispatch_HashMap_HashMap_HashMap_get(RegisterEvents_onCastMap, GetSpellAbilityId(), "when calling get in RegisterEvents, line 58"), "when calling triggerFromIndex in RegisterEvents, line 58"))
	set wurst_stack_depth = wurst_stack_depth - 1
	return stackTrace_tempReturn
endfunction

function bridge_RegisterEvents_closure_impl takes nothing returns boolean
	set wurst_stack_depth = 0
	return RegisterEvents_closure_impl("RegisterEvents, line 58")
endfunction

function SoundDefinition_playSound takes string stackPos returns nothing
	local timer tm
	local integer sdata
	local timer receiver
	local timer receiver_2
	local integer tempIndex
	local real tempTupleSelectionResult_1
	local real temp_tempTupleSelectionResult_1
	local integer tempIndex_2
	local real tempTupleSelectionResult_2
	local real temp_tempTupleSelectionResult_2
	local integer tempIndex_3
	local real tempTupleSelectionResult_1_2
	local real temp_tempTupleSelectionResult_1_2
	local integer tempIndex_4
	local real tempTupleSelectionResult_2_2
	local real temp_tempTupleSelectionResult_2_2
	local integer tempIndex_5
	local real tempTupleSelectionResult_3
	local real temp_tempTupleSelectionResult_3
	local boolean andLeft
	local sound temp
	local real temp_2
	local real temp_3
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set tm = GetExpiredTimer()
	set sdata = timer_getData(tm, "when calling getData in SoundUtils, line 125")
	if SoundInstance_onUnit[sdata] != null then
		call AttachSoundToUnit(SoundInstance_snd[sdata], SoundInstance_onUnit[sdata])
	endif
	set tempIndex = sdata
	set temp_tempTupleSelectionResult_1 = SoundInstance_pos[tempIndex]
	set tempTupleSelectionResult_1 = temp_tempTupleSelectionResult_1
	if tempTupleSelectionResult_1 != 0. then
		set tempIndex_2 = sdata
		set temp_tempTupleSelectionResult_2 = SoundInstance_pos_2[tempIndex_2]
		set tempTupleSelectionResult_2 = temp_tempTupleSelectionResult_2
		set andLeft = tempTupleSelectionResult_2 != 0.
	else
		set andLeft = false
	endif
	if andLeft then
		set temp = SoundInstance_snd[sdata]
		set tempIndex_3 = sdata
		set temp_tempTupleSelectionResult_1_2 = SoundInstance_pos[tempIndex_3]
		set tempTupleSelectionResult_1_2 = temp_tempTupleSelectionResult_1_2
		set temp_2 = tempTupleSelectionResult_1_2
		set tempIndex_4 = sdata
		set temp_tempTupleSelectionResult_2_2 = SoundInstance_pos_2[tempIndex_4]
		set tempTupleSelectionResult_2_2 = temp_tempTupleSelectionResult_2_2
		set temp_3 = tempTupleSelectionResult_2_2
		set tempIndex_5 = sdata
		set temp_tempTupleSelectionResult_3 = SoundInstance_pos_3[tempIndex_5]
		set tempTupleSelectionResult_3 = temp_tempTupleSelectionResult_3
		call SetSoundPosition(temp, temp_2, temp_3, tempTupleSelectionResult_3)
	endif
	if SoundInstance_p[sdata] != null then
		if GetLocalPlayer() == SoundInstance_p[sdata] then
			call StartSound(SoundInstance_snd[sdata])
		endif
	else
		call StartSound(SoundInstance_snd[sdata])
	endif
	call timer_release(tm, "when calling release in SoundUtils, line 135")
	set receiver = getTimer("when calling getTimer in SoundUtils, line 136")
	call timer_setData(receiver, sdata, "when calling setData in SoundUtils, line 137")
	set receiver_2 = receiver
	call timer_start(receiver_2, SoundDefinition_duration[SoundInstance_soundDef[sdata]] * 0.001, ref_function_bridge_SoundDefinition_recycle)
	set wurst_stack_depth = wurst_stack_depth - 1
	set tm = null
	set receiver = null
	set receiver_2 = null
	set temp = null
endfunction

function bridge_SoundDefinition_playSound takes nothing returns nothing
	set wurst_stack_depth = 0
	call SoundDefinition_playSound("SoundUtils, line 90")
endfunction

function bridge_SoundDefinition_playSound_2 takes nothing returns nothing
	set wurst_stack_depth = 0
	call SoundDefinition_playSound("SoundUtils, line 118")
endfunction

function LinkedList_push takes integer this, integer elem, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_LinkedList_LinkedList_LinkedList_add_1(this, elem, "when calling add in LinkedList, line 66")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_LinkedList_LinkedList_LinkedList_push takes integer this, integer elem, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LinkedList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling LinkedList.LinkedList_LinkedList_push", "when calling error in ")
		else
			call error("Called LinkedList.LinkedList_LinkedList_push on invalid object.", "when calling error in ")
		endif
	endif
	call LinkedList_push(this, elem, "when calling push in LinkedList, line 65")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Sim3DSound_onDestroy takes integer this returns nothing
endfunction

function dealloc_Sim3DSound takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Sim3DSound_typeId[obj] == 0 then
		call error("Double free: object of type Sim3DSound", "when calling error in ")
	else
		set Sim3DSound_firstFree = Sim3DSound_firstFree + 1
		set Sim3DSound_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroySim3DSound takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call Sim3DSound_onDestroy(this)
	call dealloc_Sim3DSound(this, "when calling Sim3DSound in Simulate3dSound, line 87")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_Sim3DSound_destroySim3DSound takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Sim3DSound_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Sim3DSound.destroySim3DSound", "when calling error in ")
		else
			call error("Called Sim3DSound.destroySim3DSound on invalid object.", "when calling error in ")
		endif
	endif
	call destroySim3DSound(this, "when calling destroySim3DSound in Simulate3dSound, line 87")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function SoundInstance_onDestroy takes integer this returns nothing
endfunction

function dealloc_SoundInstance takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if SoundInstance_typeId[obj] == 0 then
		call error("Double free: object of type SoundInstance", "when calling error in ")
	else
		set SoundInstance_nextFree[SoundInstance_firstFree] = obj
		set SoundInstance_firstFree = SoundInstance_firstFree + 1
		set SoundInstance_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroySoundInstance takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call SoundInstance_onDestroy(this)
	call dealloc_SoundInstance(this, "when calling SoundInstance in SoundUtils, line 25")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_SoundInstance_destroySoundInstance takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if SoundInstance_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling SoundInstance.destroySoundInstance", "when calling error in ")
		else
			call error("Called SoundInstance.destroySoundInstance on invalid object.", "when calling error in ")
		endif
	endif
	call destroySoundInstance(this, "when calling destroySoundInstance in SoundUtils, line 25")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function SoundDefinition_recycle takes string stackPos returns nothing
	local timer tm
	local integer sdata
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set tm = GetExpiredTimer()
	set sdata = timer_getData(tm, "when calling getData in SoundUtils, line 142")
	set SoundInstance_p[sdata] = null
	if SoundInstance_s3s[sdata] != 0 then
		call dispatch_Sim3DSound_destroySim3DSound(SoundInstance_s3s[sdata], "when calling Sim3DSound in SoundUtils, line 145")
	endif
	if dispatch_LinkedList_LinkedList_LinkedList_size(SoundDefinition_soundStack[SoundInstance_soundDef[sdata]], "when calling size in SoundUtils, line 146") < 4 then
		call dispatch_LinkedList_LinkedList_LinkedList_push(SoundDefinition_soundStack[SoundInstance_soundDef[sdata]], sdata, "when calling push in SoundUtils, line 147")
	else
		call dispatch_SoundInstance_destroySoundInstance(sdata, "when calling SoundInstance in SoundUtils, line 149")
	endif
	call timer_release(tm, "when calling release in SoundUtils, line 151")
	set wurst_stack_depth = wurst_stack_depth - 1
	set tm = null
endfunction

function bridge_SoundDefinition_recycle takes nothing returns nothing
	set wurst_stack_depth = 0
	call SoundDefinition_recycle("SoundUtils, line 136")
endfunction

function Attack_deactivate takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_release(Attack_timer_AttackCD, "when calling release in bear_Attack, line 105")
	call timer_release(Attack_timer_UpdateMove, "when calling release in bear_Attack, line 106")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function texttag_destr takes texttag this returns nothing
	call DestroyTextTag(this)
endfunction

function Bleed_deactivate takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Bleed_ENABLED then
		call texttag_destr(Bleed_text)
		call timer_release(Bleed_timer_Damage, "when calling release in bear_Bleed, line 75")
		call timer_release(Bleed_timer_UpdateText, "when calling release in bear_Bleed, line 76")
		set Bleed_timer_Duration = getTimer("when calling getTimer in bear_Bleed, line 77")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Rock_destroyAll takes string stackPos returns nothing
	local integer i
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set i = 0
	loop
		exitwhen i > 3
		if Rock_objects[i] != 0 then
			call dispatch_Rock_destroyRock(Rock_objects[i], "when calling Rock in bear_Charge, line 272")
		endif
		set i = i + 1
	endloop
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Charge_deactivate takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Charge_ENABLED then
		call timer_release(Charge_timer_Misc, "when calling release in bear_Charge, line 229")
		call timer_release(Charge_timer_Animation, "when calling release in bear_Charge, line 230")
		call timer_release(Charge_timer_SFX, "when calling release in bear_Charge, line 231")
		call timer_release(Charge_timer_Shake, "when calling release in bear_Charge, line 232")
		call Rock_destroyAll("when calling destroyAll in bear_Charge, line 233")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Frenzy_deactivate takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Frenzy_ENABLED then
		call timer_release(Frenzy_timer_Misc, "when calling release in bear_Frenzy, line 129")
		call timer_release(Frenzy_timer_Duration, "when calling release in bear_Frenzy, line 130")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Shockwave_deactivate takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Shockwave_ENABLED then
		call timer_release(Shockwave_timer_DmgTimer, "when calling release in bear_Shockwave, line 172")
		call timer_release(Shockwave_timer_Status, "when calling release in bear_Shockwave, line 173")
		call timer_release(Shockwave_timer_Cooldown, "when calling release in bear_Shockwave, line 174")
		call group_destr(Shockwave_targetsHit)
		call group_destr(Shockwave_tempGroup)
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function TheBear_clearEvent takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call unit_remove(TheBear_theBear)
	call timer_release(TheBear_mainLoopTimer, "when calling release in bear_Main, line 191")
	call timer_release(TheBear_idleDelayTimer, "when calling release in bear_Main, line 192")
	call trigger_disable(TheBear_trg_Death)
	call Attack_deactivate("when calling deactivate in bear_Main, line 194")
	call Bleed_deactivate("when calling deactivate in bear_Main, line 195")
	call Shockwave_deactivate("when calling deactivate in bear_Main, line 196")
	call Frenzy_deactivate("when calling deactivate in bear_Main, line 197")
	call Charge_deactivate("when calling deactivate in bear_Main, line 198")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_TheBear_clearEvent takes nothing returns nothing
	set wurst_stack_depth = 0
	call TheBear_clearEvent("bear_Main, line 137")
endfunction

function bridge_TheBear_clearEvent_2 takes nothing returns nothing
	set wurst_stack_depth = 0
	call TheBear_clearEvent("bear_Main, line 119")
endfunction

function Fade_setEndDelay takes integer this, real duration returns nothing
	set Fade_endDelay[this] = duration
endfunction

function dispatch_Fade_FadeAndFilters_Fade_setEndDelay takes integer this, real duration, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Fade_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Fade.FadeAndFilters_Fade_setEndDelay", "when calling error in ")
		else
			call error("Called Fade.FadeAndFilters_Fade_setEndDelay on invalid object.", "when calling error in ")
		endif
	endif
	call Fade_setEndDelay(this, duration)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function BossEvent_initiate takes code onInit, code onFight, string stackPos returns nothing
	local integer receiver
	local integer receiver_2
	local integer receiver_3
	local integer receiver_4
	local integer receiver_5
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if  not BossEvent_isRunning then
		set BossEvent_isRunning = true
		call unit_pause(General_hunter)
		set BossEvent_codeOnInit = onInit
		call stopMusic()
		call PlaySound(Sounds_questNew)
		set receiver = new_Fade("when calling new_Fade in BossEvent, line 98")
		call dispatch_Fade_FadeAndFilters_Fade_onFadeOut(receiver, ref_function_BossEvent_onFade, "when calling onFadeOut in BossEvent, line 99")
		set receiver_2 = receiver
		call dispatch_Fade_FadeAndFilters_Fade_onFadeIn(receiver_2, onFight, "when calling onFadeIn in BossEvent, line 100")
		set receiver_3 = receiver_2
		call dispatch_Fade_FadeAndFilters_Fade_setEndDelay(receiver_3, 2., "when calling setEndDelay in BossEvent, line 101")
		set receiver_4 = receiver_3
		call dispatch_Fade_FadeAndFilters_Fade_setStartDelay(receiver_4, 3., "when calling setStartDelay in BossEvent, line 102")
		set receiver_5 = receiver_4
		call dispatch_Fade_FadeAndFilters_Fade_start(receiver_5, FadeAndFilters_FADEOUTIN, "when calling start in BossEvent, line 103")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function TheBear_initEvent takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call BossEvent_initiate(ref_function_bridge_TheBear_onEventInit, ref_function_TheBear_initFight, "when calling initiate in bear_Main, line 184")
	set wurst_stack_depth = wurst_stack_depth - 1
	return false
endfunction

function bridge_TheBear_initEvent takes nothing returns boolean
	set wurst_stack_depth = 0
	return TheBear_initEvent("bear_Main, line 204")
endfunction

function Attack_start takes nothing returns nothing
	if unit_getCurrentOrder(TheBear_theBear) != Orders_fingerofdeath then
		if vec2_distanceTo(unit_getPos(TheBear_theBear), unit_getPos_return_y, unit_getPos(General_hunter), unit_getPos_return_y) <= Attack_ATTACKRANGE then
			if  not Attack_onCooldown then
				call unit_issueTargetOrderById(TheBear_theBear, Orders_fingerofdeath, General_hunter)
			elseif Attack_updateMove then
				call unit_setFacing(TheBear_theBear, vec2_angleTo(unit_getPos(TheBear_theBear), unit_getPos_return_y, unit_getPos(General_hunter), unit_getPos_return_y))
				set Attack_updateMove = false
				call timer_start(Attack_timer_UpdateMove, Attack_UPDATEMOVE_FREQ, ref_function_Attack_setUpdateMove)
			endif
		elseif Attack_updateMove then
			call unit_issuePointOrderById(TheBear_theBear, Orders_move, unit_getPos(General_hunter), unit_getPos_return_y)
			set Attack_updateMove = false
			call timer_start(Attack_timer_UpdateMove, Attack_UPDATEMOVE_FREQ, ref_function_Attack_setUpdateMove)
		endif
	endif
endfunction

function Charge_start takes nothing returns nothing
	call print("starting charge")
	if Charge_ENABLED then
		set Charge_isReady = false
		set TheBear_isIdle = false
		call unit_pause(TheBear_theBear)
		call timer_start(Charge_timer_Misc, 0.5, ref_function_bridge_Charge_startDelay1)
	endif
endfunction

function Enrage_adjust takes nothing returns nothing
	local real newCount = unit_getHP(TheBear_theBear) / unit_getMaxHP(TheBear_theBear)
	if newCount != Enrage_count then
		set Enrage_count = newCount
		call unit_setVertexColor(TheBear_theBear, TheBear_startRed, R2I(TheBear_startGreen - TheBear_startGreen * Enrage_greenPercReduc * (1. - Enrage_count)), R2I(TheBear_startBlue - TheBear_startBlue * Enrage_bluePercReduc * (1. - Enrage_count)), 255)
		call unit_setScale(TheBear_theBear, TheBear_startScale * (1. + (Enrage_sizeInc - Enrage_sizeInc * Enrage_count)) * (1. + Frenzy_sizeInc))
		set TheBear_damageInc = Enrage_damageInc - Enrage_damageInc * Enrage_count
		call unit_setBaseDamage(TheBear_theBear, R2I(TheBear_ATTACKDMG * (1. + TheBear_damageInc)), 1)
	endif
endfunction

function Frenzy_start takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Frenzy_ENABLED then
		set TheBear_isIdle = false
		set TheBear_canAttack = false
		set Frenzy_isReady = false
		set Frenzy_isActive = true
		call unit_pause(TheBear_theBear)
		call unit_setAnimation_2(TheBear_theBear, "attack slam")
		call unit_queueAnimation(TheBear_theBear, "stand")
		call dispatch_SoundDefinition_SoundUtils_SoundDefinition_play_2(Frenzy_effectSound1, "when calling play in bear_Frenzy, line 66")
		call dispatch_SoundDefinition_SoundUtils_SoundDefinition_play_2(Frenzy_effectSound2, "when calling play in bear_Frenzy, line 67")
		set Frenzy_sfx[0] = widget_addEffect(TheBear_theBear, "Abilities\\Spells\\Orc\\Bloodlust\\BloodlustTarget.mdl", "hand right")
		set Frenzy_sfx[1] = widget_addEffect(TheBear_theBear, "Abilities\\Spells\\Orc\\Bloodlust\\BloodlustTarget.mdl", "hand left")
		set Frenzy_shrink = false
		set Frenzy_sizeInc = 0.
		call unit_setMoveSpeed(TheBear_theBear, TheBear_MOVESPEED * (1. + Frenzy_MOVESPEEDINC))
		set TheBear_currentAttackSpeed = TheBear_ATTACKSPEED / (1. + Frenzy_ATTACKSPEEDINC)
		call timer_startPeriodic(Frenzy_timer_Misc, Frenzy_GROWTHFREQ, ref_function_Frenzy_growth)
		call timer_start(Frenzy_timer_Duration, Frenzy_DURATION, ref_function_Frenzy_stop)
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Shockwave_start takes nothing returns nothing
	if Shockwave_ENABLED then
		set TheBear_isIdle = false
		set TheBear_canAttack = false
		set Shockwave_isReady = false
		set Shockwave_delayHasRun = false
		set Shockwave_delayIsRunning = false
		call unit_issuePointOrderById(TheBear_theBear, Orders_carrionswarm, unit_getPos(General_hunter), unit_getPos_return_y)
		call timer_startPeriodic(Shockwave_timer_Status, 0.5, ref_function_Shockwave_checkStatus)
	endif
endfunction

function Shockwave_startDelay takes nothing returns nothing
	if Shockwave_ENABLED then
		call timer_start(Shockwave_timer_Status, Shockwave_STARTDELAY, ref_function_Shockwave_endDelay)
		set Shockwave_delayIsRunning = true
	endif
endfunction

function TheBear_mainLoop takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call Enrage_adjust()
	if TheBear_isIdle then
		call print("Is Idle")
		if Charge_isReady and ( not Frenzy_isActive) then
			call Charge_start()
		elseif Frenzy_isReady then
			call Frenzy_start("when calling start in bear_Main, line 64")
		elseif Shockwave_ENABLED and ( not Frenzy_isActive) and Shockwave_isReady and ( not Shockwave_delayIsRunning) and vec2_distanceTo(unit_getPos(TheBear_theBear), unit_getPos_return_y, unit_getPos(General_hunter), unit_getPos_return_y) > Shockwave_MIN_DIST then
			if Shockwave_delayHasRun then
				call Shockwave_start()
			elseif  not Shockwave_delayIsRunning then
				call Shockwave_startDelay()
			endif
		elseif TheBear_canAttack then
			call Attack_start()
			call print("Is Idle")
		endif
		if Charge_isReady and ( not Frenzy_isActive) then
			call Charge_start()
		elseif Frenzy_isReady then
			call Frenzy_start("when calling start in bear_Main, line 80")
		elseif Shockwave_ENABLED and ( not Frenzy_isActive) and Shockwave_isReady and ( not Shockwave_delayIsRunning) and vec2_distanceTo(unit_getPos(TheBear_theBear), unit_getPos_return_y, unit_getPos(General_hunter), unit_getPos_return_y) > Shockwave_MIN_DIST then
			if Shockwave_delayHasRun then
				call Shockwave_start()
			elseif  not Shockwave_delayIsRunning then
				call Shockwave_startDelay()
			endif
		elseif TheBear_canAttack then
			call Attack_start()
		endif
	elseif TheBear_canAttack then
		call Attack_start()
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_TheBear_mainLoop takes nothing returns nothing
	set wurst_stack_depth = 0
	call TheBear_mainLoop("bear_Main, line 152")
endfunction

function Attack_activate takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set Attack_timer_AttackCD = getTimer("when calling getTimer in bear_Attack, line 100")
	set Attack_timer_UpdateMove = getTimer("when calling getTimer in bear_Attack, line 101")
	set Attack_updateMove = true
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function texttag_setColor takes texttag this, integer col_red, integer col_green, integer col_blue, integer col_alpha returns nothing
	call SetTextTagColor(this, col_red, col_green, col_blue, col_alpha)
endfunction

function texttag_setPos_2 takes texttag this, real pos_x, real pos_y, real pos_z returns nothing
	call SetTextTagPos(this, pos_x, pos_y, pos_z)
endfunction

function vec2_withZ takes real this_x, real this_y, real z returns real
	set vec2_withZ_return_x = this_x
	set vec2_withZ_return_y = this_y
	set vec2_withZ_return_z = z
	return vec2_withZ_return_x
endfunction

function createTTEx takes real pos_x, real pos_y, real pos_z, string message, real size, integer col_red, integer col_green, integer col_blue, integer col_alpha returns texttag
	local texttag receiver = CreateTextTag()
	local texttag receiver_2
	local texttag receiver_3
	local texttag receiver_4
	call texttag_setPos_2(receiver, vec2_withZ(vec3_toVec2(pos_x, pos_y, pos_z), vec3_toVec2_return_y, 20.), vec2_withZ_return_y, vec2_withZ_return_z)
	set receiver_2 = receiver
	call texttag_setText(receiver_2, message, size)
	set receiver_3 = receiver_2
	call texttag_setColor(receiver_3, col_red, col_green, col_blue, col_alpha)
	set receiver_4 = receiver_3
	call texttag_setVisibility(receiver_4, true)
	set createTTExtempReturn = receiver_4
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	return createTTExtempReturn
endfunction

function Bleed_activate takes string stackPos returns nothing
	local texttag receiver
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Bleed_ENABLED then
		set receiver = createTTEx(0., 0., 0., "", 30., 200, 25, 25, 255)
		call texttag_setVisibility(receiver, false)
		set Bleed_text = receiver
		set Bleed_stacks = 0
		set Bleed_timer_Damage = getTimer("when calling getTimer in bear_Bleed, line 66")
		set Bleed_timer_UpdateText = getTimer("when calling getTimer in bear_Bleed, line 67")
		set Bleed_timer_Duration = getTimer("when calling getTimer in bear_Bleed, line 68")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
endfunction

function alloc_Rock takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Rock_firstFree == 0 then
		if Rock_maxIndex < 32768 then
			set Rock_maxIndex = Rock_maxIndex + 1
			set this = Rock_maxIndex
			set Rock_typeId[this] = 705
		else
			call error("Out of memory: Could not create Rock.", "when calling error in ")
			set this = 0
		endif
	else
		set Rock_firstFree = Rock_firstFree - 1
		set this = Rock_nextFree[Rock_firstFree]
		set Rock_typeId[this] = 705
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_Rock takes integer this, integer whatIndex returns nothing
	local effect receiver
	local effect receiver_2
	local integer temp
	local integer tempIndex
	local integer tempIndex_2
	local integer tempIndex_3
	local integer tempIndex_4
	local string temp_2
	local player temp_3
	local integer temp_4
	set Rock_index[this] = whatIndex
	set tempIndex = this
	set tempIndex_2 = whatIndex
	set Rock_pos[tempIndex] = Rock_POS[tempIndex_2]
	set Rock_pos_2[tempIndex] = Rock_POS_2[tempIndex_2]
	set temp = this
	set temp_2 = Rock_models[GetRandomInt(0, 1)]
	set tempIndex_3 = this
	set receiver = addEffect(temp_2, Rock_pos[tempIndex_3], Rock_pos_2[tempIndex_3])
	call effect_setOrientation(receiver, 0., 0., GetRandomReal(0., 2. * Maths_PI))
	set receiver_2 = receiver
	call effect_setScale(receiver_2, GetRandomReal(1., 1.2))
	set Rock_model[temp] = receiver_2
	set temp_4 = this
	set temp_3 = Player(PLAYER_NEUTRAL_PASSIVE)
	set tempIndex_4 = this
	set Rock_collisionDummy[temp_4] = createUnit(temp_3, 1747988546, Rock_pos[tempIndex_4], Rock_pos_2[tempIndex_4], 0.)
	set receiver = null
	set receiver_2 = null
	set temp_3 = null
endfunction

function new_Rock takes integer whatIndex, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_Rock("when calling Rock in bear_Charge, line 254")
	call construct_Rock(this, whatIndex)
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function Rock_createAll takes string stackPos returns nothing
	local integer i
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set i = 0
	loop
		exitwhen i > 3
		set Rock_objects[i] = new_Rock(i, "when calling new_Rock in bear_Charge, line 277")
		set i = i + 1
	endloop
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Charge_activate takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Charge_ENABLED then
		set Charge_timer_Misc = getTimer("when calling getTimer in bear_Charge, line 214")
		set Charge_timer_Animation = getTimer("when calling getTimer in bear_Charge, line 215")
		set Charge_timer_SFX = getTimer("when calling getTimer in bear_Charge, line 216")
		set Charge_timer_Shake = getTimer("when calling getTimer in bear_Charge, line 217")
		call Rock_createAll("when calling createAll in bear_Charge, line 218")
		if Charge_STARTWITHCOOLDOWN then
			set Charge_isReady = false
			call timer_start(Charge_timer_Misc, Charge_COOLDOWN, ref_function_Charge_setReady)
		else
			set Charge_isReady = true
		endif
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function DayCycle_setAlwaysDay takes nothing returns nothing
	if DayCycle_enabled then
		set DayCycle_time = GetTimeOfDay()
		set DayCycle_enabled = false
	endif
	call EnableDawnDusk(false)
	call SetTimeOfDay(12.)
	call SetTimeOfDayScale(0.)
endfunction

function Frenzy_activate takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Frenzy_ENABLED then
		set Frenzy_timer_Misc = getTimer("when calling getTimer in bear_Frenzy, line 118")
		set Frenzy_timer_Duration = getTimer("when calling getTimer in bear_Frenzy, line 119")
		set Frenzy_sizeInc = 0.
		if Frenzy_STARTWITHCOOLDOWN then
			set Frenzy_isReady = false
			call timer_start(Frenzy_timer_Duration, Frenzy_COOLDOWN, ref_function_Frenzy_setReady)
		else
			set Frenzy_isReady = true
		endif
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Shockwave_activate takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Shockwave_ENABLED then
		set Shockwave_timer_DmgTimer = getTimer("when calling getTimer in bear_Shockwave, line 161")
		set Shockwave_timer_Status = getTimer("when calling getTimer in bear_Shockwave, line 162")
		set Shockwave_timer_Cooldown = getTimer("when calling getTimer in bear_Shockwave, line 163")
		set Shockwave_targetsHit = CreateGroup()
		set Shockwave_tempGroup = CreateGroup()
		set Shockwave_isReady = true
		set Shockwave_delayHasRun = false
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function TheBear_onEventInit takes string stackPos returns nothing
	local unit receiver
	local unit receiver_2
	local unit receiver_3
	local unit receiver_4
	local unit receiver_5
	local unit receiver_6
	local unit receiver_7
	local unit receiver_8
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call moveHunter(-9900., 12710., TheBear_camBounds, -9900., 12710.0 + 300.)
	set receiver = createUnit(Player(11), TheBear_BOSSID, -9938., 13489., Maths_PI * Maths_PIHALF)
	call unit_setMaxHP(receiver, TheBear_HP, true)
	set receiver_2 = receiver
	call unit_setArmor(receiver_2, TheBear_ARMOR)
	set receiver_3 = receiver_2
	call unit_setBaseDamage(receiver_3, 400, 1)
	set receiver_4 = receiver_3
	call unit_setMoveSpeed(receiver_4, TheBear_MOVESPEED)
	set receiver_5 = receiver_4
	call unit_setAttackCooldown(receiver_5, TheBear_ATTACKSPEED, 1)
	set receiver_6 = receiver_5
	call unit_pause(receiver_6)
	set receiver_7 = receiver_6
	call unit_setVertexColor(receiver_7, TheBear_startRed, TheBear_startGreen, TheBear_startBlue, 255)
	set receiver_8 = receiver_7
	call unit_setScale(receiver_8, TheBear_startScale)
	set TheBear_theBear = receiver_8
	call DayCycle_setAlwaysDay()
	call trigger_enable(TheBear_trg_Death)
	set TheBear_mainLoopTimer = getTimer("when calling getTimer in bear_Main, line 173")
	set TheBear_idleDelayTimer = getTimer("when calling getTimer in bear_Main, line 174")
	call Attack_activate("when calling activate in bear_Main, line 176")
	call Bleed_activate("when calling activate in bear_Main, line 177")
	call Shockwave_activate("when calling activate in bear_Main, line 178")
	call Frenzy_activate("when calling activate in bear_Main, line 179")
	call Charge_activate("when calling activate in bear_Main, line 180")
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
	set receiver_6 = null
	set receiver_7 = null
	set receiver_8 = null
endfunction

function bridge_TheBear_onEventInit takes nothing returns nothing
	set wurst_stack_depth = 0
	call TheBear_onEventInit("bear_Main, line 184")
endfunction

function TheNecromancer_initEvent takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call BossEvent_initiate(ref_function_bridge_TheNecromancer_onEventInit, ref_function_TheNecromancer_initFight, "when calling initiate in nec_Main, line 115")
	set wurst_stack_depth = wurst_stack_depth - 1
	return false
endfunction

function bridge_TheNecromancer_initEvent takes nothing returns boolean
	set wurst_stack_depth = 0
	return TheNecromancer_initEvent("nec_Main, line 130")
endfunction

function AddSpawner_setSpawnEffect takes integer this, string sfx returns nothing
	set AddSpawner_spawnSfx[this] = sfx
endfunction

function dispatch_AddSpawner_BossAdd_AddSpawner_setSpawnEffect takes integer this, string sfx, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if AddSpawner_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling AddSpawner.BossAdd_AddSpawner_setSpawnEffect", "when calling error in ")
		else
			call error("Called AddSpawner.BossAdd_AddSpawner_setSpawnEffect on invalid object.", "when calling error in ")
		endif
	endif
	call AddSpawner_setSpawnEffect(this, sfx)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function AddSpawner_setSpawnRandom takes integer this, rect spawnRect, real spawnFreq returns nothing
	set AddSpawner_spawnRect[this] = spawnRect
	set AddSpawner_spawnFreq[this] = spawnFreq
endfunction

function dispatch_AddSpawner_BossAdd_AddSpawner_setSpawnRandom takes integer this, rect spawnRect, real spawnFreq, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if AddSpawner_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling AddSpawner.BossAdd_AddSpawner_setSpawnRandom", "when calling error in ")
		else
			call error("Called AddSpawner.BossAdd_AddSpawner_setSpawnRandom on invalid object.", "when calling error in ")
		endif
	endif
	call AddSpawner_setSpawnRandom(this, spawnRect, spawnFreq)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function AddSpawner_setTarget takes integer this, unit target returns nothing
	set AddSpawner_target[this] = target
endfunction

function dispatch_AddSpawner_BossAdd_AddSpawner_setTarget takes integer this, unit target, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if AddSpawner_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling AddSpawner.BossAdd_AddSpawner_setTarget", "when calling error in ")
		else
			call error("Called AddSpawner.BossAdd_AddSpawner_setTarget on invalid object.", "when calling error in ")
		endif
	endif
	call AddSpawner_setTarget(this, target)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function AddSpawner_setUnit takes integer this, integer addId, player owner, integer health, integer mana, integer damage_2, real armor, real attackSpeed, real moveSpeed returns nothing
	set AddSpawner_addId[this] = addId
	set AddSpawner_owner[this] = owner
	set AddSpawner_health[this] = health
	set AddSpawner_mana[this] = mana
	set AddSpawner_damage[this] = damage_2
	set AddSpawner_armor[this] = armor
	set AddSpawner_attackSpeed[this] = attackSpeed
	set AddSpawner_moveSpeed[this] = moveSpeed
endfunction

function dispatch_AddSpawner_BossAdd_AddSpawner_setUnit takes integer this, integer addId, player owner, integer health, integer mana, integer damage_2, real armor, real attackSpeed, real moveSpeed, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if AddSpawner_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling AddSpawner.BossAdd_AddSpawner_setUnit", "when calling error in ")
		else
			call error("Called AddSpawner.BossAdd_AddSpawner_setUnit on invalid object.", "when calling error in ")
		endif
	endif
	call AddSpawner_setUnit(this, addId, owner, health, mana, damage_2, armor, attackSpeed, moveSpeed)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function alloc_AddSpawner takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if AddSpawner_firstFree == 0 then
		if AddSpawner_maxIndex < 32768 then
			set AddSpawner_maxIndex = AddSpawner_maxIndex + 1
			set this = AddSpawner_maxIndex
			set AddSpawner_typeId[this] = 628
		else
			call error("Out of memory: Could not create AddSpawner.", "when calling error in ")
			set this = 0
		endif
	else
		set AddSpawner_firstFree = AddSpawner_firstFree - 1
		set this = AddSpawner_nextFree[AddSpawner_firstFree]
		set AddSpawner_typeId[this] = 628
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_AddSpawner takes integer this, string stackPos returns nothing
	local timer receiver
	local integer temp
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set AddSpawner_adds[this] = new_LinkedList("when calling new_LinkedList in BossAdd, line 13")
	set AddSpawner_damage[this] = 10
	set AddSpawner_armor[this] = 0.
	set AddSpawner_health[this] = 100
	set AddSpawner_mana[this] = 100
	set AddSpawner_moveSpeed[this] = 270.
	set AddSpawner_attackSpeed[this] = 2.
	set AddSpawner_spawnFreq[this] = 10.
	set temp = this
	set receiver = getTimer("when calling getTimer in BossAdd, line 35")
	call timer_setData(receiver, this, "when calling setData in BossAdd, line 36")
	set AddSpawner_timer_Spawn[temp] = receiver
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
endfunction

function new_AddSpawner takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_AddSpawner("when calling AddSpawner in BossAdd, line 34")
	call construct_AddSpawner(this, "when calling construct_AddSpawner in BossAdd, line 34")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function Archer_activate takes string stackPos returns nothing
	local integer receiver
	local integer receiver_2
	local integer receiver_3
	local integer receiver_4
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set receiver = new_AddSpawner("when calling new_AddSpawner in nec_Archer, line 36")
	call dispatch_AddSpawner_BossAdd_AddSpawner_setUnit(receiver, Archer_ID, Player(11), Archer_HEALTH, Archer_MANA, Archer_DAMAGE, Archer_ARMOR, Archer_ATTACKSPEED, Archer_MOVESPEED, "when calling setUnit in nec_Archer, line 37")
	set receiver_2 = receiver
	call dispatch_AddSpawner_BossAdd_AddSpawner_setSpawnRandom(receiver_2, Archer_spawnRect, Archer_SPAWNFREQ, "when calling setSpawnRandom in nec_Archer, line 38")
	set receiver_3 = receiver_2
	call dispatch_AddSpawner_BossAdd_AddSpawner_setTarget(receiver_3, General_hunter, "when calling setTarget in nec_Archer, line 39")
	set receiver_4 = receiver_3
	call dispatch_AddSpawner_BossAdd_AddSpawner_setSpawnEffect(receiver_4, "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl", "when calling setSpawnEffect in nec_Archer, line 40")
	set Archer_spawner = receiver_4
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function AddSpawner_start takes integer this returns nothing
	call timer_startPeriodic(AddSpawner_timer_Spawn[this], AddSpawner_spawnFreq[this], ref_function_bridge_AddSpawner_spawnAdd)
endfunction

function dispatch_AddSpawner_BossAdd_AddSpawner_start takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if AddSpawner_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling AddSpawner.BossAdd_AddSpawner_start", "when calling error in ")
		else
			call error("Called AddSpawner.BossAdd_AddSpawner_start on invalid object.", "when calling error in ")
		endif
	endif
	call AddSpawner_start(this)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Archer_startSpawn takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_AddSpawner_BossAdd_AddSpawner_start(Archer_spawner, "when calling start in nec_Archer, line 33")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function timer_createTimerDialog takes timer this returns timerdialog
	return CreateTimerDialog(this)
endfunction

function timerdialog_setTitle takes timerdialog this, string title returns nothing
	call TimerDialogSetTitle(this, title)
endfunction

function Cauldron_activate takes string stackPos returns nothing
	local unit receiver
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set Cauldron_timer_Countdown = getTimer("when calling getTimer in nec_Cauldron, line 33")
	set Cauldron_timerDialog_Countdown = timer_createTimerDialog(Cauldron_timer_Countdown)
	call timerdialog_setTitle(Cauldron_timerDialog_Countdown, "Summoning")
	set receiver = createUnit(Player(11), Cauldron_ID, Cauldron_POS_x, Cauldron_POS_y, 0.)
	call unit_setMaxHP(receiver, Cauldron_HP, true)
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
endfunction

function Ghoul_activate takes string stackPos returns nothing
	local integer receiver
	local integer receiver_2
	local integer receiver_3
	local integer receiver_4
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set receiver = new_AddSpawner("when calling new_AddSpawner in nec_Ghoul, line 36")
	call dispatch_AddSpawner_BossAdd_AddSpawner_setUnit(receiver, Ghoul_ID, Player(11), Ghoul_HEALTH, Ghoul_MANA, Ghoul_DAMAGE, Ghoul_ARMOR, Ghoul_ATTACKSPEED, Ghoul_MOVESPEED, "when calling setUnit in nec_Ghoul, line 37")
	set receiver_2 = receiver
	call dispatch_AddSpawner_BossAdd_AddSpawner_setSpawnRandom(receiver_2, Ghoul_spawnRect, Ghoul_SPAWNFREQ, "when calling setSpawnRandom in nec_Ghoul, line 38")
	set receiver_3 = receiver_2
	call dispatch_AddSpawner_BossAdd_AddSpawner_setTarget(receiver_3, General_hunter, "when calling setTarget in nec_Ghoul, line 39")
	set receiver_4 = receiver_3
	call dispatch_AddSpawner_BossAdd_AddSpawner_setSpawnEffect(receiver_4, "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl", "when calling setSpawnEffect in nec_Ghoul, line 40")
	set Ghoul_spawner = receiver_4
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Ghoul_startSpawn takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_AddSpawner_BossAdd_AddSpawner_start(Ghoul_spawner, "when calling start in nec_Ghoul, line 33")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Mage_activate takes string stackPos returns nothing
	local integer receiver
	local integer receiver_2
	local integer receiver_3
	local integer receiver_4
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set receiver = new_AddSpawner("when calling new_AddSpawner in nec_Mage, line 36")
	call dispatch_AddSpawner_BossAdd_AddSpawner_setUnit(receiver, Mage_ID, Player(11), Mage_HEALTH, 0, Mage_DAMAGE, Mage_ARMOR, Mage_ATTACKSPEED, Mage_MOVESPEED, "when calling setUnit in nec_Mage, line 37")
	set receiver_2 = receiver
	call dispatch_AddSpawner_BossAdd_AddSpawner_setSpawnRandom(receiver_2, Mage_spawnRect, Mage_SPAWNFREQ, "when calling setSpawnRandom in nec_Mage, line 38")
	set receiver_3 = receiver_2
	call dispatch_AddSpawner_BossAdd_AddSpawner_setTarget(receiver_3, General_hunter, "when calling setTarget in nec_Mage, line 39")
	set receiver_4 = receiver_3
	call dispatch_AddSpawner_BossAdd_AddSpawner_setSpawnEffect(receiver_4, "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl", "when calling setSpawnEffect in nec_Mage, line 40")
	set Mage_spawner = receiver_4
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Mage_startSpawn takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_AddSpawner_BossAdd_AddSpawner_start(Mage_spawner, "when calling start in nec_Mage, line 33")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function alloc_Closure_2 takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if RemoteFunction_firstFree == 0 then
		if RemoteFunction_maxIndex < 32768 then
			set RemoteFunction_maxIndex = RemoteFunction_maxIndex + 1
			set this = RemoteFunction_maxIndex
			set RemoteFunction_typeId[this] = 704
		else
			call error("Out of memory: Could not create Closure.", "when calling error in ")
			set this = 0
		endif
	else
		set RemoteFunction_firstFree = RemoteFunction_firstFree - 1
		set this = RemoteFunction_nextFree[RemoteFunction_firstFree]
		set RemoteFunction_typeId[this] = 704
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function AddSpawner_setOnSpawnFunc takes integer this, integer whatFunc returns nothing
	set AddSpawner_funcOnSpawn[this] = whatFunc
endfunction

function dispatch_AddSpawner_BossAdd_AddSpawner_setOnSpawnFunc takes integer this, integer whatFunc, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if AddSpawner_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling AddSpawner.BossAdd_AddSpawner_setOnSpawnFunc", "when calling error in ")
		else
			call error("Called AddSpawner.BossAdd_AddSpawner_setOnSpawnFunc on invalid object.", "when calling error in ")
		endif
	endif
	call AddSpawner_setOnSpawnFunc(this, whatFunc)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Zombie_activate takes string stackPos returns nothing
	local integer func
	local integer clVar
	local integer receiver
	local integer receiver_2
	local integer receiver_3
	local integer receiver_4
	local integer receiver_5
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set clVar = alloc_Closure_2("when calling alloc_Closure in nec_Zombie, line 38")
	set func = clVar
	set receiver = new_AddSpawner("when calling new_AddSpawner in nec_Zombie, line 40")
	call dispatch_AddSpawner_BossAdd_AddSpawner_setUnit(receiver, Zombie_ID, Player(11), Zombie_HEALTH, 0, Zombie_DAMAGE, Zombie_ARMOR, Zombie_ATTACKSPEED, Zombie_MOVESPEED, "when calling setUnit in nec_Zombie, line 41")
	set receiver_2 = receiver
	call dispatch_AddSpawner_BossAdd_AddSpawner_setSpawnRandom(receiver_2, Zombie_spawnRect, Zombie_SPAWNFREQ, "when calling setSpawnRandom in nec_Zombie, line 42")
	set receiver_3 = receiver_2
	call dispatch_AddSpawner_BossAdd_AddSpawner_setTarget(receiver_3, General_hunter, "when calling setTarget in nec_Zombie, line 43")
	set receiver_4 = receiver_3
	call dispatch_AddSpawner_BossAdd_AddSpawner_setSpawnEffect(receiver_4, "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl", "when calling setSpawnEffect in nec_Zombie, line 44")
	set receiver_5 = receiver_4
	call dispatch_AddSpawner_BossAdd_AddSpawner_setOnSpawnFunc(receiver_5, func, "when calling setOnSpawnFunc in nec_Zombie, line 45")
	set Zombie_spawner = receiver_5
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Zombie_startSpawn takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_AddSpawner_BossAdd_AddSpawner_start(Zombie_spawner, "when calling start in nec_Zombie, line 35")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function TheNecromancer_onEventInit takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call moveHunter(TheNecromancer_hunterSpawn_x, TheNecromancer_hunterSpawn_y, TheNecromancer_camBounds, TheNecromancer_hunterSpawn_x, TheNecromancer_hunterSpawn_y)
	set TheNecromancer_timer_MainLoop = getTimer("when calling getTimer in nec_Main, line 99")
	call Ghoul_activate("when calling activate in nec_Main, line 100")
	call Archer_activate("when calling activate in nec_Main, line 101")
	call Zombie_activate("when calling activate in nec_Main, line 102")
	call Mage_activate("when calling activate in nec_Main, line 103")
	call Cauldron_activate("when calling activate in nec_Main, line 104")
	call Ghoul_startSpawn("when calling startSpawn in nec_Main, line 106")
	call Archer_startSpawn("when calling startSpawn in nec_Main, line 107")
	call Zombie_startSpawn("when calling startSpawn in nec_Main, line 108")
	call Mage_startSpawn("when calling startSpawn in nec_Main, line 109")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_TheNecromancer_onEventInit takes nothing returns nothing
	set wurst_stack_depth = 0
	call TheNecromancer_onEventInit("nec_Main, line 115")
endfunction

function LLIterator_onDestroy takes integer this returns nothing
endfunction

function dealloc_LLIterator takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LLIterator_typeId[obj] == 0 then
		call error("Double free: object of type LLIterator", "when calling error in ")
	else
		set LLIterator_nextFree[LLIterator_firstFree] = obj
		set LLIterator_firstFree = LLIterator_firstFree + 1
		set LLIterator_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyLLIterator takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call LLIterator_onDestroy(this)
	call dealloc_LLIterator(this, "when calling LLIterator in LinkedList, line 381")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_LLIterator_destroyLLIterator takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LLIterator_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling LLIterator.destroyLLIterator", "when calling error in ")
		else
			call error("Called LLIterator.destroyLLIterator on invalid object.", "when calling error in ")
		endif
	endif
	call destroyLLIterator(this, "when calling destroyLLIterator in LinkedList, line 381")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function LLIterator_close takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LLIterator_destroyOnClose[this] then
		call dispatch_LLIterator_destroyLLIterator(this, "when calling LLIterator in LinkedList, line 425")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function LLIterator_hasNext takes integer this returns boolean
	return LLEntry_next[LLIterator_current[this]] != LLIterator_dummy[this]
endfunction

function LLIterator_next takes integer this returns integer
	set LLIterator_current[this] = LLEntry_next[LLIterator_current[this]]
	return LLEntry_elem[LLIterator_current[this]]
endfunction

function alloc_LLIterator takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LLIterator_firstFree == 0 then
		if LLIterator_maxIndex < 32768 then
			set LLIterator_maxIndex = LLIterator_maxIndex + 1
			set this = LLIterator_maxIndex
			set LLIterator_typeId[this] = 686
		else
			call error("Out of memory: Could not create LLIterator.", "when calling error in ")
			set this = 0
		endif
	else
		set LLIterator_firstFree = LLIterator_firstFree - 1
		set this = LLIterator_nextFree[LLIterator_firstFree]
		set LLIterator_typeId[this] = 686
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function LinkedList_getDummy takes integer this returns integer
	return LinkedList_dummy[this]
endfunction

function dispatch_LinkedList_LinkedList_LinkedList_getDummy takes integer this, string stackPos returns integer
	local integer LinkedList_LinkedList_getDummy_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LinkedList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling LinkedList.LinkedList_LinkedList_getDummy", "when calling error in ")
		else
			call error("Called LinkedList.LinkedList_LinkedList_getDummy on invalid object.", "when calling error in ")
		endif
	endif
	set LinkedList_LinkedList_getDummy_result = LinkedList_getDummy(this)
	set wurst_stack_depth = wurst_stack_depth - 1
	return LinkedList_LinkedList_getDummy_result
endfunction

function LLIterator_reset takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set LLIterator_dummy[this] = dispatch_LinkedList_LinkedList_LinkedList_getDummy(LLIterator_parent[this], "when calling getDummy in LinkedList, line 397")
	set LLIterator_current[this] = LLIterator_dummy[this]
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_LLIterator_LinkedList_LLIterator_reset takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LLIterator_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling LLIterator.LinkedList_LLIterator_reset", "when calling error in ")
		else
			call error("Called LLIterator.LinkedList_LLIterator_reset on invalid object.", "when calling error in ")
		endif
	endif
	call LLIterator_reset(this, "when calling reset in LinkedList, line 396")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function construct_LLIterator takes integer this, integer parent, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set LLIterator_destroyOnClose[this] = true
	set LLIterator_parent[this] = parent
	call dispatch_LLIterator_LinkedList_LLIterator_reset(this, "when calling reset in LinkedList, line 389")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function new_LLIterator takes integer parent, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_LLIterator("when calling LLIterator in LinkedList, line 387")
	call construct_LLIterator(this, parent, "when calling construct_LLIterator in LinkedList, line 387")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function LinkedList_iterator takes integer this, string stackPos returns integer
	local integer stackTrace_tempReturn
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set stackTrace_tempReturn = new_LLIterator(this, "when calling new_LLIterator in LinkedList, line 156")
	set wurst_stack_depth = wurst_stack_depth - 1
	return stackTrace_tempReturn
endfunction

function Add_onDestroy takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_release(Add_timer_Attack[this], "when calling release in BossAdd, line 127")
	call unit_remove(Add_mob[this])
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_Add takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Add_typeId[obj] == 0 then
		call error("Double free: object of type Add", "when calling error in ")
	else
		set Add_nextFree[Add_firstFree] = obj
		set Add_firstFree = Add_firstFree + 1
		set Add_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyAdd takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call Add_onDestroy(this, "when calling Add_onDestroy in BossAdd, line 126")
	call dealloc_Add(this, "when calling Add in BossAdd, line 126")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_Add_destroyAdd takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Add_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Add.destroyAdd", "when calling error in ")
		else
			call error("Called Add.destroyAdd on invalid object.", "when calling error in ")
		endif
	endif
	call destroyAdd(this, "when calling destroyAdd in BossAdd, line 116")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function AddSpawner_removeAll takes integer this, string stackPos returns nothing
	local integer iterator
	local integer add
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set iterator = LinkedList_iterator(AddSpawner_adds[this], "when calling iterator in BossAdd, line 111")
	loop
		exitwhen  not LLIterator_hasNext(iterator)
		set add = LLIterator_next(iterator)
		call dispatch_LinkedList_LinkedList_LinkedList_remove(AddSpawner_adds[this], add, "when calling remove in BossAdd, line 112")
		call dispatch_Add_destroyAdd(add, "when calling Add in BossAdd, line 113")
	endloop
	call LLIterator_close(iterator, "when calling close in BossAdd, line 111")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_AddSpawner_BossAdd_AddSpawner_removeAll takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if AddSpawner_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling AddSpawner.BossAdd_AddSpawner_removeAll", "when calling error in ")
		else
			call error("Called AddSpawner.BossAdd_AddSpawner_removeAll on invalid object.", "when calling error in ")
		endif
	endif
	call AddSpawner_removeAll(this, "when calling removeAll in BossAdd, line 110")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function LLBackIterator_onDestroy takes integer this returns nothing
endfunction

function dealloc_LLBackIterator takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LLBackIterator_typeId[obj] == 0 then
		call error("Double free: object of type LLBackIterator", "when calling error in ")
	else
		set LLBackIterator_firstFree = LLBackIterator_firstFree + 1
		set LLBackIterator_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyLLBackIterator takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call LLBackIterator_onDestroy(this)
	call dealloc_LLBackIterator(this, "when calling LLBackIterator in LinkedList, line 427")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_LLBackIterator_destroyLLBackIterator takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LLBackIterator_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling LLBackIterator.destroyLLBackIterator", "when calling error in ")
		else
			call error("Called LLBackIterator.destroyLLBackIterator on invalid object.", "when calling error in ")
		endif
	endif
	call destroyLLBackIterator(this, "when calling destroyLLBackIterator in LinkedList, line 427")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function LinkedList_onDestroy takes integer this, string stackPos returns nothing
	local integer current
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LinkedList_staticItr[this] != 0 then
		call dispatch_LLIterator_destroyLLIterator(LinkedList_staticItr[this], "when calling LLIterator in LinkedList, line 356")
	endif
	if LinkedList_staticBackItr[this] != 0 then
		call dispatch_LLBackIterator_destroyLLBackIterator(LinkedList_staticBackItr[this], "when calling LLBackIterator in LinkedList, line 358")
	endif
	set current = LLEntry_next[LinkedList_dummy[this]]
	loop
		exitwhen  not (current != LinkedList_dummy[this])
		set current = LLEntry_next[current]
		call dispatch_LLEntry_destroyLLEntry(LLEntry_prev[current], "when calling LLEntry in LinkedList, line 362")
	endloop
	call dispatch_LLEntry_destroyLLEntry(LinkedList_dummy[this], "when calling LLEntry in LinkedList, line 363")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_LinkedList takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LinkedList_typeId[obj] == 0 then
		call error("Double free: object of type LinkedList", "when calling error in ")
	else
		set LinkedList_nextFree[LinkedList_firstFree] = obj
		set LinkedList_firstFree = LinkedList_firstFree + 1
		set LinkedList_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyLinkedList takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call LinkedList_onDestroy(this, "when calling LinkedList_onDestroy in LinkedList, line 354")
	call dealloc_LinkedList(this, "when calling LinkedList in LinkedList, line 354")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_LinkedList_destroyLinkedList takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if LinkedList_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling LinkedList.destroyLinkedList", "when calling error in ")
		else
			call error("Called LinkedList.destroyLinkedList on invalid object.", "when calling error in ")
		endif
	endif
	call destroyLinkedList(this, "when calling destroyLinkedList in LinkedList, line 13")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_RemoteFunction takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if RemoteFunction_typeId[obj] == 0 then
		call error("Double free: object of type RemoteFunction", "when calling error in ")
	else
		set RemoteFunction_nextFree[RemoteFunction_firstFree] = obj
		set RemoteFunction_firstFree = RemoteFunction_firstFree + 1
		set RemoteFunction_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyRemoteFunction takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dealloc_RemoteFunction(this, "when calling RemoteFunction in BossAdd, line 6")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_RemoteFunction_destroyRemoteFunction takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if RemoteFunction_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling RemoteFunction.destroyRemoteFunction", "when calling error in ")
		else
			call error("Called RemoteFunction.destroyRemoteFunction on invalid object.", "when calling error in ")
		endif
	endif
	call destroyRemoteFunction(this, "when calling destroyRemoteFunction in BossAdd, line 6")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function AddSpawner_onDestroy takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_AddSpawner_BossAdd_AddSpawner_removeAll(this, "when calling removeAll in BossAdd, line 98")
	call dispatch_LinkedList_destroyLinkedList(AddSpawner_adds[this], "when calling LinkedList in BossAdd, line 99")
	if AddSpawner_funcOnSpawn[this] != 0 then
		call dispatch_RemoteFunction_destroyRemoteFunction(AddSpawner_funcOnSpawn[this], "when calling RemoteFunction in BossAdd, line 101")
	endif
	call timer_release(AddSpawner_timer_Spawn[this], "when calling release in BossAdd, line 102")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_AddSpawner takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if AddSpawner_typeId[obj] == 0 then
		call error("Double free: object of type AddSpawner", "when calling error in ")
	else
		set AddSpawner_nextFree[AddSpawner_firstFree] = obj
		set AddSpawner_firstFree = AddSpawner_firstFree + 1
		set AddSpawner_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyAddSpawner takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call AddSpawner_onDestroy(this, "when calling AddSpawner_onDestroy in BossAdd, line 97")
	call dealloc_AddSpawner(this, "when calling AddSpawner in BossAdd, line 97")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_AddSpawner_destroyAddSpawner takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if AddSpawner_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling AddSpawner.destroyAddSpawner", "when calling error in ")
		else
			call error("Called AddSpawner.destroyAddSpawner on invalid object.", "when calling error in ")
		endif
	endif
	call destroyAddSpawner(this, "when calling destroyAddSpawner in BossAdd, line 12")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function Ghoul_deactivate takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_AddSpawner_destroyAddSpawner(Ghoul_spawner, "when calling AddSpawner in nec_Ghoul, line 43")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function TheNecromancer_phase1 takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call Ghoul_deactivate("when calling deactivate in nec_Main, line 47")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_TheNecromancer_phase1 takes nothing returns nothing
	set wurst_stack_depth = 0
	call TheNecromancer_phase1("nec_Main, line 89")
endfunction

function getEnterLeaveUnit takes nothing returns unit
	return OnUnitEnterLeave_tempUnits[OnUnitEnterLeave_tempUnitsCount - 1]
endfunction

function shouldIndex takes unit w_u returns boolean
	return true
endfunction

function UnitIndexer_closure_impl takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if shouldIndex(getEnterLeaveUnit()) then
		call unit_toUnitIndex(getEnterLeaveUnit(), "when calling toUnitIndex in UnitIndexer, line 179")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_UnitIndexer_closure_impl takes nothing returns nothing
	set wurst_stack_depth = 0
	call UnitIndexer_closure_impl("UnitIndexer, line 179")
endfunction

function UnitIndex_onDestroy takes integer this returns nothing
	call trigger_evaluate(UnitIndexer_onDeindexTrigger)
	call unit_setUserData(UnitIndex__unit[this], 0)
endfunction

function dealloc_UnitIndex takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if UnitIndex_typeId[obj] == 0 then
		call error("Double free: object of type UnitIndex", "when calling error in ")
	else
		set UnitIndex_nextFree[UnitIndex_firstFree] = obj
		set UnitIndex_firstFree = UnitIndex_firstFree + 1
		set UnitIndex_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyUnitIndex takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call UnitIndex_onDestroy(this)
	call dealloc_UnitIndex(this, "when calling UnitIndex in UnitIndexer, line 172")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_UnitIndex_destroyUnitIndex takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if UnitIndex_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling UnitIndex.destroyUnitIndex", "when calling error in ")
		else
			call error("Called UnitIndex.destroyUnitIndex on invalid object.", "when calling error in ")
		endif
	endif
	call destroyUnitIndex(this, "when calling destroyUnitIndex in UnitIndexer, line 157")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function unit_deindex takes unit this, string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if unit_getUserData(this) == 0 then
		set wurst_stack_depth = wurst_stack_depth - 1
		return false
	else
		call dispatch_UnitIndex_destroyUnitIndex(unit_toUnitIndex(this, "when calling toUnitIndex in UnitIndexer, line 154"), "when calling UnitIndex in UnitIndexer, line 154")
		set wurst_stack_depth = wurst_stack_depth - 1
		return true
	endif
endfunction

function UnitIndexer_closure_impl_2 takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if shouldIndex(getEnterLeaveUnit()) then
		call unit_deindex(getEnterLeaveUnit(), "when calling deindex in UnitIndexer, line 180")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_UnitIndexer_closure_impl_2 takes nothing returns nothing
	set wurst_stack_depth = 0
	call UnitIndexer_closure_impl_2("UnitIndexer, line 180")
endfunction

function lightning_destr takes lightning this returns boolean
	return DestroyLightning(this)
endfunction

function UnitLightning_onDestroy takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_release(UnitLightning_updateTimer[this], "when calling release in UnitLightning, line 26")
	call timer_release(UnitLightning_durationTimer[this], "when calling release in UnitLightning, line 27")
	call lightning_destr(UnitLightning_sfx[this])
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_UnitLightning takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if UnitLightning_typeId[obj] == 0 then
		call error("Double free: object of type UnitLightning", "when calling error in ")
	else
		set UnitLightning_nextFree[UnitLightning_firstFree] = obj
		set UnitLightning_firstFree = UnitLightning_firstFree + 1
		set UnitLightning_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyUnitLightning takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call UnitLightning_onDestroy(this, "when calling UnitLightning_onDestroy in UnitLightning, line 25")
	call dealloc_UnitLightning(this, "when calling UnitLightning in UnitLightning, line 25")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_UnitLightning_destroyUnitLightning takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if UnitLightning_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling UnitLightning.destroyUnitLightning", "when calling error in ")
		else
			call error("Called UnitLightning.destroyUnitLightning on invalid object.", "when calling error in ")
		endif
	endif
	call destroyUnitLightning(this, "when calling destroyUnitLightning in UnitLightning, line 4")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function UnitLightning_kill takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_UnitLightning_destroyUnitLightning(timer_getData(GetExpiredTimer(), "when calling getData in UnitLightning, line 41"), "when calling UnitLightning in UnitLightning, line 41")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_UnitLightning_kill takes nothing returns nothing
	set wurst_stack_depth = 0
	call UnitLightning_kill("UnitLightning, line 59")
endfunction

function lightning_move takes lightning this, boolean checkVisibility, real start_x, real start_y, real start_z, real w_end_x, real w_end_y, real w_end_z returns boolean
	return MoveLightningEx(this, checkVisibility, start_x, start_y, start_z, w_end_x, w_end_y, w_end_z)
endfunction

function UnitLightning_update takes string stackPos returns nothing
	local integer instance
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set instance = timer_getData(GetExpiredTimer(), "when calling getData in UnitLightning, line 31")
	if unit_isAlive(UnitLightning_source[instance]) and unit_isAlive(UnitLightning_target[instance]) then
		call lightning_move(UnitLightning_sfx[instance], false, unit_getX(UnitLightning_source[instance]), unit_getY(UnitLightning_source[instance]), unit_getLocalZ(UnitLightning_source[instance]) + UnitLightning_sourceZ[instance], unit_getX(UnitLightning_target[instance]), unit_getY(UnitLightning_target[instance]), unit_getLocalZ(UnitLightning_target[instance]) + UnitLightning_targetZ[instance])
	else
		call timer_pause(UnitLightning_updateTimer[instance])
		call dispatch_UnitLightning_destroyUnitLightning(instance, "when calling UnitLightning in UnitLightning, line 37")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_UnitLightning_update takes nothing returns nothing
	set wurst_stack_depth = 0
	call UnitLightning_update("UnitLightning, line 55")
endfunction

function DayCycle_setAlwaysNight takes nothing returns nothing
	if DayCycle_enabled then
		set DayCycle_time = GetTimeOfDay()
		set DayCycle_enabled = false
	endif
	call SetTimeOfDay(0.)
	call SetTimeOfDayScalePercentBJ(0.)
endfunction

function DayCycle_setNormal takes nothing returns nothing
	if  not DayCycle_enabled then
		set DayCycle_enabled = true
		call SetTimeOfDay(DayCycle_time)
		call SetTimeOfDayScale(DayCycle_timeScale)
		call EnableDawnDusk(true)
	endif
endfunction

function player_panCameraToTimed takes player this, real pos_x, real pos_y, real duration returns nothing
	call PanCameraToTimedForPlayer(this, pos_x, pos_y, duration)
endfunction

function ZoneTransit_transit takes string stackPos returns nothing
	local integer inst
	local player receiver
	local player receiver_2
	local integer tempIndex
	local integer tempIndex_2
	local unit temp
	local player temp_2
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set inst = timer_getData(GetExpiredTimer(), "when calling getData in ZoneTransition, line 52")
	set temp = General_hunter
	set tempIndex = inst
	call unit_setPos(temp, ZoneTransit_landing[tempIndex], ZoneTransit_landing_2[tempIndex])
	set receiver = Player(0)
	call player_setCameraBoundsToRect(receiver, ZoneTransit_camBounds[inst])
	set receiver_2 = receiver
	set temp_2 = receiver_2
	set tempIndex_2 = inst
	call player_panCameraToTimed(temp_2, ZoneTransit_camPanPoint[tempIndex_2], ZoneTransit_camPanPoint_2[tempIndex_2], 0.)
	if ZoneTransit_alwaysNight[inst] then
		call DayCycle_setAlwaysNight()
	else
		call DayCycle_setNormal()
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set temp = null
	set temp_2 = null
endfunction

function bridge_ZoneTransit_transit takes nothing returns nothing
	set wurst_stack_depth = 0
	call ZoneTransit_transit("ZoneTransition, line 66")
endfunction

function ArcaneBeing_clear takes nothing returns nothing
	local unit u
	local group from
	call timer_pause(ArcaneBeing_cooldownTimer)
	set from = ArcaneBeing_allMobs
	loop
		exitwhen  not group_hasNext(from)
		set u = group_next(from)
		call unit_kill(u)
	endloop
	call group_clear(ArcaneBeing_allMobs)
	set u = null
	set from = null
endfunction

function FlameStrike_onDestroy takes integer this, string stackPos returns nothing
	local integer i
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_release(FlameStrike_miscTimer[this], "when calling release in tm_FlameStrike, line 90")
	set i = 0
	loop
		exitwhen i > 15
		call effect_destr(FlameStrike_sfx_get(this, i, "when calling sfx in tm_FlameStrike, line 93"))
		set i = i + 1
	endloop
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_FlameStrike takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if FlameStrike_typeId[obj] == 0 then
		call error("Double free: object of type FlameStrike", "when calling error in ")
	else
		set FlameStrike_nextFree[FlameStrike_firstFree] = obj
		set FlameStrike_firstFree = FlameStrike_firstFree + 1
		set FlameStrike_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyFlameStrike takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call FlameStrike_onDestroy(this, "when calling FlameStrike_onDestroy in tm_FlameStrike, line 88")
	call dealloc_FlameStrike(this, "when calling FlameStrike in tm_FlameStrike, line 88")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_FlameStrike_destroyFlameStrike takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if FlameStrike_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling FlameStrike.destroyFlameStrike", "when calling error in ")
		else
			call error("Called FlameStrike.destroyFlameStrike on invalid object.", "when calling error in ")
		endif
	endif
	call destroyFlameStrike(this, "when calling destroyFlameStrike in tm_FlameStrike, line 11")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function FlameStrike_clear takes string stackPos returns nothing
	local integer instance
	local integer i
	local integer temp
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_pause(FlameStrike_burnTimer)
	call timer_pause(FlameStrike_cooldownTimer)
	set FlameStrike_burnIsActive = false
	if FlameStrike_instanceCounter > -1 then
	endif
	set i = 0
	set temp = FlameStrike_instanceCounter - 1
	loop
		exitwhen i > temp
		set instance = FlameStrike_instances[i]
		if instance != 0 then
			call dispatch_FlameStrike_destroyFlameStrike(instance, "when calling FlameStrike in tm_FlameStrike, line 83")
			set FlameStrike_instances[i] = 0
		endif
		set FlameStrike_instanceCounter = 0
		set i = i + 1
	endloop
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function InteractableObject_deactivateSeries takes integer series returns nothing
	local integer i = 0
	local integer temp = InteractableObject_instanceCount
	loop
		exitwhen i > temp
		if InteractableObject_series[InteractableObject_instances[i]] == series then
			call unit_remove(InteractableObject_object[InteractableObject_instances[i]])
			call unit_remove(InteractableObject_sfx[InteractableObject_instances[i]])
		endif
		set i = i + 1
	endloop
endfunction

function MagicCrystal_onDestroy takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call unit_remove(MagicCrystal_crystal[this])
	call unit_remove(MagicCrystal_placeholder[this])
	call effect_destr(MagicCrystal_crystalSFX[this])
	if MagicCrystal_lightningTimer[this] != null then
		call timer_release(MagicCrystal_lightningTimer[this], "when calling release in tm_MagicCrystal, line 82")
		set MagicCrystal_lightningTimer[this] = null
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dealloc_MagicCrystal takes integer obj, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if MagicCrystal_typeId[obj] == 0 then
		call error("Double free: object of type MagicCrystal", "when calling error in ")
	else
		set MagicCrystal_nextFree[MagicCrystal_firstFree] = obj
		set MagicCrystal_firstFree = MagicCrystal_firstFree + 1
		set MagicCrystal_typeId[obj] = 0
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function destroyMagicCrystal takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call MagicCrystal_onDestroy(this, "when calling MagicCrystal_onDestroy in tm_MagicCrystal, line 76")
	call dealloc_MagicCrystal(this, "when calling MagicCrystal in tm_MagicCrystal, line 76")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_MagicCrystal_destroyMagicCrystal takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if MagicCrystal_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling MagicCrystal.destroyMagicCrystal", "when calling error in ")
		else
			call error("Called MagicCrystal.destroyMagicCrystal on invalid object.", "when calling error in ")
		endif
	endif
	call destroyMagicCrystal(this, "when calling destroyMagicCrystal in tm_MagicCrystal, line 20")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function MagicCrystal_clear takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_MagicCrystal_destroyMagicCrystal(MagicCrystal_crystals[0], "when calling MagicCrystal in tm_MagicCrystal, line 88")
	call dispatch_MagicCrystal_destroyMagicCrystal(MagicCrystal_crystals[1], "when calling MagicCrystal in tm_MagicCrystal, line 89")
	call dispatch_MagicCrystal_destroyMagicCrystal(MagicCrystal_crystals[2], "when calling MagicCrystal in tm_MagicCrystal, line 90")
	call effect_destr(MagicCrystal_sfx_Shield)
	call timer_pause(MagicCrystal_runTimer1)
	call timer_pause(MagicCrystal_runTimer2)
	call timer_pause(MagicCrystal_runTimer3)
	set MagicCrystal_hasRun[0] = false
	set MagicCrystal_hasRun[1] = false
	set MagicCrystal_hasRun[2] = false
	call effect_destr(MagicCrystal_absorbSFX[0])
	call effect_destr(MagicCrystal_absorbSFX[1])
	call effect_destr(MagicCrystal_absorbSFX[2])
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function clear takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set tm_Main_bossHasAbsorbed = false
	set tm_Main_bossIsEnraged = false
	call unit_remove(tm_Main_theMonster)
	call MagicCrystal_clear("when calling clear in tm_Main, line 147")
	call FlameStrike_clear("when calling clear in tm_Main, line 148")
	call ArcaneBeing_clear()
	set IceBlast_isReady = false
	set tm_Main_thisEventIsRunning = false
	call InteractableObject_deactivateSeries(InteractableObject_SERIES_THEMONSTER)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_clear takes nothing returns nothing
	set wurst_stack_depth = 0
	call clear("tm_Main, line 132")
endfunction

function bridge_clear_2 takes nothing returns nothing
	set wurst_stack_depth = 0
	call clear("tm_Main, line 159")
endfunction

function delayedInit takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_release(GetExpiredTimer(), "when calling release in ZoneTransition, line 10")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_delayedInit takes nothing returns nothing
	set wurst_stack_depth = 0
	call delayedInit("ZoneTransition, line 13")
endfunction

function destructable_setAnimation takes destructable this, string anim returns nothing
	call SetDestructableAnimation(this, anim)
endfunction

function delayedInit_2 takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_release(GetExpiredTimer(), "when calling release in General, line 106")
	call destructable_setAnimation(gg_dest_DTc2_2577, "death alternate")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_delayedInit_2 takes nothing returns nothing
	set wurst_stack_depth = 0
	call delayedInit_2("General, line 102")
endfunction

function delayedInit_3 takes string stackPos returns nothing
	local integer obj
	local integer receiver
	local integer receiver_2
	local integer receiver_3
	local integer receiver_4
	local integer receiver_5
	local integer receiver_6
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_release(GetExpiredTimer(), "when calling release in tm_Main, line 74")
	set receiver = new_UnitObject("The Monster", tm_Main_bossId, 11840., 14788., 315., "when calling new_UnitObject in tm_Main, line 76")
	call dispatch_ClickableObject_BossInformation_ClickableObject_setSoundOnClick(receiver, Sounds_koboldWhat2, "when calling setSoundOnClick in tm_Main, line 77")
	set receiver_2 = receiver
	call dispatch_UnitObject_BossInformation_UnitObject_setAttackDmg(receiver_2, tm_Main_THEMONSTER_DAMAGE, "when calling setAttackDmg in tm_Main, line 78")
	set receiver_3 = receiver_2
	call dispatch_UnitObject_BossInformation_UnitObject_setAttackSpeed(receiver_3, tm_Main_THEMONSTER_ATTACKSPEED, "when calling setAttackSpeed in tm_Main, line 79")
	set receiver_4 = receiver_3
	call dispatch_UnitObject_BossInformation_UnitObject_setHP(receiver_4, tm_Main_THEMONSTER_HP, "when calling setHP in tm_Main, line 80")
	set receiver_5 = receiver_4
	call dispatch_UnitObject_BossInformation_UnitObject_setMoveSpeed(receiver_5, tm_Main_THEMONSTER_MOVESPEED, "when calling setMoveSpeed in tm_Main, line 81")
	set receiver_6 = receiver_5
	call dispatch_ClickableObject_BossInformation_ClickableObject_setDescription(receiver_6, "" + "Will be present during the entire fight, and frequently\n" + "cast Flame Strikes and Ice Blasts. Occasionally he'll\n" + "attemtp to consume Magic Crystals", "when calling setDescription in tm_Main, line 83")
	set obj = receiver_6
	set ClickableObject_objectAnimation[obj] = "attack"
	set ClickableObject_objType[obj] = "The Boss"
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_delayedInit_3 takes nothing returns nothing
	set wurst_stack_depth = 0
	call delayedInit_3("tm_Main, line 69")
endfunction

function initEvent takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call BossEvent_initiate(ref_function_bridge_onEventInit, ref_function_initFight, "when calling initiate in tm_Main, line 249")
	set wurst_stack_depth = wurst_stack_depth - 1
	return false
endfunction

function bridge_initEvent takes nothing returns boolean
	set wurst_stack_depth = 0
	return initEvent("tm_Main, line 59")
endfunction

function init_BossEvent takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set BossEvent_canLeave = false
	set BossEvent_miscTimer = getTimer("when calling getTimer in BossEvent, line 12")
	set BossEvent_sound_Fail = new_SoundDefinition(Sounds_questFailed, false, "when calling new_SoundDefinition in BossEvent, line 14")
	set BossEvent_sound_Win = new_SoundDefinition(Sounds_questCompleted, false, "when calling new_SoundDefinition in BossEvent, line 15")
	set BossEvent_sound_Leave = new_SoundDefinition(Sounds_mouseClick1, false, "when calling new_SoundDefinition in BossEvent, line 16")
	set BossEvent_isRunning = false
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_BossEvent takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_BossEvent("BossEvent, line 1")
endfunction

function initializeTable takes string stackPos returns nothing
	local integer i
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set i = 0
	loop
		exitwhen i > 15
		call dispatch_Table_Table_Table_saveInt(Colors_decs, string_getHash(Colors_hexs[i]), i, "when calling saveInt in Colors, line 205")
		set i = i + 1
	endloop
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function alloc_Table takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_firstFree == 0 then
		if Table_maxIndex < 32768 then
			set Table_maxIndex = Table_maxIndex + 1
			set this = Table_maxIndex
			set Table_typeId[this] = 722
		else
			call error("Out of memory: Could not create Table.", "when calling error in ")
			set this = 0
		endif
	else
		set Table_firstFree = Table_firstFree - 1
		set this = Table_nextFree[Table_firstFree]
		set Table_typeId[this] = 722
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function new_Table takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_Table("when calling Table in Table, line 5")
	call construct_Table(this)
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function init_Colors takes string stackPos returns boolean
	local integer temp_Colors_COLOR_WHITE_red
	local integer temp_Colors_COLOR_WHITE_green
	local integer temp_Colors_COLOR_WHITE_blue
	local integer temp_Colors_COLOR_WHITE_alpha
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set temp_Colors_COLOR_WHITE_red = 255
	set temp_Colors_COLOR_WHITE_green = 255
	set temp_Colors_COLOR_WHITE_blue = 255
	set temp_Colors_COLOR_WHITE_alpha = 255
	set Colors_COLOR_WHITE_red = temp_Colors_COLOR_WHITE_red
	set Colors_COLOR_WHITE_green = temp_Colors_COLOR_WHITE_green
	set Colors_COLOR_WHITE_blue = temp_Colors_COLOR_WHITE_blue
	set Colors_COLOR_WHITE_alpha = temp_Colors_COLOR_WHITE_alpha
	set Colors_hexs[0] = "0"
	set Colors_hexs[1] = "1"
	set Colors_hexs[2] = "2"
	set Colors_hexs[3] = "3"
	set Colors_hexs[4] = "4"
	set Colors_hexs[5] = "5"
	set Colors_hexs[6] = "6"
	set Colors_hexs[7] = "7"
	set Colors_hexs[8] = "8"
	set Colors_hexs[9] = "9"
	set Colors_hexs[10] = "A"
	set Colors_hexs[11] = "B"
	set Colors_hexs[12] = "C"
	set Colors_hexs[13] = "D"
	set Colors_hexs[14] = "E"
	set Colors_hexs[15] = "F"
	set Colors_decs = new_Table("when calling new_Table in Colors, line 153")
	call initializeTable("when calling initializeTable in Colors, line 208")
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_Colors takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_Colors("Colors, line 1")
endfunction

function createDummy takes real pos_x, real pos_y, player owner, real facing_radians returns unit
	local unit u = createUnit(owner, DummyRecycler_DUMMY_UNIT_ID, pos_x, pos_y, facing_radians)
	local unit receiver = u
	local unit receiver_2
	local unit receiver_3
	local unit receiver_4
	call unit_setXY(receiver, pos_x, pos_y)
	set receiver_2 = receiver
	call unit_addAbility(receiver_2, Basics_HEIGHT_ENABLER)
	set receiver_3 = receiver_2
	call unit_removeAbility(receiver_3, Basics_HEIGHT_ENABLER)
	set receiver_4 = receiver_3
	call unit_addAbility(receiver_4, Basics_LOCUST_ID)
	set createDummytempReturn = u
	set u = null
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	return createDummytempReturn
endfunction

function alloc_ArrayQueue takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if ArrayQueue_firstFree == 0 then
		if ArrayQueue_maxIndex < 32768 then
			set ArrayQueue_maxIndex = ArrayQueue_maxIndex + 1
			set this = ArrayQueue_maxIndex
			set ArrayQueue_typeId[this] = 631
		else
			call error("Out of memory: Could not create ArrayQueue.", "when calling error in ")
			set this = 0
		endif
	else
		set ArrayQueue_firstFree = ArrayQueue_firstFree - 1
		set this = ArrayQueue_nextFree[ArrayQueue_firstFree]
		set ArrayQueue_typeId[this] = 631
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_ArrayQueue takes integer this returns nothing
	set ArrayQueue_rp[this] = 0
	set ArrayQueue_size[this] = 0
endfunction

function new_ArrayQueue takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_ArrayQueue("when calling ArrayQueue in DummyRecycler, line 48")
	call construct_ArrayQueue(this)
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function init_DummyRecycler takes string stackPos returns boolean
	local integer i
	local integer temp
	local integer j
	local integer temp_2
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set DummyRecycler_DUMMY_UNIT_ID = 2019849581
	set DummyRecycler_DIFFERENT_ANGLES = 8
	set DummyRecycler_ANGLE_DEGREE = 360 * 1. / DummyRecycler_DIFFERENT_ANGLES
	set DummyRecycler_SAVED_UNITS_PER_ANGLE = 6
	set DelayNode_t = CreateTimer()
	set DelayNode_first = 0
	set i = 0
	set temp = DummyRecycler_DIFFERENT_ANGLES - 1
	loop
		exitwhen i > temp
		set DummyRecycler_angleQueues[i] = new_ArrayQueue("when calling new_ArrayQueue in DummyRecycler, line 139")
		set j = 0
		set temp_2 = DummyRecycler_SAVED_UNITS_PER_ANGLE - 1
		loop
			exitwhen j > temp_2
			call dispatch_ArrayQueue_DummyRecycler_ArrayQueue_enqueue(DummyRecycler_angleQueues[i], createDummy(MapBounds_boundMax_x, MapBounds_boundMax_y, Basics_DUMMY_PLAYER, real_asAngleDegrees(i * DummyRecycler_ANGLE_DEGREE)), "when calling enqueue in DummyRecycler, line 141")
			set j = j + 1
		endloop
		set i = i + 1
	endloop
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_DummyRecycler takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_DummyRecycler("DummyRecycler, line 1")
endfunction

function Stats_preTrain takes unit whichUnit, integer intel, integer agi, integer str returns nothing
	if intel + agi + str > Stats_START_STATPOINTS then
		call print("Woopsies, someone want to preTrain too much - not preTraining anything now.")
	else
		call Stats_adjust(whichUnit, Stats_INT, intel)
		call Stats_adjust(whichUnit, Stats_AGI, agi)
		call Stats_adjust(whichUnit, Stats_STR, str)
		call player_setLumber(Player(0), 0)
	endif
endfunction

function fogmodifier_start takes fogmodifier this returns nothing
	call FogModifierStart(this)
endfunction

function player_setAbilityAvailable takes player this, integer abilityId, boolean avail returns nothing
	call SetPlayerAbilityAvailable(this, abilityId, avail)
endfunction

function player_setCameraField takes player this, camerafield whichField, real value, real duration returns nothing
	call SetCameraFieldForPlayer(this, whichField, value, duration)
endfunction

function player_setColor takes player this, playercolor color returns nothing
	call SetPlayerColor(this, color)
endfunction

function player_setName takes player this, string name returns nothing
	call SetPlayerName(this, name)
endfunction

function trigger_registerPlayerChatEvent takes trigger this, player whichPlayer, string chatMessageToDetect, boolean exactMatchOnly returns nothing
	call TriggerRegisterPlayerChatEvent(this, whichPlayer, chatMessageToDetect, exactMatchOnly)
endfunction

function trigger_registerPlayerEvent takes trigger this, player whichPlayer, playerevent whichPlayerEvent returns nothing
	call TriggerRegisterPlayerEvent(this, whichPlayer, whichPlayerEvent)
endfunction

function unit_addItemById takes unit this, integer itemId returns item
	return UnitAddItemById(this, itemId)
endfunction

function init_General takes string stackPos returns boolean
	local player receiver
	local player receiver_2
	local unit receiver_3
	local unit receiver_4
	local unit receiver_5
	local unit receiver_6
	local unit receiver_7
	local unit receiver_8
	local unit receiver_9
	local unit receiver_10
	local unit receiver_11
	local unit receiver_12
	local unit receiver_13
	local unit receiver_14
	local unit receiver_15
	local trigger receiver_16
	local trigger receiver_17
	local trigger receiver_18
	local trigger receiver_19
	local trigger receiver_20
	local trigger receiver_21
	local trigger receiver_22
	local trigger receiver_23
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set General_PRESETHERO = true
	set General_LOCKCAMONINIT = false
	set General_doCheckCoordinates = false
	call new_SoundDefinition(Sounds_questActivateWhat1, false, "when calling new_SoundDefinition in General, line 26")
	set General_hunterIsDead = false
	call player_setAbilityAvailable(Player(0), 1093677136, false)
	call fogmodifier_start(CreateFogModifierRect(Player(0), FOG_OF_WAR_VISIBLE, GetPlayableMapRect(), false, false))
	set receiver = Player(1)
	call player_setName(receiver, "Allies")
	set receiver_2 = receiver
	call player_setColor(receiver_2, PLAYER_COLOR_LIGHT_BLUE)
	call player_setName(Player(11), "Bosses")
	call SetPlayerAllianceStateBJ(Player(0), Player(1), bj_ALLIANCE_ALLIED)
	call SetPlayerAllianceStateBJ(Player(1), Player(0), bj_ALLIANCE_ALLIED)
	set receiver_3 = createUnit(Player(0), 1211117616, rect_getCenter(gg_rct_HunterStart), rect_getCenter_return_y, Deg2Rad(200.))
	call unit_addAbility(receiver_3, 1093677136)
	set receiver_4 = receiver_3
	call unit_setAbilityLevel(receiver_4, 1093677130, 10)
	set receiver_5 = receiver_4
	call unit_suspendXp(receiver_5, true)
	set General_hunter = receiver_5
	call player_select(Player(0), General_hunter)
	if General_PRESETHERO then
		set receiver_6 = General_hunter
		call unit_addAbility(receiver_6, 1093677104)
		set receiver_7 = receiver_6
		call unit_addAbility(receiver_7, 1093677126)
		set receiver_8 = receiver_7
		call unit_addAbility(receiver_8, 1093677393)
		set receiver_9 = receiver_8
		call unit_addAbility(receiver_9, 1093677131)
		set receiver_10 = receiver_9
		call unit_addItemById(receiver_10, 1227894851)
		set receiver_11 = receiver_10
		call unit_addItemById(receiver_11, 1227894851)
		set receiver_12 = receiver_11
		call unit_addItemById(receiver_12, 1227894849)
		set receiver_13 = receiver_12
		call unit_addItemById(receiver_13, 1227894841)
		set receiver_14 = receiver_13
		call unit_addItemById(receiver_14, 1227894850)
		set receiver_15 = receiver_14
		call unit_addItemById(receiver_15, 1227894840)
		call Stats_preTrain(General_hunter, 30, 0, 10)
	endif
	call DayCycle_setNormal()
	call playMusic(Sounds_comradeship)
	call player_setCameraField(Player(0), CAMERA_FIELD_TARGET_DISTANCE, 2000., 0.0)
	if General_LOCKCAMONINIT then
		call player_setCameraBoundsToRect(Player(0), gg_rct_VisionZone_Hunters_Lair)
	endif
	set General_hero = General_hunter
	set udg_RedHero = General_hunter
	set receiver_16 = CreateTrigger()
	call trigger_addAction(receiver_16, ref_function_checkCoordinates)
	set receiver_17 = receiver_16
	call trigger_registerPlayerChatEvent(receiver_17, Player(0), "-coordinates", true)
	set receiver_18 = CreateTrigger()
	call trigger_registerPlayerEvent(receiver_18, Player(0), EVENT_PLAYER_MOUSE_MOVE)
	set receiver_19 = receiver_18
	call trigger_addAction(receiver_19, ref_function_checkCoordinates2)
	set receiver_20 = CreateTrigger()
	call trigger_registerAnyUnitEvent(receiver_20, EVENT_PLAYER_UNIT_PICKUP_ITEM)
	set receiver_21 = receiver_20
	call trigger_addCondition(receiver_21, Condition(ref_function_pickup))
	set receiver_22 = CreateTrigger()
	call trigger_registerPlayerChatEvent(receiver_22, Player(0), "-getindex", true)
	set receiver_23 = receiver_22
	call trigger_addCondition(receiver_23, Condition(ref_function_getUnitIndex))
	call timer_start(getTimer("when calling getTimer in General, line 102"), 0.1, ref_function_bridge_delayedInit)
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
	set receiver_6 = null
	set receiver_7 = null
	set receiver_8 = null
	set receiver_9 = null
	set receiver_10 = null
	set receiver_11 = null
	set receiver_12 = null
	set receiver_13 = null
	set receiver_14 = null
	set receiver_15 = null
	set receiver_16 = null
	set receiver_17 = null
	set receiver_18 = null
	set receiver_19 = null
	set receiver_20 = null
	set receiver_21 = null
	set receiver_22 = null
	set receiver_23 = null
	return true
endfunction

function bridge_init_General takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_General("General, line 1")
endfunction

function InteractableObject_setCustomSound takes integer this, string soundFile, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set InteractableObject_customSound[this] = new_SoundDefinition(soundFile, false, "when calling new_SoundDefinition in InteractableObjects, line 142")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function dispatch_InteractableObject_InteractableObjects_InteractableObject_setCustomSound takes integer this, string soundFile, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if InteractableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling InteractableObject.InteractableObjects_InteractableObject_setCustomSound", "when calling error in ")
		else
			call error("Called InteractableObject.InteractableObjects_InteractableObject_setCustomSound on invalid object.", "when calling error in ")
		endif
	endif
	call InteractableObject_setCustomSound(this, soundFile, "when calling setCustomSound in InteractableObjects, line 141")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function InteractableObject_setSFXZ takes integer this, real height returns nothing
	set InteractableObject_SFXZ[this] = height
endfunction

function dispatch_InteractableObject_InteractableObjects_InteractableObject_setSFXZ takes integer this, real height, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if InteractableObject_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling InteractableObject.InteractableObjects_InteractableObject_setSFXZ", "when calling error in ")
		else
			call error("Called InteractableObject.InteractableObjects_InteractableObject_setSFXZ on invalid object.", "when calling error in ")
		endif
	endif
	call InteractableObject_setSFXZ(this, height)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function alloc_InteractableObject takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if InteractableObject_firstFree == 0 then
		if InteractableObject_maxIndex < 32768 then
			set InteractableObject_maxIndex = InteractableObject_maxIndex + 1
			set this = InteractableObject_maxIndex
			set InteractableObject_typeId[this] = 683
		else
			call error("Out of memory: Could not create InteractableObject.", "when calling error in ")
			set this = 0
		endif
	else
		set InteractableObject_firstFree = InteractableObject_firstFree - 1
		set this = InteractableObject_nextFree[InteractableObject_firstFree]
		set InteractableObject_typeId[this] = 683
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function group_size takes group this returns integer
	set Group_unitCounter = 0
	call ForGroup(this, ref_function_Group_closure_impl)
	return Group_unitCounter
endfunction

function group_getRandomUnit takes group this returns unit
	local integer size = group_size(this)
	set Group_randomCounter = 1 + GetRandomInt(0, size - 1)
	set Group_randomSelected = null
	call ForGroup(this, ref_function_Group_closure_impl_2)
	return Group_randomSelected
endfunction

function construct_InteractableObject takes integer this, real objectPos_x, real objectPos_y, real objectScale, integer objectSeries, string objectName, string objectInfoName, string objectInfo, string stackPos returns nothing
	local unit u
	local integer tempIndex
	local integer tempIndex_2
	local integer tempIndex_3
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set InteractableObject_index[this] = -1
	set InteractableObject_customSound[this] = 0
	set InteractableObject_soundOnPoint[this] = false
	set InteractableObject_playSound[this] = true
	set InteractableObject_removeOnInteract[this] = false
	set InteractableObject_SFXZ[this] = 40.
	set InteractableObject_instanceCount = InteractableObject_instanceCount + 1
	set InteractableObject_instances[InteractableObject_instanceCount] = this
	set InteractableObject_index[this] = InteractableObject_instanceCount
	set InteractableObject_name[this] = objectName
	set InteractableObject_activateDist[this] = InteractableObject_STANDARD_ACTIVATEDISTANCE
	set InteractableObject_info[this] = objectInfo
	set InteractableObject_series[this] = objectSeries
	set InteractableObject_infoName[this] = objectInfoName
	set InteractableObject_scale[this] = objectScale
	if InteractableObject_filterGroup != null then
		call group_enumUnitsInRange(InteractableObject_filterGroup, objectPos_x, objectPos_y, 200., Condition(ref_function_InteractableObject_filter))
		if group_size(InteractableObject_filterGroup) > 0 then
			set u = group_getRandomUnit(InteractableObject_filterGroup)
			set tempIndex = this
			set InteractableObject_pos[tempIndex] = unit_getPos(u)
			set InteractableObject_pos_2[tempIndex] = unit_getPos_return_y
			call unit_remove(u)
			call group_clear(InteractableObject_filterGroup)
		else
			set tempIndex_2 = this
			set InteractableObject_pos[tempIndex_2] = objectPos_x
			set InteractableObject_pos_2[tempIndex_2] = objectPos_y
		endif
	else
		set tempIndex_3 = this
		set InteractableObject_pos[tempIndex_3] = objectPos_x
		set InteractableObject_pos_2[tempIndex_3] = objectPos_y
	endif
	set InteractableObject_t[this] = getTimer("when calling getTimer in InteractableObjects, line 83")
	set wurst_stack_depth = wurst_stack_depth - 1
	set u = null
endfunction

function new_InteractableObject takes real objectPos_x, real objectPos_y, real objectScale, integer objectSeries, string objectName, string objectInfoName, string objectInfo, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_InteractableObject("when calling InteractableObject in InteractableObjects, line 49")
	call construct_InteractableObject(this, objectPos_x, objectPos_y, objectScale, objectSeries, objectName, objectInfoName, objectInfo, "when calling construct_InteractableObject in InteractableObjects, line 49")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function init_InteractableObjects takes string stackPos returns boolean
	local integer receiver
	local integer receiver_2
	local trigger receiver_3
	local trigger receiver_4
	local trigger receiver_5
	local trigger receiver_6
	local trigger receiver_7
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set InteractableObjects_orderTarget = null
	set InteractableObject_STANDARD_ACTIVATEDISTANCE = 100.
	set InteractableObject_STANDARD_MODELSIZE = 0.5
	set InteractableObject_UNITID = 1966092356
	set InteractableObject_MARKERID = 1966092357
	set InteractableObject_SFXID = 1747988545
	set InteractableObject_STANDARDSOUND = new_SoundDefinition(Sounds_wayPointBling, false, "when calling new_SoundDefinition in InteractableObjects, line 18")
	set InteractableObject_filterGroup = CreateGroup()
	set InteractableObject_SERIES_THEMONSTER = 0
	set InteractableObject_instanceCount = -1
	set receiver = new_InteractableObject(-10320., 5377., 1.0, InteractableObject_SERIES_THEMONSTER, "A Strange Letter", "", "" + "On the rock lies a new and unharmed letter. It doesn't\n" + "state who it's addressed to. It reads: \n" + "\n" + "I hope your training has given you and your kin leverage\n" + "to fend off the invaders. The stay of your kind and \n" + "troubled soul has brought joy and sorrow to me and my\n" + "family in the fortress, but not the least brought life\n" + "to a long lifeless place. For this. we want to thank you,\n" + "and grant you these last gifts of our power, in hope they\n" + "will help you with the troubles at home. We long to see\n" + "you again, and dearly hope you will return to us in the\n" + "near future.\n" + "\n" + "We wish you much luck, dear friend\n" + "T.H.M\n", "when calling new_InteractableObject in InteractableObjects, line 220")
	call dispatch_InteractableObject_InteractableObjects_InteractableObject_setCustomSound(receiver, Sounds_questActivateWhat1, "when calling setCustomSound in InteractableObjects, line 237")
	call new_InteractableObject(-11500., 5200., 1.0, InteractableObject_SERIES_THEMONSTER, "Hateful Drawings", "", "" + "A jagged and rough drawing of a tall, man-like figure co-\n" + "vers this box. It's drawn in it red - it seems like blood", "when calling new_InteractableObject in InteractableObjects, line 239")
	call new_InteractableObject(-11275., 5250., 1.0, InteractableObject_SERIES_THEMONSTER, "Blue Glowing Mushrooms", "", "" + "A blue and greenish kind of mushroom, giving off a very\n" + "vague glow - only enough to give light to the darkest of\n" + "crevices. When touched it releases a characteristic scent,\n" + "hard to describe as horrible or lovely. Its abundance in\n" + "the mines suggests that the villagers don't fint it useful.\n" + "Certain places, however, some has been cut down and put in\n" + "old mine carts.", "when calling new_InteractableObject in InteractableObjects, line 243")
	call new_InteractableObject(-9958., 4273., 1.0, InteractableObject_SERIES_THEMONSTER, "Old markings", "", "" + "Strange uninterpretable markings cover this rock, as if\n" + "are a combination of simple drawings and twisted letters.\n" + "One thing is sure: the wear and tear, shows it's old -" + "very old.", "when calling new_InteractableObject in InteractableObjects, line 252")
	set receiver_2 = new_InteractableObject(-11064., 3750., 1.0, InteractableObject_SERIES_THEMONSTER, "Precious Metal", "", "" + "A material naturally found within the mines. It's thought\n" + "of as very precious by the inhabitants of the village for\n" + "it's many uses", "when calling new_InteractableObject in InteractableObjects, line 258")
	call dispatch_InteractableObject_InteractableObjects_InteractableObject_setSFXZ(receiver_2, 150., "when calling setSFXZ in InteractableObjects, line 262")
	set receiver_3 = CreateTrigger()
	call trigger_registerAnyUnitEvent(receiver_3, EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER)
	set receiver_4 = receiver_3
	call trigger_registerAnyUnitEvent(receiver_4, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)
	set receiver_5 = receiver_4
	call trigger_registerAnyUnitEvent(receiver_5, EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER)
	set receiver_6 = receiver_5
	call trigger_registerAnyUnitEvent(receiver_6, EVENT_PLAYER_UNIT_ISSUED_ORDER)
	set receiver_7 = receiver_6
	call trigger_addCondition(receiver_7, Condition(ref_function_bridge_isOrdered))
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
	set receiver_6 = null
	set receiver_7 = null
	return true
endfunction

function bridge_init_InteractableObjects takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_InteractableObjects("InteractableObjects, line 1")
endfunction

function alloc_Closure_3 takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Comparator_firstFree == 0 then
		if Comparator_maxIndex < 32768 then
			set Comparator_maxIndex = Comparator_maxIndex + 1
			set this = Comparator_maxIndex
		else
			call error("Out of memory: Could not create Closure.", "when calling error in ")
			set this = 0
		endif
	else
		set Comparator_firstFree = Comparator_firstFree - 1
		set this = Comparator_nextFree[Comparator_firstFree]
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function alloc_Closure_4 takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Comparator_firstFree == 0 then
		if Comparator_maxIndex < 32768 then
			set Comparator_maxIndex = Comparator_maxIndex + 1
			set this = Comparator_maxIndex
		else
			call error("Out of memory: Could not create Closure.", "when calling error in ")
			set this = 0
		endif
	else
		set Comparator_firstFree = Comparator_firstFree - 1
		set this = Comparator_nextFree[Comparator_firstFree]
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function realToIndex takes real r returns integer
	return real_toInt(r * TypeCasting_R2I_PRECISION)
endfunction

function init_LinkedList takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call alloc_Closure_3("when calling alloc_Closure in LinkedList, line 479")
	call alloc_Closure_4("when calling alloc_Closure in LinkedList, line 483")
	call realToIndex(0.)
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_LinkedList takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_LinkedList("LinkedList, line 1")
endfunction

function init_Music takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set Music_loopTimer = getTimer("when calling getTimer in Music, line 7")
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_Music takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_Music("Music, line 1")
endfunction

function alloc_IdGenerator takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if IdGenerator_firstFree == 0 then
		if IdGenerator_maxIndex < 32768 then
			set IdGenerator_maxIndex = IdGenerator_maxIndex + 1
			set this = IdGenerator_maxIndex
		else
			call error("Out of memory: Could not create IdGenerator.", "when calling error in ")
			set this = 0
		endif
	else
		set IdGenerator_firstFree = IdGenerator_firstFree - 1
		set this = IdGenerator_nextFree[IdGenerator_firstFree]
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_IdGenerator takes integer this, integer start returns nothing
endfunction

function new_IdGenerator takes integer start, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_IdGenerator("when calling IdGenerator in ObjectIdGenerator, line 20")
	call construct_IdGenerator(this, start)
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function init_ObjectIdGenerator takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call new_IdGenerator(2016423984, "when calling new_IdGenerator in ObjectIdGenerator, line 7")
	call new_IdGenerator(1213018160, "when calling new_IdGenerator in ObjectIdGenerator, line 8")
	call new_IdGenerator(1095577648, "when calling new_IdGenerator in ObjectIdGenerator, line 9")
	call new_IdGenerator(1112354864, "when calling new_IdGenerator in ObjectIdGenerator, line 10")
	call new_IdGenerator(1229795376, "when calling new_IdGenerator in ObjectIdGenerator, line 11")
	call new_IdGenerator(1380790320, "when calling new_IdGenerator in ObjectIdGenerator, line 12")
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_ObjectIdGenerator takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_ObjectIdGenerator("ObjectIdGenerator, line 1")
endfunction

function alloc_Closure_5 takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if CallbackSingle_firstFree == 0 then
		if CallbackSingle_maxIndex < 32768 then
			set CallbackSingle_maxIndex = CallbackSingle_maxIndex + 1
			set this = CallbackSingle_maxIndex
			set CallbackSingle_typeId[this] = 644
		else
			call error("Out of memory: Could not create Closure.", "when calling error in ")
			set this = 0
		endif
	else
		set CallbackSingle_firstFree = CallbackSingle_firstFree - 1
		set this = CallbackSingle_nextFree[CallbackSingle_firstFree]
		set CallbackSingle_typeId[this] = 644
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function construct_CallbackSingle takes integer this returns nothing
endfunction

function CallbackSingle_start takes integer this, real time, string stackPos returns nothing
	local timer receiver
	local timer receiver_2
	local integer temp
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set temp = this
	set receiver = getTimer("when calling getTimer in ClosureTimers, line 68")
	call timer_setData(receiver, this, "when calling setData in ClosureTimers, line 69")
	set receiver_2 = receiver
	call timer_start(receiver_2, time, ref_function_bridge_CallbackSingle_closure_impl)
	set CallbackSingle_t[temp] = receiver_2
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
endfunction

function dispatch_CallbackSingle_ClosureTimers_CallbackSingle_start takes integer this, real time, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if CallbackSingle_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling CallbackSingle.ClosureTimers_CallbackSingle_start", "when calling error in ")
		else
			call error("Called CallbackSingle.ClosureTimers_CallbackSingle_start on invalid object.", "when calling error in ")
		endif
	endif
	call CallbackSingle_start(this, time, "when calling start in ClosureTimers, line 67")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function doAfter takes real timeToWait, integer cb, string stackPos returns integer
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_CallbackSingle_ClosureTimers_CallbackSingle_start(cb, timeToWait, "when calling start in ClosureTimers, line 15")
	set wurst_stack_depth = wurst_stack_depth - 1
	return cb
endfunction

function nullTimer takes integer cb, string stackPos returns integer
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call doAfter(0., cb, "when calling doAfter in ClosureTimers, line 22")
	set wurst_stack_depth = wurst_stack_depth - 1
	return cb
endfunction

function init_OnUnitEnterLeave takes string stackPos returns boolean
	local integer i
	local integer temp
	local integer clVar
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set OnUnitEnterLeave_eventTrigger = CreateTrigger()
	set OnUnitEnterLeave_preplacedUnits = CreateGroup()
	set OnUnitEnterLeave_tempUnitsCount = 0
	set OnUnitEnterLeave_ABILITY_ID = 1095577649
	set i = 0
	set temp = bj_MAX_PLAYER_SLOTS - 1
	loop
		exitwhen i > temp
		call player_setAbilityAvailable(Player_players[i], OnUnitEnterLeave_ABILITY_ID, false)
		set i = i + 1
	endloop
	set clVar = alloc_Closure_5("when calling alloc_Closure in OnUnitEnterLeave, line 60")
	call construct_CallbackSingle(clVar)
	call nullTimer(clVar, "when calling nullTimer in OnUnitEnterLeave, line 60")
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_OnUnitEnterLeave takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_OnUnitEnterLeave("OnUnitEnterLeave, line 1")
endfunction

function alloc_Closure_6 takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if CallbackSingle_firstFree == 0 then
		if CallbackSingle_maxIndex < 32768 then
			set CallbackSingle_maxIndex = CallbackSingle_maxIndex + 1
			set this = CallbackSingle_maxIndex
			set CallbackSingle_typeId[this] = 645
		else
			call error("Out of memory: Could not create Closure.", "when calling error in ")
			set this = 0
		endif
	else
		set CallbackSingle_firstFree = CallbackSingle_firstFree - 1
		set this = CallbackSingle_nextFree[CallbackSingle_firstFree]
		set CallbackSingle_typeId[this] = 645
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function string_charAt takes string this, integer index returns string
	return SubString(this, index, index + 1)
endfunction

function toRawCode takes integer value returns string
	local string result = ""
	local integer remainingValue = value
	local integer byteno = 0
	local integer charValue
	loop
		exitwhen byteno > 3
		set charValue = ModuloInteger(remainingValue, 256)
		set remainingValue = remainingValue / 256
		set result = string_charAt(ObjectIds_CHARMAP, charValue) + result
		set byteno = byteno + 1
	endloop
	return result
endfunction

function int_toRawCode takes integer this returns string
	return toRawCode(this)
endfunction

function init_Preloader takes string stackPos returns boolean
	local integer clVar
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set Preloader_autoFinish = true
	set Preloader_dumg = CreateGroup()
	set Preloader_dum = createUnit(Basics_DUMMY_PLAYER, DummyRecycler_DUMMY_UNIT_ID, 0., 0., 0.)
	if Preloader_dum == null then
		call error("DUMMY_UNITID (" + int_toRawCode(DummyRecycler_DUMMY_UNIT_ID) + ") not added correctly to the map.", "when calling error in Preloader, line 48")
	endif
	if Preloader_autoFinish then
		set clVar = alloc_Closure_6("when calling alloc_Closure in Preloader, line 50")
		call construct_CallbackSingle(clVar)
		call nullTimer(clVar, "when calling nullTimer in Preloader, line 50")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_Preloader takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_Preloader("Preloader, line 1")
endfunction

function alloc_HashMap takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_firstFree == 0 then
		if Table_maxIndex < 32768 then
			set Table_maxIndex = Table_maxIndex + 1
			set this = Table_maxIndex
			set Table_typeId[this] = 723
		else
			call error("Out of memory: Could not create HashMap.", "when calling error in ")
			set this = 0
		endif
	else
		set Table_firstFree = Table_firstFree - 1
		set this = Table_nextFree[Table_firstFree]
		set Table_typeId[this] = 723
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function new_HashMap takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_HashMap("when calling HashMap in HashMap, line 7")
	call construct_HashMap(this)
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function init_RegisterEvents takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set RegisterEvents_onCastMap = new_HashMap("when calling new_HashMap in RegisterEvents, line 55")
	call registerPlayerUnitEvent_2(EVENT_PLAYER_UNIT_SPELL_EFFECT, ref_function_bridge_RegisterEvents_closure_impl)
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_RegisterEvents takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_RegisterEvents("RegisterEvents, line 1")
endfunction

function c2sInit takes nothing returns nothing
	set StringUtils_c2s[0] = ""
	set StringUtils_c2s[1] = ""
	set StringUtils_c2s[2] = ""
	set StringUtils_c2s[3] = ""
	set StringUtils_c2s[4] = ""
	set StringUtils_c2s[5] = ""
	set StringUtils_c2s[6] = ""
	set StringUtils_c2s[7] = ""
	set StringUtils_c2s[8] = ""
	set StringUtils_c2s[9] = "\t"
	set StringUtils_c2s[10] = "\n"
	set StringUtils_c2s[11] = ""
	set StringUtils_c2s[12] = ""
	set StringUtils_c2s[13] = "\r"
	set StringUtils_c2s[14] = ""
	set StringUtils_c2s[15] = ""
	set StringUtils_c2s[16] = ""
	set StringUtils_c2s[17] = ""
	set StringUtils_c2s[18] = ""
	set StringUtils_c2s[19] = ""
	set StringUtils_c2s[20] = ""
	set StringUtils_c2s[21] = ""
	set StringUtils_c2s[22] = ""
	set StringUtils_c2s[23] = ""
	set StringUtils_c2s[24] = ""
	set StringUtils_c2s[25] = ""
	set StringUtils_c2s[26] = ""
	set StringUtils_c2s[27] = ""
	set StringUtils_c2s[28] = ""
	set StringUtils_c2s[29] = ""
	set StringUtils_c2s[30] = ""
	set StringUtils_c2s[31] = ""
	set StringUtils_c2s[32] = " "
	set StringUtils_c2s[33] = "!"
	set StringUtils_c2s[34] = "\""
	set StringUtils_c2s[35] = "#"
	set StringUtils_c2s[36] = "$"
	set StringUtils_c2s[37] = "%"
	set StringUtils_c2s[38] = "&"
	set StringUtils_c2s[39] = "'"
	set StringUtils_c2s[40] = "("
	set StringUtils_c2s[41] = ")"
	set StringUtils_c2s[42] = "*"
	set StringUtils_c2s[43] = "+"
	set StringUtils_c2s[44] = ","
	set StringUtils_c2s[45] = "-"
	set StringUtils_c2s[46] = "."
	set StringUtils_c2s[47] = "/"
	set StringUtils_c2s[48] = "0"
	set StringUtils_c2s[49] = "1"
	set StringUtils_c2s[50] = "2"
	set StringUtils_c2s[51] = "3"
	set StringUtils_c2s[52] = "4"
	set StringUtils_c2s[53] = "5"
	set StringUtils_c2s[54] = "6"
	set StringUtils_c2s[55] = "7"
	set StringUtils_c2s[56] = "8"
	set StringUtils_c2s[57] = "9"
	set StringUtils_c2s[58] = ":"
	set StringUtils_c2s[59] = ";"
	set StringUtils_c2s[60] = "<"
	set StringUtils_c2s[61] = "="
	set StringUtils_c2s[62] = ">"
	set StringUtils_c2s[63] = "?"
	set StringUtils_c2s[64] = "@"
	set StringUtils_c2s[65] = "A"
	set StringUtils_c2s[66] = "B"
	set StringUtils_c2s[67] = "C"
	set StringUtils_c2s[68] = "D"
	set StringUtils_c2s[69] = "E"
	set StringUtils_c2s[70] = "F"
	set StringUtils_c2s[71] = "G"
	set StringUtils_c2s[72] = "H"
	set StringUtils_c2s[73] = "I"
	set StringUtils_c2s[74] = "J"
	set StringUtils_c2s[75] = "K"
	set StringUtils_c2s[76] = "L"
	set StringUtils_c2s[77] = "M"
	set StringUtils_c2s[78] = "N"
	set StringUtils_c2s[79] = "O"
	set StringUtils_c2s[80] = "P"
	set StringUtils_c2s[81] = "Q"
	set StringUtils_c2s[82] = "R"
	set StringUtils_c2s[83] = "S"
	set StringUtils_c2s[84] = "T"
	set StringUtils_c2s[85] = "U"
	set StringUtils_c2s[86] = "V"
	set StringUtils_c2s[87] = "W"
	set StringUtils_c2s[88] = "X"
	set StringUtils_c2s[89] = "Y"
	set StringUtils_c2s[90] = "Z"
	set StringUtils_c2s[91] = "["
	set StringUtils_c2s[92] = "\\"
	set StringUtils_c2s[93] = "]"
	set StringUtils_c2s[94] = "^"
	set StringUtils_c2s[95] = "_"
	set StringUtils_c2s[96] = "`"
	set StringUtils_c2s[97] = "a"
	set StringUtils_c2s[98] = "b"
	set StringUtils_c2s[99] = "c"
	set StringUtils_c2s[100] = "d"
	set StringUtils_c2s[101] = "e"
	set StringUtils_c2s[102] = "f"
	set StringUtils_c2s[103] = "g"
	set StringUtils_c2s[104] = "h"
	set StringUtils_c2s[105] = "i"
	set StringUtils_c2s[106] = "j"
	set StringUtils_c2s[107] = "k"
	set StringUtils_c2s[108] = "l"
	set StringUtils_c2s[109] = "m"
	set StringUtils_c2s[110] = "n"
	set StringUtils_c2s[111] = "o"
	set StringUtils_c2s[112] = "p"
	set StringUtils_c2s[113] = "q"
	set StringUtils_c2s[114] = "r"
	set StringUtils_c2s[115] = "s"
	set StringUtils_c2s[116] = "t"
	set StringUtils_c2s[117] = "u"
	set StringUtils_c2s[118] = "v"
	set StringUtils_c2s[119] = "w"
	set StringUtils_c2s[120] = "x"
	set StringUtils_c2s[121] = "y"
	set StringUtils_c2s[122] = "z"
	set StringUtils_c2s[123] = "{"
	set StringUtils_c2s[124] = "|"
	set StringUtils_c2s[125] = "}"
	set StringUtils_c2s[126] = "~"
	set StringUtils_c2s[127] = ""
endfunction

function string_toUpperCase takes string this returns string
	return StringCase(this, true)
endfunction

function s2cInit takes nothing returns nothing
	local integer i = 0
	local integer temp = StringUtils_MAX_INDEX
	loop
		exitwhen i > temp
		if string_toUpperCase(StringUtils_c2s[i]) == StringUtils_c2s[i] then
		endif
		set i = i + 1
	endloop
endfunction

function widthInit takes nothing returns nothing
endfunction

function initialize takes nothing returns nothing
	call c2sInit()
	call s2cInit()
	call widthInit()
endfunction

function hashtable_hasString takes hashtable this, integer parentKey, integer childKey returns boolean
	return HaveSavedString(this, parentKey, childKey)
endfunction

function Table_hasString takes integer this, integer parentKey returns boolean
	return hashtable_hasString(Table_ht, this, parentKey)
endfunction

function dispatch_Table_Table_Table_hasString takes integer this, integer parentKey, string stackPos returns boolean
	local boolean Table_Table_hasString_result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Table.Table_Table_hasString", "when calling error in ")
		else
			call error("Called Table.Table_Table_hasString on invalid object.", "when calling error in ")
		endif
	endif
	set Table_Table_hasString_result = Table_hasString(this, parentKey)
	set wurst_stack_depth = wurst_stack_depth - 1
	return Table_Table_hasString_result
endfunction

function hashtable_saveString takes hashtable this, integer parentKey, integer childKey, string value returns nothing
	call SaveStr(this, parentKey, childKey, value)
endfunction

function Table_saveString takes integer this, integer parentKey, string value returns nothing
	call hashtable_saveString(Table_ht, this, parentKey, value)
endfunction

function dispatch_Table_Table_Table_saveString takes integer this, integer parentKey, string value, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if Table_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling Table.Table_Table_saveString", "when calling error in ")
		else
			call error("Called Table.Table_Table_saveString on invalid object.", "when calling error in ")
		endif
	endif
	call Table_saveString(this, parentKey, value)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function stringToIndex takes string s, string stackPos returns integer
	local integer hash
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set hash = string_getHash(s)
	if  not dispatch_Table_Table_Table_hasString(TypeCasting_typecastdata, hash, "when calling hasString in TypeCasting, line 24") then
		call dispatch_Table_Table_Table_saveString(TypeCasting_typecastdata, hash, s, "when calling saveString in TypeCasting, line 25")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return hash
endfunction

function init_StringUtils takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set StringUtils_MAX_INDEX = 126 + 1
	call initialize()
	call stringToIndex("", "when calling stringToIndex in StringUtils, line 165")
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_StringUtils takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_StringUtils("StringUtils, line 1")
endfunction

function init_TimerUtils takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set TimerUtils_freeTimersCount = 0
	set TimerUtils_timerData = new_Table("when calling new_Table in TimerUtils, line 12")
	set TimerUtils_HELD = 679645218
	call CreateTimer()
	set TimerUtils_timedLoopTrig = CreateTrigger()
	set TimerUtils_conditionCount = 0
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_TimerUtils takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_TimerUtils("TimerUtils, line 1")
endfunction

function initTypecastData takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call dispatch_Table_Table_Table_saveString(TypeCasting_typecastdata, 0, "", "when calling saveString in TypeCasting, line 11")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function init_TypeCasting takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set TypeCasting_typecastdata = new_Table("when calling new_Table in TypeCasting, line 6")
	set TypeCasting_R2I_PRECISION = 1000.
	call initTypecastData("when calling initTypecastData in TypeCasting, line 14")
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_TypeCasting takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_TypeCasting("TypeCasting, line 1")
endfunction

function init_ZoneTransition takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_start(getTimer("when calling getTimer in ZoneTransition, line 13"), 0.1, ref_function_bridge_delayedInit_2)
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_ZoneTransition takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_ZoneTransition("ZoneTransition, line 1")
endfunction

function construct_SoundDefinition2 takes integer this, string file, boolean looping, boolean is3D, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set SoundDefinition_soundStack[this] = new_LinkedList("when calling new_LinkedList in SoundUtils, line 34")
	set SoundDefinition_duration[this] = 10000
	set SoundDefinition_is3D[this] = false
	set SoundDefinition_stopOnLeaveRange[this] = false
	set SoundDefinition_fadeIn[this] = SoundUtils_DEFAULT_SOUND_FADE_IN_RATE
	set SoundDefinition_fadeOut[this] = SoundUtils_DEFAULT_SOUND_FADE_OUT_RATE
	set SoundDefinition_eaxSetting[this] = SoundUtils_DEFAULT_SOUND_EAX_SETTINGS
	set SoundDefinition_file[this] = file
	set SoundDefinition_looping[this] = looping
	set SoundDefinition_is3D[this] = is3D
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function new_SoundDefinition_2 takes string file, boolean looping, boolean is3D, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_SoundDefinition("when calling SoundDefinition in SoundUtils, line 49")
	call construct_SoundDefinition2(this, file, looping, is3D, "when calling construct_SoundDefinition2 in SoundUtils, line 49")
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function init_bear_Attack takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set Attack_hitSounds[0] = new_SoundDefinition_2(Sounds_woodHeavyBashFlesh1, false, true, "when calling new_SoundDefinition in bear_Attack, line 27")
	set Attack_hitSounds[1] = new_SoundDefinition_2(Sounds_woodHeavyBashFlesh2, false, true, "when calling new_SoundDefinition in bear_Attack, line 28")
	set Attack_hitSounds[2] = new_SoundDefinition_2(Sounds_woodHeavyBashFlesh3, false, true, "when calling new_SoundDefinition in bear_Attack, line 29")
	set Attack_ATTACKRANGE = 200.
	set Attack_UPDATEMOVE_FREQ = 0.5
	set Attack_onCooldown = false
	set Attack_updateMove = false
	call registerSpellEffectEvent(1093677633, ref_function_bridge_Attack_onHit, "when calling registerSpellEffectEvent in bear_Attack, line 109")
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_bear_Attack takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_bear_Attack("bear_Attack, line 2")
endfunction

function Log_trace takes string msg returns nothing
	call printLog(Player_localPlayer, 0, msg)
endfunction

function unit_hasAbility takes unit this, integer id returns boolean
	return GetUnitAbilityLevel(this, id) > 0
endfunction

function preloadAbility takes integer abilId, string stackPos returns boolean
	local boolean result
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call unit_addAbility(Preloader_dum, abilId)
	set result = true
	if Preloader_dum == null then
		call error("Do not load abilities after map init when autoFinish = true", "when calling error in Preloader, line 24")
	elseif  not unit_hasAbility(Preloader_dum, abilId) then
		call Log_trace("PreloadAbility: Ability " + int_toRawCode(abilId) + " does not exist.")
		set result = false
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return result
endfunction

function init_bear_Charge takes string stackPos returns boolean
	local integer tempIndex
	local integer tempIndex_2
	local integer tempIndex_3
	local integer tempIndex_4
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call preloadAbility(1093677637, "when calling preloadAbility in bear_Charge, line 14")
	set Charge_ENABLED = true
	set Charge_STARTWITHCOOLDOWN = true
	set Charge_COOLDOWN = 30.
	set Charge_DAMAGE = 2000.
	set Charge_STUN_DURATION_BEAR = 8.
	set Charge_STUN_DURATION_HUNTER = 8
	set Charge_SPEED = 700.
	set Charge_HITRANGE = 150.
	set Charge_MOVE_ADJUSTPERSEC = 20.
	set Charge_MOVE_UPDATEFREQ = 0.03
	set Charge_MOVE_RANGEPERUPDATE = Charge_SPEED * Charge_MOVE_UPDATEFREQ
	set Charge_isReady = false
	set Charge_effectSound1 = new_SoundDefinition(Sounds_grizzlyBearReady1, false, "when calling new_SoundDefinition in bear_Charge, line 52")
	set Charge_effectSound2 = new_SoundDefinition_2(Sounds_catapultMissile4, false, true, "when calling new_SoundDefinition in bear_Charge, line 53")
	set tempIndex = 0
	set Rock_POS[tempIndex] = -9356.
	set Rock_POS_2[tempIndex] = 13672.
	set tempIndex_2 = 1
	set Rock_POS[tempIndex_2] = -10359.
	set Rock_POS_2[tempIndex_2] = 13757.
	set tempIndex_3 = 2
	set Rock_POS[tempIndex_3] = -10300.
	set Rock_POS_2[tempIndex_3] = 12780.
	set tempIndex_4 = 3
	set Rock_POS[tempIndex_4] = -9425.
	set Rock_POS_2[tempIndex_4] = 12964.
	set Rock_models[0] = "Doodads\\LordaeronSummer\\Terrain\\LoardaeronRockChunks\\LoardaeronRockChunks1.mdl"
	set Rock_models[1] = "Doodads\\LordaeronSummer\\Terrain\\LoardaeronRockChunks\\LoardaeronRockChunks3.mdl"
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_bear_Charge takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_bear_Charge("bear_Charge, line 2")
endfunction

function init_bear_Frenzy takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set Frenzy_ENABLED = true
	set Frenzy_MOVESPEEDINC = 1.5
	set Frenzy_ATTACKSPEEDINC = 1.5
	set Frenzy_SIZEINC = 0.2
	set Frenzy_DURATION = 6.
	set Frenzy_COOLDOWN = 20.
	set Frenzy_FINISH_DELAY = 5.
	set Frenzy_STARTWITHCOOLDOWN = true
	set Frenzy_GROWTHFREQ = 0.05
	set Frenzy_GROWTHTIME = 0.75
	set Frenzy_isReady = false
	set Frenzy_isActive = false
	set Frenzy_shrink = false
	set Frenzy_GROWTHPRTICK = Frenzy_SIZEINC / (Frenzy_GROWTHTIME / Frenzy_GROWTHFREQ)
	set Frenzy_effectSound1 = new_SoundDefinition(Sounds_grizzlyBearReady1, false, "when calling new_SoundDefinition in bear_Frenzy, line 50")
	set Frenzy_effectSound2 = new_SoundDefinition(Sounds_battleRoar1, false, "when calling new_SoundDefinition in bear_Frenzy, line 51")
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_bear_Frenzy takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_bear_Frenzy("bear_Frenzy, line 2")
endfunction

function init_bear_Shockwave takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set Shockwave_ENABLED = true
	set Shockwave_DAMAGE = 800.
	set Shockwave_COOLDOWN = 5.
	set Shockwave_WIDTH = 200.
	set Shockwave_SPEED = 1500.
	set Shockwave_MIN_DIST = 300.
	set Shockwave_DISTANCE = 2000.
	set Shockwave_STARTDELAY = 3.
	set Shockwave_DELAYRESETTIME = 5.
	set Shockwave_IDLE_DELAY = 2.0
	set Shockwave_isReady = false
	set Shockwave_delayHasRun = false
	set Shockwave_delayIsRunning = false
	call registerSpellEffectEvent(1093677634, ref_function_Shockwave_onCast, "when calling registerSpellEffectEvent in bear_Shockwave, line 180")
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_bear_Shockwave takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_bear_Shockwave("bear_Shockwave, line 1")
endfunction

function init_tm_ArcaneBeing takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_start(getTimer("when calling getTimer in tm_ArcaneBeing, line 8"), 0.1, ref_function_bridge_ArcaneBeing_createBossInfo)
	set ArcaneBeing_allMobs = CreateGroup()
	set ArcaneBeing_SPAWNAREA = gg_rct_TM_ArcaneBeingSpawn
	set ArcaneBeing_UNITID = 1848651846
	set ArcaneBeing_HP = 500
	set ArcaneBeing_ARMOR = 0.
	set ArcaneBeing_MOVESPEED = 270.
	set ArcaneBeing_ATTACKSPEED = 2.0
	set ArcaneBeing_STARTDMG = 50.
	set ArcaneBeing_GROWTH_DURATION = 20.0
	set ArcaneBeing_GROWTH_SCALE = 1.5
	set ArcaneBeing_GROWTH_DMG = 6.0
	set ArcaneBeing_GROWTH_FREQ = 0.25
	set ArcaneBeing_GROWTH_MAXCOUNT = R2I(ArcaneBeing_GROWTH_DURATION / ArcaneBeing_GROWTH_FREQ)
	set ArcaneBeing_GROWTH_DMG_PER_GROWTH = ArcaneBeing_STARTDMG * (ArcaneBeing_GROWTH_DMG - 1.) / ArcaneBeing_GROWTH_MAXCOUNT
	set ArcaneBeing_GROWTH_SCALE_PER_GROWTH = ArcaneBeing_GROWTH_SCALE / ArcaneBeing_GROWTH_MAXCOUNT
	set ArcaneBeing_STARTSCALE = 1.2
	set ArcaneBeing_COOLDOWN = 20.0
	set ArcaneBeing_sound_Spawn = new_SoundDefinition(Sounds_obsidianAvengerWhat2, false, "when calling new_SoundDefinition in tm_ArcaneBeing, line 46")
	set ArcaneBeing_cooldownTimer = getTimer("when calling getTimer in tm_ArcaneBeing, line 58")
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_tm_ArcaneBeing takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_tm_ArcaneBeing("tm_ArcaneBeing, line 1")
endfunction

function init_tm_FlameStrike takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_start(getTimer("when calling getTimer in tm_FlameStrike, line 9"), 0.1, ref_function_bridge_FlameStrike_onGameInit)
	set FlameStrike_isReady = false
	set FlameStrike_INITDMG_REPEATS = 3
	set FlameStrike_INITDMG_FREQ = 0.5
	set FlameStrike_INITDMG_AMOUNT = 150.
	set FlameStrike_INITDMG_DELAY = 1.5
	set FlameStrike_COOLDOWN = 12.0
	set FlameStrike_AOERANGE = 200.
	set FlameStrike_BURN_DMG = 150.
	set FlameStrike_BURN_CHECK_FREQ = 0.25
	set FlameStrike_BURN_FREQ = 0.5 - FlameStrike_BURN_CHECK_FREQ
	set FlameStrike_instanceCounter = 0
	set FlameStrike_cooldownTimer = getTimer("when calling getTimer in tm_FlameStrike, line 38")
	set FlameStrike_burnTimer = getTimer("when calling getTimer in tm_FlameStrike, line 42")
	set FlameStrike_burnIsActive = false
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_tm_FlameStrike takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_tm_FlameStrike("tm_FlameStrike, line 1")
endfunction

function init_tm_IceBlast takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call registerSpellEffectEvent(1093677618, ref_function_bridge_IceBlast_onCast, "when calling registerSpellEffectEvent in tm_IceBlast, line 11")
	call timer_start(getTimer("when calling getTimer in tm_IceBlast, line 13"), 0.1, ref_function_bridge_IceBlast_setupBossInfo)
	set IceBlast_COOLDOWN = 8.0
	set IceBlast_DAMAGE = 150.
	set IceBlast_sound_Hit = new_SoundDefinition(Sounds_frostArrowHit1, false, "when calling new_SoundDefinition in tm_IceBlast, line 25")
	set IceBlast_isReady = false
	set IceBlast_cooldownTimer = getTimer("when calling getTimer in tm_IceBlast, line 30")
	set wurst_stack_depth = wurst_stack_depth - 1
	return true
endfunction

function bridge_init_tm_IceBlast takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_tm_IceBlast("tm_IceBlast, line 1")
endfunction

function init_tm_MagicCrystal takes string stackPos returns boolean
	local trigger receiver
	local trigger receiver_2
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set receiver = CreateTrigger()
	call trigger_registerAnyUnitEvent(receiver, EVENT_PLAYER_UNIT_DEATH)
	set receiver_2 = receiver
	call trigger_addAction(receiver_2, ref_function_bridge_MagicCrystal_dies)
	call timer_start(getTimer("when calling getTimer in tm_MagicCrystal, line 16"), 0.1, ref_function_bridge_MagicCrystal_createBossInfo)
	set MagicCrystal_ABSORB_DUR = 10.
	set MagicCrystal_CRYSTAL_HP = 400
	set MagicCrystal_LIGHTNING_DMG = 90.
	set MagicCrystal_LIGHTNING_FREQ = 2.0
	set MagicCrystal_activationHp[0] = 0.75
	set MagicCrystal_activationHp[1] = 0.5
	set MagicCrystal_activationHp[2] = 0.25
	set MagicCrystal_spawnRect[0] = gg_rct_TM_MagicCrystal1
	set MagicCrystal_spawnRect[1] = gg_rct_TM_MagicCrystal2
	set MagicCrystal_spawnRect[2] = gg_rct_TM_MagicCrystal3
	set MagicCrystal_placeholderId = 1966092353
	set MagicCrystal_sfxId = 1966092355
	set MagicCrystal_sound_AbsorbCrystal = new_SoundDefinition(Sounds_siphonManaLoop, false, "when calling new_SoundDefinition in tm_MagicCrystal, line 41")
	set MagicCrystal_standardMoveSpeed = 350.
	set MagicCrystal_hasRun[0] = false
	set MagicCrystal_hasRun[1] = false
	set MagicCrystal_hasRun[2] = false
	set MagicCrystal_runTimer1 = getTimer("when calling getTimer in tm_MagicCrystal, line 68")
	set MagicCrystal_runTimer2 = getTimer("when calling getTimer in tm_MagicCrystal, line 70")
	set MagicCrystal_runTimer3 = getTimer("when calling getTimer in tm_MagicCrystal, line 72")
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	return true
endfunction

function bridge_init_tm_MagicCrystal takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_tm_MagicCrystal("tm_MagicCrystal, line 1")
endfunction

function init_tm_Main takes string stackPos returns boolean
	local trigger receiver
	local trigger receiver_2
	local trigger receiver_3
	local trigger receiver_4
	local trigger receiver_5
	local trigger receiver_6
	local real temp_tm_Main_bossSpawn_x
	local real temp_tm_Main_bossSpawn_y
	local real temp_tm_Main_heroSpawn_x
	local real temp_tm_Main_heroSpawn_y
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set tm_Main_theMonster = null
	set tm_Main_bossId = 1848651845
	set tm_Main_bossIsEnraged = false
	set tm_Main_bossHasAbsorbed = false
	set tm_Main_FLAMESTRIKE_TOGGLE = true
	set tm_Main_ARCANEBEING_TOGGLE = true
	set tm_Main_ICEBLAST_TOGGLE = true
	set tm_Main_MAGICCRYSTAL_TOGGLE = true
	set tm_Main_ENRAGE_TOGGLE = true
	set temp_tm_Main_bossSpawn_x = GetRectCenterX(gg_rct_TM_BossSpawn)
	set temp_tm_Main_bossSpawn_y = GetRectCenterY(gg_rct_TM_BossSpawn)
	set tm_Main_bossSpawn_x = temp_tm_Main_bossSpawn_x
	set tm_Main_bossSpawn_y = temp_tm_Main_bossSpawn_y
	set temp_tm_Main_heroSpawn_x = GetRectCenterX(gg_rct_TM_HeroSpawn)
	set temp_tm_Main_heroSpawn_y = GetRectCenterY(gg_rct_TM_HeroSpawn)
	set tm_Main_heroSpawn_x = temp_tm_Main_heroSpawn_x
	set tm_Main_heroSpawn_y = temp_tm_Main_heroSpawn_y
	set tm_Main_visionRect = gg_rct_TM_VisionRect
	set tm_Main_loopTimer = getTimer("when calling getTimer in tm_Main, line 33")
	set tm_Main_LOOP_FREQ = 0.10
	set tm_Main_busyDelayTimer = getTimer("when calling getTimer in tm_Main, line 36")
	set tm_Main_bossIsIdle = true
	set tm_Main_bossDmgInc = 1.0
	set tm_Main_THEMONSTER_HP = 7500
	set tm_Main_THEMONSTER_DAMAGE = 100
	set tm_Main_THEMONSTER_ATTACKSPEED = 2.0
	set tm_Main_THEMONSTER_MOVESPEED = 370.
	set tm_Main_ENRAGE_DMGINC = 1.75
	set tm_Main_CRYSTALABSORBED_DMGINC = 5.0
	set tm_Main_thisEventIsRunning = false
	set receiver = CreateTrigger()
	call trigger_registerPlayerChatEvent(receiver, Player(0), "-themonster", true)
	set receiver_2 = receiver
	call trigger_addCondition(receiver_2, Condition(ref_function_bridge_initEvent))
	set receiver_3 = CreateTrigger()
	call trigger_registerAnyUnitEvent(receiver_3, EVENT_PLAYER_UNIT_DEATH)
	set receiver_4 = receiver_3
	call trigger_addAction(receiver_4, ref_function_bridge_someoneDies)
	set receiver_5 = CreateTrigger()
	call trigger_registerPlayerEvent(receiver_5, Player(0), EVENT_PLAYER_END_CINEMATIC)
	set receiver_6 = receiver_5
	call trigger_addCondition(receiver_6, Condition(ref_function_bridge_leaveEvent))
	call timer_start(getTimer("when calling getTimer in tm_Main, line 69"), 0.1, ref_function_bridge_delayedInit_3)
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
	set receiver_6 = null
	return true
endfunction

function bridge_init_tm_Main takes nothing returns boolean
	set wurst_stack_depth = 0
	return init_tm_Main("tm_Main, line 1")
endfunction

function InteractableObject_startDistCheck takes unit whichObject, string stackPos returns nothing
	local integer i
	local integer temp
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if InteractableObject_instanceCount > -1 then
		set i = 0
		set temp = InteractableObject_instanceCount
		loop
			exitwhen i > temp
			if whichObject == InteractableObject_object[InteractableObject_instances[i]] then
				call timer_setData(InteractableObject_t[InteractableObject_instances[i]], InteractableObject_index[InteractableObject_instances[i]], "when calling setData in InteractableObjects, line 192")
				call timer_startPeriodic(InteractableObject_t[InteractableObject_instances[i]], 0.1, ref_function_bridge_InteractableObject_checkDistance)
			endif
			set i = i + 1
		endloop
	else
		call print("ERROR 1")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function isOrdered takes string stackPos returns boolean
	local unit target
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if unit_getTypeId(GetTriggerUnit()) == unit_getTypeId(General_hunter) then
		if GetIssuedOrderId() == SpecialOrders_smart then
			set target = GetOrderTargetUnit()
			if target != null then
				set InteractableObjects_orderTarget = target
				if unit_getTypeId(target) == 1966092356 then
					call InteractableObject_startDistCheck(target, "when calling startDistCheck in InteractableObjects, line 205")
				endif
			else
				set InteractableObjects_orderTarget = null
			endif
		else
			set InteractableObjects_orderTarget = null
		endif
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set target = null
	return false
endfunction

function bridge_isOrdered takes nothing returns boolean
	set wurst_stack_depth = 0
	return isOrdered("InteractableObjects, line 269")
endfunction

function BossEvent_leave takes code onFade, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set BossEvent_codeOnFade = onFade
	call dispatch_SoundDefinition_SoundUtils_SoundDefinition_play_2(BossEvent_sound_Leave, "when calling play in BossEvent, line 76")
	call timer_start(BossEvent_miscTimer, 0.5, ref_function_bridge_BossEvent_startFade_3)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function leaveEvent takes string stackPos returns boolean
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if BossEvent_canLeave then
		set BossEvent_canLeave = false
		call BossEvent_leave(ref_function_bridge_clear_2, "when calling leave in tm_Main, line 159")
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return false
endfunction

function bridge_leaveEvent takes nothing returns boolean
	set wurst_stack_depth = 0
	return leaveEvent("tm_Main, line 67")
endfunction

function FlameStrike_start takes nothing returns nothing
	call print("Flame Strike started...")
	set FlameStrike_isReady = false
	call unit_issueTargetOrderById(tm_Main_theMonster, Orders_fingerofdeath, General_hunter)
endfunction

function IceBlast_start takes nothing returns nothing
	call print("Ice Blast started...")
	set IceBlast_isReady = false
	call unit_issueTargetOrderById(tm_Main_theMonster, Orders_frostnova, General_hunter)
endfunction

function MagicCrystal_start takes integer crystalIndex, string stackPos returns nothing
	local integer tempIndex
	local unit temp
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call print("Magic crystal " + I2S(crystalIndex) + " has been started!")
	set MagicCrystal_hasRun[crystalIndex] = true
	call unit_setMoveSpeed(tm_Main_theMonster, 450.)
	call unit_setPathing(tm_Main_theMonster, false)
	set temp = tm_Main_theMonster
	set tempIndex = MagicCrystal_crystals[crystalIndex]
	call unit_issuePointOrder(temp, "move", MagicCrystal_pos[tempIndex], MagicCrystal_pos_2[tempIndex])
	call timer_setData(MagicCrystal_runTimer1, crystalIndex, "when calling setData in tm_MagicCrystal, line 383")
	call timer_startPeriodic(MagicCrystal_runTimer1, 0.1, ref_function_bridge_MagicCrystal_checkDistance)
	set wurst_stack_depth = wurst_stack_depth - 1
	set temp = null
endfunction

function mainLoop takes string stackPos returns nothing
	local real bossHp
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if tm_Main_bossIsIdle then
		set bossHp = unit_getHP(tm_Main_theMonster) / unit_getMaxHP(tm_Main_theMonster)
		if bossHp <= MagicCrystal_activationHp[2] and ( not MagicCrystal_hasRun[2]) and ( not tm_Main_bossHasAbsorbed) and tm_Main_ENRAGE_TOGGLE then
			set tm_Main_bossIsIdle = false
			call MagicCrystal_start(2, "when calling start in tm_Main, line 174")
		elseif bossHp <= MagicCrystal_activationHp[1] and ( not MagicCrystal_hasRun[1]) and ( not tm_Main_bossHasAbsorbed) and tm_Main_MAGICCRYSTAL_TOGGLE then
			set tm_Main_bossIsIdle = false
			call MagicCrystal_start(1, "when calling start in tm_Main, line 179")
		elseif bossHp <= MagicCrystal_activationHp[0] and ( not MagicCrystal_hasRun[0]) and ( not tm_Main_bossHasAbsorbed) and tm_Main_MAGICCRYSTAL_TOGGLE then
			set tm_Main_bossIsIdle = false
			call MagicCrystal_start(0, "when calling start in tm_Main, line 183")
		elseif IceBlast_isReady then
			set tm_Main_bossIsIdle = false
			call IceBlast_start()
		elseif FlameStrike_isReady then
			set tm_Main_bossIsIdle = false
			call FlameStrike_start()
		endif
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function bridge_mainLoop takes nothing returns nothing
	set wurst_stack_depth = 0
	call mainLoop("tm_Main, line 215")
endfunction

function alloc_MagicCrystal takes string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if MagicCrystal_firstFree == 0 then
		if MagicCrystal_maxIndex < 32768 then
			set MagicCrystal_maxIndex = MagicCrystal_maxIndex + 1
			set this = MagicCrystal_maxIndex
			set MagicCrystal_typeId[this] = 696
		else
			call error("Out of memory: Could not create MagicCrystal.", "when calling error in ")
			set this = 0
		endif
	else
		set MagicCrystal_firstFree = MagicCrystal_firstFree - 1
		set this = MagicCrystal_nextFree[MagicCrystal_firstFree]
		set MagicCrystal_typeId[this] = 696
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function getRandomAngle takes nothing returns real
	return Deg2Rad(GetRandomReal(0., 360.))
endfunction

function construct_MagicCrystal takes integer this, integer crystalIndex returns nothing
	local integer tempIndex = this
	local unit receiver
	local unit receiver_2
	local effect receiver_3
	local effect receiver_4
	local effect receiver_5
	local effect receiver_6
	local integer temp
	local integer temp_2
	local integer tempIndex_2
	local integer tempIndex_3
	local integer tempIndex_4
	local player temp_3
	local integer temp_4
	set MagicCrystal_pos[tempIndex] = 0.
	set MagicCrystal_pos_2[tempIndex] = 0.
	set MagicCrystal_index[this] = -1
	set MagicCrystal_index[this] = crystalIndex
	set MagicCrystal_crystals[crystalIndex] = this
	set tempIndex_2 = this
	set MagicCrystal_pos[tempIndex_2] = rect_getCenter(MagicCrystal_spawnRect[crystalIndex])
	set MagicCrystal_pos_2[tempIndex_2] = rect_getCenter_return_y
	set temp = this
	set temp_3 = Player(11)
	set temp_4 = MagicCrystal_sfxId
	set tempIndex_3 = this
	set receiver = createUnit(temp_3, temp_4, MagicCrystal_pos[tempIndex_3], MagicCrystal_pos_2[tempIndex_3], getRandomAngle())
	call unit_setVertexColor(receiver, 150, 255, 150, 255)
	set receiver_2 = receiver
	call unit_setTimeScale(receiver_2, 1.5)
	set MagicCrystal_crystal[temp] = receiver_2
	set temp_2 = this
	set tempIndex_4 = this
	set receiver_3 = addEffect_2("units\\nightelf\\Wisp\\Wisp.mdl", vec2_withZ(MagicCrystal_pos[tempIndex_4], MagicCrystal_pos_2[tempIndex_4], 200.), vec2_withZ_return_y, vec2_withZ_return_z)
	call effect_setColorByPlayer(receiver_3, Player(22))
	set receiver_4 = receiver_3
	call effect_setColor_2(receiver_4, 150, 200, 255, 100)
	set receiver_5 = receiver_4
	call effect_setScale(receiver_5, 1.5)
	set receiver_6 = receiver_5
	call effect_setTimeScale(receiver_6, 0.25)
	set MagicCrystal_crystalSFX[temp_2] = receiver_6
	if MagicCrystal_index[this] == 2 then
		call unit_setVertexColor(MagicCrystal_crystal[this], 255, 255, 255, 255)
		call effect_setColorByPlayer(MagicCrystal_crystalSFX[this], Player(2))
	endif
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
	set receiver_6 = null
	set temp_3 = null
endfunction

function new_MagicCrystal takes integer crystalIndex, string stackPos returns integer
	local integer this
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set this = alloc_MagicCrystal("when calling MagicCrystal in tm_MagicCrystal, line 387")
	call construct_MagicCrystal(this, crystalIndex)
	set wurst_stack_depth = wurst_stack_depth - 1
	return this
endfunction

function MagicCrystal_onEventInit takes string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call new_MagicCrystal(0, "when calling new_MagicCrystal in tm_MagicCrystal, line 458")
	call new_MagicCrystal(1, "when calling new_MagicCrystal in tm_MagicCrystal, line 459")
	call new_MagicCrystal(2, "when calling new_MagicCrystal in tm_MagicCrystal, line 460")
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function onEventInit takes string stackPos returns nothing
	local unit receiver
	local unit receiver_2
	local unit receiver_3
	local unit receiver_4
	local unit receiver_5
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call moveHunter(tm_Main_heroSpawn_x, tm_Main_heroSpawn_y, tm_Main_visionRect, tm_Main_heroSpawn_x, tm_Main_heroSpawn_y + 300.)
	call playMusic(Sounds_nightElfX1)
	set receiver = CreateUnit(Player(11), tm_Main_bossId, tm_Main_bossSpawn_x, tm_Main_bossSpawn_y, 270.0)
	call unit_pause(receiver)
	set receiver_2 = receiver
	call unit_setMaxHP(receiver_2, tm_Main_THEMONSTER_HP, true)
	set receiver_3 = receiver_2
	call unit_setBaseDamage(receiver_3, tm_Main_THEMONSTER_DAMAGE, 1)
	set receiver_4 = receiver_3
	call unit_setMoveSpeed(receiver_4, tm_Main_THEMONSTER_MOVESPEED)
	set receiver_5 = receiver_4
	call unit_setAttackCooldown(receiver_5, tm_Main_THEMONSTER_ATTACKSPEED, 1)
	set tm_Main_theMonster = receiver_5
	call MagicCrystal_onEventInit("when calling onEventInit in tm_Main, line 232")
	set tm_Main_bossHasAbsorbed = false
	set tm_Main_bossIsEnraged = false
	set tm_Main_bossIsIdle = true
	set tm_Main_bossDmgInc = 1.0
	set tm_Main_thisEventIsRunning = true
	call SetWaterBaseColor(100, 255, 150, 150)
	call EnableDawnDusk(false)
	call SetTimeOfDay(0.00)
	call SetTimeOfDayScale(0.)
	set wurst_stack_depth = wurst_stack_depth - 1
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
endfunction

function bridge_onEventInit takes nothing returns nothing
	set wurst_stack_depth = 0
	call onEventInit("tm_Main, line 249")
endfunction

function removeFromHitTargets takes string stackPos returns nothing
	local timer t
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	set t = GetExpiredTimer()
	set DiseaseCloud_hitTargets[timer_getData(GetExpiredTimer(), "when calling getData in DiseaseCloud, line 358")] = null
	call timer_release(t, "when calling release in DiseaseCloud, line 359")
	set wurst_stack_depth = wurst_stack_depth - 1
	set t = null
endfunction

function bridge_removeFromHitTargets takes nothing returns nothing
	set wurst_stack_depth = 0
	call removeFromHitTargets("DiseaseCloud, line 337")
endfunction

function ArcaneBeing_stopSpawn takes nothing returns nothing
	call timer_pause(ArcaneBeing_cooldownTimer)
endfunction

function InteractableObject_activateSeries takes integer series returns nothing
	local integer i = 0
	local integer temp = InteractableObject_instanceCount
	local unit receiver
	local unit receiver_2
	local unit receiver_3
	local unit receiver_4
	local unit receiver_5
	local integer temp_2
	local integer temp_3
	local integer tempIndex
	local integer tempIndex_2
	local player temp_4
	local integer temp_5
	local player temp_6
	local integer temp_7
	loop
		exitwhen i > temp
		if InteractableObject_series[InteractableObject_instances[i]] == series then
			set temp_2 = InteractableObject_instances[i]
			set temp_4 = Player(PLAYER_NEUTRAL_PASSIVE)
			set temp_5 = InteractableObject_SFXID
			set tempIndex = InteractableObject_instances[i]
			set receiver = createUnit(temp_4, temp_5, InteractableObject_pos[tempIndex], InteractableObject_pos_2[tempIndex], 0.)
			call unit_setFlyHeight(receiver, InteractableObject_SFXZ[InteractableObject_instances[i]], 100.)
			set receiver_2 = receiver
			call unit_setVertexColor(receiver_2, 255, 255, 100, 200)
			set InteractableObject_sfx[temp_2] = receiver_2
			set temp_3 = InteractableObject_instances[i]
			set temp_6 = Player(PLAYER_NEUTRAL_PASSIVE)
			set temp_7 = InteractableObject_UNITID
			set tempIndex_2 = InteractableObject_instances[i]
			set receiver_3 = createUnit(temp_6, temp_7, InteractableObject_pos[tempIndex_2], InteractableObject_pos_2[tempIndex_2], 0.)
			call unit_setVertexColor(receiver_3, 0, 0, 0, 0)
			set receiver_4 = receiver_3
			call unit_setName(receiver_4, InteractableObject_name[InteractableObject_instances[i]])
			set receiver_5 = receiver_4
			call unit_setScale(receiver_5, InteractableObject_STANDARD_MODELSIZE * InteractableObject_scale[InteractableObject_instances[i]])
			set InteractableObject_object[temp_3] = receiver_5
		endif
		set i = i + 1
	endloop
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
	set temp_4 = null
	set temp_6 = null
endfunction

function MagicCrystal_stopCrystal takes integer this returns nothing
	if MagicCrystal_lightningTimer[this] != null then
		call timer_pause(MagicCrystal_lightningTimer[this])
	endif
	if MagicCrystal_placeholder[this] != null then
		call unit_setInvulnerable(MagicCrystal_placeholder[this], true)
	endif
endfunction

function dispatch_MagicCrystal_tm_MagicCrystal_MagicCrystal_stopCrystal takes integer this, string stackPos returns nothing
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if MagicCrystal_typeId[this] == 0 then
		if this == 0 then
			call error("Nullpointer exception when calling MagicCrystal.tm_MagicCrystal_MagicCrystal_stopCrystal", "when calling error in ")
		else
			call error("Called MagicCrystal.tm_MagicCrystal_MagicCrystal_stopCrystal on invalid object.", "when calling error in ")
		endif
	endif
	call MagicCrystal_stopCrystal(this)
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function MagicCrystal_stop takes string stackPos returns nothing
	local integer i
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	call timer_pause(MagicCrystal_runTimer1)
	call timer_pause(MagicCrystal_runTimer2)
	call timer_pause(MagicCrystal_runTimer3)
	call effect_destr(MagicCrystal_enrageSFX[0])
	call effect_destr(MagicCrystal_absorbSFX[0])
	call effect_destr(MagicCrystal_absorbSFX[1])
	call effect_destr(MagicCrystal_absorbSFX[2])
	call unit_issueImmediateOrder(tm_Main_theMonster, "stop")
	set i = 0
	loop
		exitwhen i > 2
		call dispatch_MagicCrystal_tm_MagicCrystal_MagicCrystal_stopCrystal(MagicCrystal_crystals[i], "when calling stopCrystal in tm_MagicCrystal, line 130")
		set i = i + 1
	endloop
	set wurst_stack_depth = wurst_stack_depth - 1
endfunction

function someoneDies takes string stackPos returns nothing
	local unit dyingUnit
	set wurst_stack[wurst_stack_depth] = stackPos
	set wurst_stack_depth = wurst_stack_depth + 1
	if tm_Main_thisEventIsRunning then
		set dyingUnit = GetDyingUnit()
		if dyingUnit == tm_Main_theMonster then
			call stopMusic()
			call timer_pause(tm_Main_loopTimer)
			call ArcaneBeing_stopSpawn()
			call ArcaneBeing_clear()
			call FlameStrike_clear("when calling clear in tm_Main, line 111")
			call MagicCrystal_stop("when calling stop in tm_Main, line 112")
			call unit_setInvulnerable(General_hunter, true)
			call InteractableObject_activateSeries(InteractableObject_SERIES_THEMONSTER)
			call BossEvent_win(ref_function_ambient)
		elseif dyingUnit == General_hunter then
			call stopMusic()
			set General_hunterIsDead = true
			call unit_setInvulnerable(tm_Main_theMonster, true)
			call timer_pause(tm_Main_loopTimer)
			call ArcaneBeing_stopSpawn()
			call MagicCrystal_stop("when calling stop in tm_Main, line 131")
			call BossEvent_failed(ref_function_bridge_clear)
		endif
	endif
	set wurst_stack_depth = wurst_stack_depth - 1
	set dyingUnit = null
endfunction

function bridge_someoneDies takes nothing returns nothing
	set wurst_stack_depth = 0
	call someoneDies("tm_Main, line 61")
endfunction

function checkCoordinates takes nothing returns nothing
	call print("Checking coordinates; move the mouse")
	set General_doCheckCoordinates = true
endfunction

function checkCoordinates2 takes nothing returns nothing
	local real x
	local real y
	if General_doCheckCoordinates then
		set x = GetLocationX(BlzGetTriggerPlayerMousePosition())
		set y = GetLocationY(BlzGetTriggerPlayerMousePosition())
		call print("X = " + R2S(x))
		call print("Y = " + R2S(y))
		set General_doCheckCoordinates = false
	endif
endfunction

function group_enumUnitsSelected takes group this, player p, boolexpr filter returns nothing
	call GroupEnumUnitsSelected(this, p, filter)
endfunction

function getUnitIndex takes nothing returns boolean
	local group receiver = CreateGroup()
	local group selectedUnits
	local integer n
	local string cond_result
	local unit u
	local group from
	local string temp
	call group_enumUnitsSelected(receiver, Player(0), Condition(ref_function_selectionFilter))
	set selectedUnits = receiver
	set n = group_size(selectedUnits)
	set temp = "Getting index for " + int_toString(n)
	if n == 1 then
		set cond_result = " unit"
	else
		set cond_result = " units"
	endif
	call print(temp + cond_result + " selected...")
	set from = selectedUnits
	loop
		exitwhen  not group_hasNext(from)
		set u = group_next(from)
		call print(" - " + unit_getName(u) + ": " + I2S(unit_getIndex(u)))
	endloop
	call group_destr(selectedUnits)
	set selectedUnits = null
	set receiver = null
	set u = null
	set from = null
	return false
endfunction

function idle takes nothing returns nothing
	call timer_pause(tm_Main_busyDelayTimer)
	set tm_Main_bossIsIdle = true
endfunction

function initFight takes nothing returns nothing
	call unit_unpause(tm_Main_theMonster)
	call unit_issueTargetOrder(tm_Main_theMonster, "attack", General_hunter)
	call player_select(Player(0), General_hunter)
	call unit_unpause(General_hunter)
	if tm_Main_FLAMESTRIKE_TOGGLE then
		call FlameStrike_runCooldown()
	endif
	if tm_Main_ICEBLAST_TOGGLE then
		call IceBlast_runCooldown()
	endif
	if tm_Main_ARCANEBEING_TOGGLE then
		call ArcaneBeing_runCooldown()
	endif
	call timer_startPeriodic(tm_Main_loopTimer, tm_Main_LOOP_FREQ, ref_function_bridge_mainLoop)
endfunction

function init_Abilities takes nothing returns boolean
	set Abilities_farseerMissile = "Abilities\\Weapons\\FarseerMissile\\FarseerMissile.mdx"
	set Abilities_forkedLightningTarget = "Abilities\\Spells\\Other\\ForkedLightning\\ForkedLightningTarget.mdx"
	return true
endfunction

function init_AbilityIds takes nothing returns boolean
	return true
endfunction

function init_Angle takes nothing returns boolean
	set Angle_DEGTORAD = 0.017453293
	set Angle_RADTODEG = 57.295779513
	return true
endfunction

function init_Basics takes nothing returns boolean
	set Basics_ANIMATION_PERIOD = 0.030
	set Basics_HEIGHT_ENABLER = 1097691750
	set Basics_LOCUST_ID = 1097625443
	set Basics_DUMMY_PLAYER = Player_players[PLAYER_NEUTRAL_PASSIVE]
	return true
endfunction

function init_BossAdd takes nothing returns boolean
	set Add_UPDATE_FREQ = 0.5
	return true
endfunction

function init_BossInformation takes nothing returns boolean
	local trigger receiver = CreateTrigger()
	local trigger receiver_2
	call trigger_addCondition(receiver, Condition(ref_function_bridge_ClickableObject_registerClick))
	set ClickableObject_clickTrg = receiver
	set receiver_2 = CreateTrigger()
	call trigger_addCondition(receiver_2, Condition(ref_function_ClickableObject_stopAttack))
	set ClickableObject_attackTrg = receiver_2
	set ClickableObject_placeholderId = 1966092358
	set Mechanic_classId = 1
	set UnitObject_classId = 2
	set receiver = null
	set receiver_2 = null
	return true
endfunction

function init_Buildings takes nothing returns boolean
	return true
endfunction

function init_ClosureForGroups takes nothing returns boolean
	local real temp_ClosureForGroups_gpos_x
	local real temp_ClosureForGroups_gpos_y
	call CreateGroup()
	set ClosureForGroups_tempCallbacksCount = 0
	call Filter(ref_function_bridge_ClosureForGroups_closure_impl)
	set temp_ClosureForGroups_gpos_x = Vectors_ZERO2_x
	set temp_ClosureForGroups_gpos_y = Vectors_ZERO2_y
	return true
endfunction

function init_ClosureTimers takes nothing returns boolean
	set ClosureTimers_x = 200
	return true
endfunction

function init_DayCycle takes nothing returns boolean
	set DayCycle_time = 12.
	set DayCycle_timeScale = 2.
	set DayCycle_enabled = false
	return true
endfunction

function init_DiseaseCloud takes nothing returns boolean
	set DiseaseCloud_DAMAGEFREQ = 1.
	set DiseaseCloud_STACKDAMAGE = false
	set DiseaseCloud_SFX = "Abilities\\Spells\\Undead\\PlagueCloud\\PlagueCloudCaster.mdl"
	set DiseaseCloud_DEBUG = false
	set Disease_instanceCount = 0
	set Disease_hasBeenInitialized = false
	set DiseaseCloud_hitTargets_HighestIndex = 0
	return true
endfunction

function init_Doodads takes nothing returns boolean
	return true
endfunction

function init_ErrorHandling takes nothing returns boolean
	set ErrorHandling_MUTE_ERROR_DURATION = 60
	set ErrorHandling_PRIMARY_ERROR_KEY = -1
	set ErrorHandling_HT = InitHashtable()
	set ErrorHandling_suppressErrorMessages = false
	return true
endfunction

function init_ExecutableEffect takes nothing returns boolean
	set ExecutableEffect_DURATION = 5.0
	set ExecutableEffect_instanceCount = -1
	return true
endfunction

function init_FadeAndFilters takes nothing returns boolean
	set FadeAndFilters_FADEOUT = 1
	set FadeAndFilters_FADEIN = 2
	set FadeAndFilters_FADEOUTIN = 3
	return true
endfunction

function init_GameTimer takes nothing returns boolean
	set GameTimer_gameTimer = CreateTimer()
	call timer_start(GameTimer_gameTimer, 100000., null)
	call timer_startPeriodic(CreateTimer(), Basics_ANIMATION_PERIOD, ref_function_GameTimer_closure_impl)
	return true
endfunction

function init_Group takes nothing returns boolean
	set Group_ENUM_GROUP = CreateGroup()
	set Group_unitCounter = 0
	set Group_randomCounter = 0
	set Group_randomSelected = null
	return true
endfunction

function init_HashList takes nothing returns boolean
	set HashList_ht = InitHashtable()
	set HashList_occurences = InitHashtable()
	return true
endfunction

function init_Icons takes nothing returns boolean
	return true
endfunction

function init_InstantDummyCaster takes nothing returns boolean
	local unit receiver
	local unit receiver_2
	local unit receiver_3
	set InstantDummyCaster_DUMMY_CASTER_UNIT_ID = 2016423985
	set receiver = createUnit(Basics_DUMMY_PLAYER, InstantDummyCaster_DUMMY_CASTER_UNIT_ID, MapBounds_boundMax_x, MapBounds_boundMax_y, 0.)
	call unit_setPathing(receiver, false)
	set receiver_2 = receiver
	call unit_addAbility(receiver_2, Basics_HEIGHT_ENABLER)
	set receiver_3 = receiver_2
	call unit_removeAbility(receiver_3, Basics_HEIGHT_ENABLER)
	set InstantDummyCaster_caster = receiver_3
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	return true
endfunction

function init_Integer takes nothing returns boolean
	return true
endfunction

function init_Lightning takes nothing returns boolean
	return true
endfunction

function init_MagicFunctions takes nothing returns boolean
	set MagicFunctions_compiletime = false
	return true
endfunction

function initMapBounds takes nothing returns nothing
	local rect cond_result
	local region receiver
	local rect cond_result_2
	local region receiver_2
	local real temp_MapBounds_playableMin_x
	local real temp_MapBounds_playableMin_y
	local real temp_MapBounds_playableMax_x
	local real temp_MapBounds_playableMax_y
	local real temp_MapBounds_boundMin_x
	local real temp_MapBounds_boundMin_y
	local real temp_MapBounds_boundMax_x
	local real temp_MapBounds_boundMax_y
	if MagicFunctions_compiletime then
		set cond_result = Rect(-1024., -1024., 1024., 1024.)
	else
		set cond_result = GetPlayableMapRect()
	endif
	set MapBounds_playableMapRect = cond_result
	set receiver = CreateRegion()
	call region_addRect(receiver, MapBounds_playableMapRect)
	if MagicFunctions_compiletime then
		set cond_result_2 = Rect(-1536., -1536., 1536., 1536.)
	else
		set cond_result_2 = GetWorldBounds()
	endif
	set MapBounds_boundRect = cond_result_2
	set receiver_2 = CreateRegion()
	call region_addRect(receiver_2, MapBounds_boundRect)
	set MapBounds_boundRegion = receiver_2
	set temp_MapBounds_playableMin_x = rect_getMinX(MapBounds_playableMapRect)
	set temp_MapBounds_playableMin_y = rect_getMinY(MapBounds_playableMapRect)
	set MapBounds_playableMin_x = temp_MapBounds_playableMin_x
	set MapBounds_playableMin_y = temp_MapBounds_playableMin_y
	set temp_MapBounds_playableMax_x = rect_getMaxX(MapBounds_playableMapRect)
	set temp_MapBounds_playableMax_y = rect_getMaxY(MapBounds_playableMapRect)
	set MapBounds_playableMax_x = temp_MapBounds_playableMax_x
	set MapBounds_playableMax_y = temp_MapBounds_playableMax_y
	set temp_MapBounds_boundMin_x = rect_getMinX(MapBounds_boundRect)
	set temp_MapBounds_boundMin_y = rect_getMinY(MapBounds_boundRect)
	set MapBounds_boundMin_x = temp_MapBounds_boundMin_x
	set MapBounds_boundMin_y = temp_MapBounds_boundMin_y
	set temp_MapBounds_boundMax_x = rect_getMaxX(MapBounds_boundRect)
	set temp_MapBounds_boundMax_y = rect_getMaxY(MapBounds_boundRect)
	set MapBounds_boundMax_x = temp_MapBounds_boundMax_x
	set MapBounds_boundMax_y = temp_MapBounds_boundMax_y
	call vec2_op_mult(vec2_op_plus(MapBounds_playableMin_x, MapBounds_playableMin_y, MapBounds_playableMax_x, MapBounds_playableMax_y), vec2_op_plus_return_y, .5)
	call vec2_op_mult(vec2_op_plus(MapBounds_boundMin_x, MapBounds_boundMin_y, MapBounds_boundMax_x, MapBounds_boundMax_y), vec2_op_plus_return_y, .5)
endfunction

function init_MapBounds takes nothing returns boolean
	call initMapBounds()
	return true
endfunction

function init_Maths takes nothing returns boolean
	set Maths_PI = 3.141592654
	set Maths_PI2 = 6.28318
	set Maths_PIHALF = 1.570796326
	return true
endfunction

function init_ObjectIds takes nothing returns boolean
	set ObjectIds_CHARMAP = ".................................!.#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[.]^_`abcdefghijklmnopqrstuvwxyz{|}~................................................................................................................................."
	return true
endfunction

function init_Objects takes nothing returns boolean
	return true
endfunction

function init_Orders takes nothing returns boolean
	set SpecialOrders_smart = 851971
	set Orders_carrionswarm = 852218
	set Orders_fingerofdeath = 852230
	set Orders_frostnova = 852226
	set Orders_move = 851986
	set Orders_slow = 852075
	return true
endfunction

function initPlayerArray takes nothing returns nothing
	local integer i = 0
	local integer temp = bj_MAX_PLAYER_SLOTS - 1
	loop
		exitwhen i > temp
		set Player_players[i] = Player(i)
		set i = i + 1
	endloop
endfunction

function init_Player takes nothing returns boolean
	set Player_localPlayer = GetLocalPlayer()
	call initPlayerArray()
	return true
endfunction

function init_Playercolor takes nothing returns boolean
	call ConvertPlayerColor(24)
	call ConvertPlayerColor(25)
	call ConvertPlayerColor(26)
	call ConvertPlayerColor(27)
	return true
endfunction

function init_Printing takes nothing returns boolean
	set Printing_DEBUG_LEVEL = 2
	set Printing_DEBUG_MSG_DURATION = 45.
	return true
endfunction

function init_Real takes nothing returns boolean
	set Real_REAL_MAX = 340282366920938000000000000000000000000.
	return true
endfunction

function init_Simulate3dSound takes nothing returns boolean
	return true
endfunction

function init_SoundUtils takes nothing returns boolean
	set SoundUtils_DEFAULT_SOUND_FADE_IN_RATE = 10
	set SoundUtils_DEFAULT_SOUND_FADE_OUT_RATE = 10
	set SoundUtils_DEFAULT_SOUND_EAX_SETTINGS = "CombatSoundsEAX"
	set SoundUtils_DEFAULT_SOUND_VOLUME = 127
	set SoundUtils_DEFAULT_SOUND_PITCH = 1.
	set SoundUtils_DEFAULT_SOUND_DURATION = 10000
	set SoundUtils_SOUND_CHANNEL = 5
	set SoundUtils_SOUND_MIN_DIST = 600.
	set SoundUtils_SOUND_MAX_DIST = 8000.
	set SoundUtils_SOUND_DIST_CUT = 1500.
	set DynamicSound_TimedLoop_instanceCount = 0
	set DynamicSound_TimedLoop_triggerCond = null
	call Condition(ref_function_bridge_DynamicSound_TimedLoop_onExpire)
	return true
endfunction

function init_Sounds takes nothing returns boolean
	set Sounds_arcaneVaultWhat1 = "buildings\\Human\\ArcaneVault\\ArcaneVaultWhat1.wav"
	set Sounds_battleRoar1 = "Abilities\\Spells\\NightElf\\BattleRoar\\BattleRoar.wav"
	set Sounds_catapultMissile4 = "Abilities\\Weapons\\Catapult\\CatapultMissile4.wav"
	set Sounds_comradeship = "Sound\\Music\\mp3Music\\Comradeship.mp3"
	set Sounds_frostArrowHit1 = "Abilities\\Spells\\Other\\FrostArrows\\FrostArrowHit1.wav"
	set Sounds_grizzlyBearReady1 = "Units\\Creeps\\GrizzlyBear\\GrizzlyBearReady1.wav"
	set Sounds_koboldWhat2 = "Units\\Creeps\\Kobold\\KoboldWhat2.wav"
	set Sounds_mouseClick1 = "Sound\\Interface\\MouseClick1.wav"
	set Sounds_nightElfX1 = "Sound\\Music\\mp3Music\\NightElfX1.mp3"
	set Sounds_obsidianAvengerWhat2 = "Units\\Undead\\ObsidianStatue\\ObsidianAvengerWhat2.wav"
	set Sounds_orcVictory = "Sound\\Music\\mp3Music\\OrcVictory.mp3"
	set Sounds_questActivateWhat1 = "Sound\\Interface\\QuestActivateWhat1.wav"
	set Sounds_questCompleted = "Sound\\Interface\\QuestCompleted.wav"
	set Sounds_questFailed = "Sound\\Interface\\QuestFailed.wav"
	set Sounds_questNew = "Sound\\Interface\\QuestNew.wav"
	set Sounds_siphonManaLoop = "Abilities\\Spells\\Other\\Drain\\SiphonManaLoop.wav"
	set Sounds_undeadGlueScreenLoop1 = "Sound\\Ambient\\UndeadGlueScreenLoop1.wav"
	set Sounds_wayPointBling = "Sound\\Interface\\WayPointBling.wav"
	set Sounds_woodHeavyBashFlesh1 = "Sound\\Units\\Combat\\WoodHeavyBashFlesh1.wav"
	set Sounds_woodHeavyBashFlesh2 = "Sound\\Units\\Combat\\WoodHeavyBashFlesh2.wav"
	set Sounds_woodHeavyBashFlesh3 = "Sound\\Units\\Combat\\WoodHeavyBashFlesh3.wav"
	return true
endfunction

function init_Soundsets takes nothing returns boolean
	return true
endfunction

function init_Stats takes nothing returns boolean
	local trigger receiver
	local trigger receiver_2
	set Stats_SHOP_ID = 1848651833
	set Stats_START_STATPOINTS = 40
	set Stats_TRAININGID_INT1 = 1227894857
	set Stats_TRAININGID_INT5 = 1227894838
	set Stats_TRAININGID_STR1 = 1227894858
	set Stats_TRAININGID_STR5 = 1227894837
	set Stats_TRAININGID_AGI1 = 1227894839
	set Stats_TRAININGID_AGI5 = 1227894856
	set Stats_TRAININGID_RESET = 1227894865
	set Stats_INT = 1
	set Stats_STR = 2
	set Stats_AGI = 3
	set Stats_startInt = 0
	set Stats_startStr = 0
	set Stats_startAgi = 0
	set Stats_firstTime = true
	call player_setLumber(Player(0), Stats_START_STATPOINTS)
	set receiver = CreateTrigger()
	call trigger_registerAnyUnitEvent(receiver, EVENT_PLAYER_UNIT_SELL_ITEM)
	set receiver_2 = receiver
	call trigger_addCondition(receiver_2, Condition(ref_function_Stats_train))
	set receiver = null
	set receiver_2 = null
	return true
endfunction

function string_length takes string this returns integer
	return StringLength(this)
endfunction

function init_String takes nothing returns boolean
	set String_charset = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	set String_numberset = "0123456789"
	call string_length(String_numberset)
	call string_length(String_charset)
	return true
endfunction

function init_Table takes nothing returns boolean
	set Table_ht = InitHashtable()
	return true
endfunction

function init_TargetsAllowed takes nothing returns boolean
	return true
endfunction

function init_Textures takes nothing returns boolean
	return true
endfunction

function init_UI takes nothing returns boolean
	return true
endfunction

function init_UnitIds takes nothing returns boolean
	return true
endfunction

function onEnter takes code c returns nothing
	call trigger_addCondition(OnUnitEnterLeave_eventTrigger, Filter(c))
endfunction

function onLeave takes code c returns nothing
	call trigger_addAction(OnUnitEnterLeave_eventTrigger, c)
endfunction

function init_UnitIndexer takes nothing returns boolean
	set UnitIndexer_onIndexTrigger = CreateTrigger()
	set UnitIndexer_onDeindexTrigger = CreateTrigger()
	call onEnter(ref_function_bridge_UnitIndexer_closure_impl)
	call onLeave(ref_function_bridge_UnitIndexer_closure_impl_2)
	return true
endfunction

function init_UnitLightning takes nothing returns boolean
	set UnitLightning_UPDATE_FREQ = 0.01
	return true
endfunction

function init_Units takes nothing returns boolean
	return true
endfunction

function init_Vectors takes nothing returns boolean
	local real temp_Vectors_ZERO2_x = 0.
	local real temp_Vectors_ZERO2_y = 0.
	set Vectors_ZERO2_x = temp_Vectors_ZERO2_x
	set Vectors_ZERO2_y = temp_Vectors_ZERO2_y
	set Vectors_tempLoc = Location(0., 0.)
	return true
endfunction

function init_WeatherEffects takes nothing returns boolean
	return true
endfunction

function init_bear_Bleed takes nothing returns boolean
	set Bleed_ENABLED = true
	set Bleed_DMG = 16.
	set Bleed_DMG_FREQ = 2.0
	set Bleed_DURATION = 6.01
	set Bleed_RESETFREQONSTACK = false
	set Bleed_stacks = 0
	set Bleed_EFFECT = "Objects\\Spawnmodels\\Human\\HumanBlood\\HeroBloodElfBlood.mdl"
	return true
endfunction

function init_bear_Enrage takes nothing returns boolean
	set Enrage_damageInc = 0.8
	set Enrage_sizeInc = 0.25
	set Enrage_greenPercReduc = 0.3
	set Enrage_bluePercReduc = 0.3
	set Enrage_count = 0.
	return true
endfunction

function TheBear_gameInit takes nothing returns nothing
	local trigger receiver = CreateTrigger()
	local trigger receiver_2
	local trigger receiver_3
	local trigger receiver_4
	local trigger receiver_5
	call trigger_registerPlayerChatEvent(receiver, Player(0), "-thebear", true)
	set receiver_2 = receiver
	call trigger_addCondition(receiver_2, Condition(ref_function_bridge_TheBear_initEvent))
	set receiver_3 = CreateTrigger()
	call trigger_registerAnyUnitEvent(receiver_3, EVENT_PLAYER_UNIT_DEATH)
	set receiver_4 = receiver_3
	call trigger_addCondition(receiver_4, Condition(ref_function_TheBear_someoneDies))
	set receiver_5 = receiver_4
	call trigger_disable(receiver_5)
	set TheBear_trg_Death = receiver_5
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
endfunction

function init_bear_Main takes nothing returns boolean
	call TheBear_gameInit()
	set TheBear_HP = 14000
	set TheBear_ARMOR = 50.
	set TheBear_MOVESPEED = 250.
	set TheBear_ATTACKSPEED = 2.
	set TheBear_ATTACKDMG = 225
	set TheBear_MAINLOOP_FREQ = 0.25
	set TheBear_BOSSID = 1848651848
	set TheBear_startRed = 150
	set TheBear_startGreen = 150
	set TheBear_startBlue = 150
	set TheBear_startScale = 1.3
	set TheBear_currentAttackSpeed = TheBear_ATTACKSPEED
	set TheBear_damageInc = 0.
	set TheBear_isIdle = false
	set TheBear_canAttack = false
	set TheBear_camBounds = gg_rct_TheBear_CamBounds
	return true
endfunction

function init_nec_Archer takes nothing returns boolean
	set Archer_DAMAGE = 10
	set Archer_ARMOR = 0.
	set Archer_HEALTH = 100
	set Archer_MANA = 100
	set Archer_MOVESPEED = 270.
	set Archer_ATTACKSPEED = 2.
	set Archer_SPAWNFREQ = 5.
	set Archer_ID = 1848651827
	set Archer_spawnRect = gg_rct_TheNec_MobSpawn
	return true
endfunction

function init_nec_Cauldron takes nothing returns boolean
	local real temp_Cauldron_POS_x
	local real temp_Cauldron_POS_y
	set Cauldron_HP = 1000
	set Cauldron_SUMMONTIME = 120.
	set Cauldron_ID = 1966092340
	set temp_Cauldron_POS_x = -13630.
	set temp_Cauldron_POS_y = 13660.
	set Cauldron_POS_x = temp_Cauldron_POS_x
	set Cauldron_POS_y = temp_Cauldron_POS_y
	return true
endfunction

function init_nec_Ghoul takes nothing returns boolean
	set Ghoul_DAMAGE = 10
	set Ghoul_ARMOR = 0.
	set Ghoul_HEALTH = 100
	set Ghoul_MANA = 100
	set Ghoul_MOVESPEED = 270.
	set Ghoul_ATTACKSPEED = 2.
	set Ghoul_SPAWNFREQ = 5.
	set Ghoul_ID = 1966092337
	set Ghoul_spawnRect = gg_rct_TheNec_MobSpawn
	return true
endfunction

function init_nec_Mage takes nothing returns boolean
	set Mage_DAMAGE = 10
	set Mage_ARMOR = 0.
	set Mage_HEALTH = 100
	set Mage_MOVESPEED = 270.
	set Mage_ATTACKSPEED = 2.
	set Mage_SPAWNFREQ = 9.
	set Mage_ID = 1966092338
	set Mage_spawnRect = gg_rct_TheNec_MobSpawn
	return true
endfunction

function TheNecromancer_gameInit takes nothing returns nothing
	local trigger receiver = CreateTrigger()
	local trigger receiver_2
	local trigger receiver_3
	local trigger receiver_4
	local trigger receiver_5
	call trigger_registerPlayerChatEvent(receiver, Player(0), "-thenecromancer", true)
	set receiver_2 = receiver
	call trigger_addCondition(receiver_2, Condition(ref_function_bridge_TheNecromancer_initEvent))
	set receiver_3 = CreateTrigger()
	call trigger_registerAnyUnitEvent(receiver_3, EVENT_PLAYER_UNIT_DEATH)
	set receiver_4 = receiver_3
	call trigger_addCondition(receiver_4, Condition(ref_function_TheNecromancer_someoneDies))
	set receiver_5 = receiver_4
	call trigger_disable(receiver_5)
	set receiver = null
	set receiver_2 = null
	set receiver_3 = null
	set receiver_4 = null
	set receiver_5 = null
endfunction

function init_nec_Main takes nothing returns boolean
	local real temp_TheNecromancer_hunterSpawn_x
	local real temp_TheNecromancer_hunterSpawn_y
	call TheNecromancer_gameInit()
	set temp_TheNecromancer_hunterSpawn_x = -13650.
	set temp_TheNecromancer_hunterSpawn_y = 7600.
	set TheNecromancer_hunterSpawn_x = temp_TheNecromancer_hunterSpawn_x
	set TheNecromancer_hunterSpawn_y = temp_TheNecromancer_hunterSpawn_y
	set TheNecromancer_camBounds = gg_rct_TheNec_CamBounds
	return true
endfunction

function init_nec_Zombie takes nothing returns boolean
	set Zombie_DAMAGE = 10
	set Zombie_ATTACKSPEED = 2.
	set Zombie_HEALTH = 100
	set Zombie_ARMOR = 0.
	set Zombie_MOVESPEED = 270.
	set Zombie_SPAWNFREQ = 9.
	set Zombie_ID = 1848651825
	set Zombie_spawnRect = gg_rct_TheNec_MobSpawn
	return true
endfunction

function createItem takes integer itemId, real pos_x, real pos_y, real pos_z returns item
	return CreateItem(itemId, pos_x, pos_y)
endfunction

function createItem_2 takes integer itemId, real pos_x, real pos_y returns item
	return createItem(itemId, vec2_toVec3(pos_x, pos_y), vec2_toVec3_return_y, vec2_toVec3_return_z)
endfunction

function item_getX takes item this returns real
	return GetItemX(this)
endfunction

function item_getY takes item this returns real
	return GetItemY(this)
endfunction

function item_getPos takes item this returns real
	set item_getPos_return_x = item_getX(this)
	set item_getPos_return_y = item_getY(this)
	return item_getPos_return_x
endfunction

function pickup takes nothing returns boolean
	local item theItem = GetManipulatedItem()
	local integer itemId = GetItemTypeId(theItem)
	if itemId == 1227894866 then
		call createItem_2(itemId, item_getPos(theItem), item_getPos_return_y)
	endif
	set theItem = null
	return false
endfunction

function selectionFilter takes nothing returns boolean
	return true
endfunction

function initGlobals takes nothing returns nothing
	set udg_tempPoint = null
	set udg_tempUnit = null
	set udg_RedHero = null
	set udg_TempInt = 0
	set udg_TempReal = 0.
	set udg_tempUGroup = null
	set udg_tempPoint2 = null
	set udg_tempInt = 0
	set udg_ArcaneEmpower = false
	set udg_BlizzardPoint = null
	set udg_Blizzard_Dummy = null
	set udg_tempBool = false
	set udg_Shock_Timer = null
	set udg_Shock_SFX = null
	set udg_ArcaneBarrage_SFX = null
	set udg_ArcaneBarrage_Target = null
	set udg_ArcaneBarrage_BuffSFX = null
	set udg_IceLance_Hits = null
	set udg_IceLance_DistTrav = 0.
	set udg_IceLance_Direction = 0.
	set udg_tempReal = 0.
	set udg_IceLance_EnemyCheckCounter = 0
	set udg_MagicWard_Running = false
	set gg_rct_MorbentAttackZone = null
	set gg_rct_MF_Exit1 = null
	set gg_rct_MorbentFel = null
	set gg_rct_MF_Camp = null
	set gg_rct_TheNec_CamBounds = null
	set gg_rct_Earthquake_TestRegion = null
	set gg_rct_Region_014 = null
	set gg_rct_Region_016 = null
	set gg_rct_VisionZone_Hunters_Lair = null
	set gg_rct_TM_BossSpawn = null
	set gg_rct_TM_HeroSpawn = null
	set gg_rct_TM_ArcaneBeingSpawn = null
	set gg_rct_TM_VisionRect = null
	set gg_rct_TM_MagicCrystal1 = null
	set gg_rct_TM_MagicCrystal3 = null
	set gg_rct_TM_MagicCrystal2 = null
	set gg_rct_HunterStart = null
	set gg_rct_TM_Fog_Zone = null
	set gg_rct_TheBear_CamBounds = null
	set gg_rct_TheBear_Effect1 = null
	set gg_rct_TheNec_MobSpawn = null
	set gg_snd_Error = null
	set gg_snd_BlizzardLoop1 = null
	set gg_snd_Hint = null
	set gg_snd_QuestCompleted = null
	set gg_snd_KelThuzadDeath1 = null
	set gg_snd_GoodJob = null
	set gg_snd_PursuitTheme = null
	set gg_snd_DarkAgents = null
	set gg_snd_AbominationPissed5 = null
	set gg_snd_O04Mannoroth38 = null
	set gg_snd_SpellStealMissile = null
	set gg_snd_IceLanceFire = null
	set gg_snd_IceLanceHit = null
	set gg_snd_SiphonManaLoop = null
	set gg_snd_ObsidianAvengerWhat2 = null
	set gg_snd_QuestActivateWhat1 = null
	set gg_snd_UndeadGlueScreenLoop1 = null
	set gg_snd_WaterStreamLoop1 = null
	set gg_snd_OrcVictory = null
	set gg_trg_Custom_Init = null
	set gg_trg_Untitled_Trigger_005 = null
	set gg_trg_Untitled_Trigger_006 = null
	set gg_trg_Untitled_Trigger_007 = null
	set gg_trg_Repeat_Music = null
	set gg_trg_Untitled_Trigger_001 = null
	set gg_trg_Mana_Regeneration = null
	set gg_trg_Healing_Potion_Effect = null
	set gg_trg_Buy_SPells = null
	set gg_trg_Remove_Q_Spells = null
	set gg_trg_Remove_E_Spells = null
	set gg_trg_Remove_W_Spells = null
	set gg_trg_Remove_R_Spells = null
	set gg_trg_Untitled_Trigger_003 = null
	set gg_trg_Healing_Stone = null
	set gg_trg_Volcano_Strike = null
	set gg_trg_Blizzard_Start = null
	set gg_trg_Blizzard_Stop = null
	set gg_trg_Blizzard_Slow = null
	set gg_trg_Arcane_Power = null
	set gg_trg_Arcane_Emp_End = null
	set gg_trg_Arcane_Emp_Move_Sfx = null
	set gg_trg_Arcane_Discharge = null
	set gg_trg_Arcane_Depletion = null
	set gg_trg_Burn = null
	set gg_trg_Shock = null
	set gg_trg_Shock_Destory_Effect = null
	set gg_trg_Magic_Ward_Start = null
	set gg_trg_Untitled_Trigger_002 = null
	set gg_trg_Magic_Ward_Update = null
	set gg_trg_Magic_Ward_Pause_Effect = null
	set gg_trg_Magic_Ward_End = null
	set gg_trg_Magic_Ward_Delayed_SFX_Destruction = null
	set gg_trg_Ice_Lance_Start = null
	set gg_trg_Ice_Lance_Move = null
	set gg_trg_Ice_Lance_Damage = null
	set gg_trg_Arcane_Barrage_Start = null
	set gg_trg_Arcane_Barrage_Buff = null
	set gg_trg_Arcane_Barrage_Fall = null
	set gg_trg_Arcane_Barrage_Damage = null
	set gg_trg_Arcane_Barrage_End = null
	set gg_trg_Unstable_Magic_Start = null
	set gg_trg_Unstable_Magic_Stop = null
	set gg_trg_Untitled_Trigger_008 = null
	set gg_trg_Ghoul_Spawn = null
	set gg_trg_Plague_Zombie_Spawn = null
	set gg_trg_Skeletal_Mages = null
	set gg_trg_Skeleton_Spawns = null
	set gg_trg_Lightning_Enhancement_Effect = null
	set gg_trg_Earthquake = null
	set gg_dest_DTc2_2577 = null
	set gg_trg_Untitled_Trigger_009 = null
	set Add_firstFree = 0
	set Add_maxIndex = 0
	set AddSpawner_firstFree = 0
	set AddSpawner_maxIndex = 0
	set RemoteFunction_firstFree = 0
	set RemoteFunction_maxIndex = 0
	set ClickableObject_firstFree = 0
	set ClickableObject_maxIndex = 0
	set ForGroupCallback_firstFree = 0
	set ForGroupCallback_maxIndex = 0
	set CallbackSingle_firstFree = 0
	set CallbackSingle_maxIndex = 0
	set Disease_firstFree = 0
	set Disease_maxIndex = 0
	set DiseaseCloud_firstFree = 0
	set DiseaseCloud_maxIndex = 0
	set ArrayQueue_firstFree = 0
	set ArrayQueue_maxIndex = 0
	set DelayNode_firstFree = 0
	set ExecutableEffect_firstFree = 0
	set ExecutableEffect_maxIndex = 0
	set Fade_firstFree = 0
	set Fade_maxIndex = 0
	set HashList_firstFree = 0
	set HashList_maxIndex = 0
	set Table_firstFree = 0
	set Table_maxIndex = 0
	set InteractableObject_firstFree = 0
	set InteractableObject_maxIndex = 0
	set Comparator_firstFree = 0
	set Comparator_maxIndex = 0
	set LLBackIterator_firstFree = 0
	set LLEntry_firstFree = 0
	set LLEntry_maxIndex = 0
	set LLIterator_firstFree = 0
	set LLIterator_maxIndex = 0
	set LinkedList_firstFree = 0
	set LinkedList_maxIndex = 0
	set IdGenerator_firstFree = 0
	set IdGenerator_maxIndex = 0
	set Sim3DSound_firstFree = 0
	set DynamicSound_firstFree = 0
	set SoundDefinition_firstFree = 0
	set SoundDefinition_maxIndex = 0
	set SoundInstance_firstFree = 0
	set SoundInstance_maxIndex = 0
	set EffectDuration_firstFree = 0
	set EffectDuration_maxIndex = 0
	set UnitIndex_firstFree = 0
	set UnitIndex_maxIndex = 0
	set UnitLightning_firstFree = 0
	set UnitLightning_maxIndex = 0
	set Rock_firstFree = 0
	set Rock_maxIndex = 0
	set ArcaneBeing_firstFree = 0
	set ArcaneBeing_maxIndex = 0
	set FlameStrike_firstFree = 0
	set FlameStrike_maxIndex = 0
	set MagicCrystal_firstFree = 0
	set MagicCrystal_maxIndex = 0
	set ref_function_Trig_Custom_Init_Actions = function Trig_Custom_Init_Actions
	set ref_function_Trig_Untitled_Trigger_005_Actions = function Trig_Untitled_Trigger_005_Actions
	set ref_function_Trig_Untitled_Trigger_006_Actions = function Trig_Untitled_Trigger_006_Actions
	set ref_function_Trig_Untitled_Trigger_007_Actions = function Trig_Untitled_Trigger_007_Actions
	set ref_function_Trig_Repeat_Music_Actions = function Trig_Repeat_Music_Actions
	set ref_function_Trig_Untitled_Trigger_001_Actions = function Trig_Untitled_Trigger_001_Actions
	set ref_function_Trig_Mana_Regeneration_Actions = function Trig_Mana_Regeneration_Actions
	set ref_function_Trig_Healing_Potion_Effect_Conditions = function Trig_Healing_Potion_Effect_Conditions
	set ref_function_Trig_Healing_Potion_Effect_Actions = function Trig_Healing_Potion_Effect_Actions
	set ref_function_Trig_Buy_SPells_Conditions = function Trig_Buy_SPells_Conditions
	set ref_function_Trig_Buy_SPells_Actions = function Trig_Buy_SPells_Actions
	set ref_function_Trig_Remove_Q_Spells_Actions = function Trig_Remove_Q_Spells_Actions
	set ref_function_Trig_Remove_E_Spells_Actions = function Trig_Remove_E_Spells_Actions
	set ref_function_Trig_Remove_W_Spells_Actions = function Trig_Remove_W_Spells_Actions
	set ref_function_Trig_Remove_R_Spells_Actions = function Trig_Remove_R_Spells_Actions
	set ref_function_Trig_Untitled_Trigger_003_Actions = function Trig_Untitled_Trigger_003_Actions
	set ref_function_Trig_Healing_Stone_Conditions = function Trig_Healing_Stone_Conditions
	set ref_function_Trig_Healing_Stone_Actions = function Trig_Healing_Stone_Actions
	set ref_function_Trig_Volcano_Strike_Func003001003 = function Trig_Volcano_Strike_Func003001003
	set ref_function_Trig_Volcano_Strike_Func003A = function Trig_Volcano_Strike_Func003A
	set ref_function_Trig_Volcano_Strike_Conditions = function Trig_Volcano_Strike_Conditions
	set ref_function_Trig_Volcano_Strike_Actions = function Trig_Volcano_Strike_Actions
	set ref_function_Trig_Blizzard_Start_Conditions = function Trig_Blizzard_Start_Conditions
	set ref_function_Trig_Blizzard_Start_Actions = function Trig_Blizzard_Start_Actions
	set ref_function_Trig_Blizzard_Stop_Actions = function Trig_Blizzard_Stop_Actions
	set ref_function_Trig_Blizzard_Slow_Func001Func001002003 = function Trig_Blizzard_Slow_Func001Func001002003
	set ref_function_Trig_Blizzard_Slow_Func001Func004A = function Trig_Blizzard_Slow_Func001Func004A
	set ref_function_Trig_Blizzard_Slow_Actions = function Trig_Blizzard_Slow_Actions
	set ref_function_Trig_Arcane_Power_Conditions = function Trig_Arcane_Power_Conditions
	set ref_function_Trig_Arcane_Power_Actions = function Trig_Arcane_Power_Actions
	set ref_function_Trig_Arcane_Emp_End_Actions = function Trig_Arcane_Emp_End_Actions
	set ref_function_Trig_Arcane_Emp_Move_Sfx_Actions = function Trig_Arcane_Emp_Move_Sfx_Actions
	set ref_function_Trig_Arcane_Discharge_Conditions = function Trig_Arcane_Discharge_Conditions
	set ref_function_Trig_Arcane_Discharge_Actions = function Trig_Arcane_Discharge_Actions
	set ref_function_Trig_Arcane_Depletion_Conditions = function Trig_Arcane_Depletion_Conditions
	set ref_function_Trig_Arcane_Depletion_Actions = function Trig_Arcane_Depletion_Actions
	set ref_function_Trig_Burn_Conditions = function Trig_Burn_Conditions
	set ref_function_Trig_Burn_Actions = function Trig_Burn_Actions
	set ref_function_Trig_Shock_Conditions = function Trig_Shock_Conditions
	set ref_function_Trig_Shock_Actions = function Trig_Shock_Actions
	set ref_function_Trig_Shock_Destory_Effect_Actions = function Trig_Shock_Destory_Effect_Actions
	set ref_function_Trig_Magic_Ward_Start_Conditions = function Trig_Magic_Ward_Start_Conditions
	set ref_function_Trig_Magic_Ward_Start_Actions = function Trig_Magic_Ward_Start_Actions
	set ref_function_Trig_Untitled_Trigger_002_Conditions = function Trig_Untitled_Trigger_002_Conditions
	set ref_function_Trig_Untitled_Trigger_002_Actions = function Trig_Untitled_Trigger_002_Actions
	set ref_function_Trig_Magic_Ward_Update_Actions = function Trig_Magic_Ward_Update_Actions
	set ref_function_Trig_Magic_Ward_Pause_Effect_Conditions = function Trig_Magic_Ward_Pause_Effect_Conditions
	set ref_function_Trig_Magic_Ward_Pause_Effect_Actions = function Trig_Magic_Ward_Pause_Effect_Actions
	set ref_function_Trig_Magic_Ward_End_Actions = function Trig_Magic_Ward_End_Actions
	set ref_function_Trig_Magic_Ward_Delayed_SFX_Destruction_Actions = function Trig_Magic_Ward_Delayed_SFX_Destruction_Actions
	set ref_function_Trig_Ice_Lance_Start_Conditions = function Trig_Ice_Lance_Start_Conditions
	set ref_function_Trig_Ice_Lance_Start_Actions = function Trig_Ice_Lance_Start_Actions
	set ref_function_Trig_Ice_Lance_Move_Actions = function Trig_Ice_Lance_Move_Actions
	set ref_function_Trig_Ice_Lance_Damage_Func002002003 = function Trig_Ice_Lance_Damage_Func002002003
	set ref_function_Trig_Ice_Lance_Damage_Func003A = function Trig_Ice_Lance_Damage_Func003A
	set ref_function_Trig_Ice_Lance_Damage_Actions = function Trig_Ice_Lance_Damage_Actions
	set ref_function_Trig_Arcane_Barrage_Start_Conditions = function Trig_Arcane_Barrage_Start_Conditions
	set ref_function_Trig_Arcane_Barrage_Start_Actions = function Trig_Arcane_Barrage_Start_Actions
	set ref_function_Trig_Arcane_Barrage_Buff_Actions = function Trig_Arcane_Barrage_Buff_Actions
	set ref_function_Trig_Arcane_Barrage_Fall_Actions = function Trig_Arcane_Barrage_Fall_Actions
	set ref_function_Trig_Arcane_Barrage_Damage_Func003002003 = function Trig_Arcane_Barrage_Damage_Func003002003
	set ref_function_Trig_Arcane_Barrage_Damage_Func004A = function Trig_Arcane_Barrage_Damage_Func004A
	set ref_function_Trig_Arcane_Barrage_Damage_Actions = function Trig_Arcane_Barrage_Damage_Actions
	set ref_function_Trig_Arcane_Barrage_End_Actions = function Trig_Arcane_Barrage_End_Actions
	set ref_function_Trig_Unstable_Magic_Start_Conditions = function Trig_Unstable_Magic_Start_Conditions
	set ref_function_Trig_Unstable_Magic_Start_Actions = function Trig_Unstable_Magic_Start_Actions
	set ref_function_Trig_Unstable_Magic_Stop_Actions = function Trig_Unstable_Magic_Stop_Actions
	set ref_function_Trig_Untitled_Trigger_008_Actions = function Trig_Untitled_Trigger_008_Actions
	set ref_function_Trig_Ghoul_Spawn_Actions = function Trig_Ghoul_Spawn_Actions
	set ref_function_Trig_Plague_Zombie_Spawn_Actions = function Trig_Plague_Zombie_Spawn_Actions
	set ref_function_Trig_Skeletal_Mages_Actions = function Trig_Skeletal_Mages_Actions
	set ref_function_Trig_Skeleton_Spawns_Actions = function Trig_Skeleton_Spawns_Actions
	set ref_function_Trig_Lightning_Enhancement_Effect_Func001002002 = function Trig_Lightning_Enhancement_Effect_Func001002002
	set ref_function_Trig_Lightning_Enhancement_Effect_Func002A = function Trig_Lightning_Enhancement_Effect_Func002A
	set ref_function_Trig_Lightning_Enhancement_Effect_Func005002003 = function Trig_Lightning_Enhancement_Effect_Func005002003
	set ref_function_Trig_Lightning_Enhancement_Effect_Func006A = function Trig_Lightning_Enhancement_Effect_Func006A
	set ref_function_Trig_Lightning_Enhancement_Effect_Actions = function Trig_Lightning_Enhancement_Effect_Actions
	set ref_function_Trig_Earthquake_Actions = function Trig_Earthquake_Actions
	set ref_function_Trig_Untitled_Trigger_009_Actions = function Trig_Untitled_Trigger_009_Actions
	set ref_function_init_Abilities = function init_Abilities
	set ref_function_init_AbilityIds = function init_AbilityIds
	set ref_function_init_Real = function init_Real
	set ref_function_init_Integer = function init_Integer
	set ref_function_init_Angle = function init_Angle
	set ref_function_init_String = function init_String
	set ref_function_init_Vectors = function init_Vectors
	set ref_function_init_Player = function init_Player
	set ref_function_init_Basics = function init_Basics
	set ref_function_init_Sounds = function init_Sounds
	set ref_function_init_Table = function init_Table
	set ref_function_init_Printing = function init_Printing
	set ref_function_init_GameTimer = function init_GameTimer
	set ref_function_init_MagicFunctions = function init_MagicFunctions
	set ref_function_init_ErrorHandling = function init_ErrorHandling
	set ref_function_bridge_init_TimerUtils = function bridge_init_TimerUtils
	set ref_function_init_Playercolor = function init_Playercolor
	set ref_function_bridge_init_Colors = function bridge_init_Colors
	set ref_function_init_Group = function init_Group
	set ref_function_init_Lightning = function init_Lightning
	set ref_function_init_Maths = function init_Maths
	set ref_function_bridge_init_TypeCasting = function bridge_init_TypeCasting
	set ref_function_bridge_init_Music = function bridge_init_Music
	set ref_function_init_Stats = function init_Stats
	set ref_function_bridge_init_LinkedList = function bridge_init_LinkedList
	set ref_function_init_Simulate3dSound = function init_Simulate3dSound
	set ref_function_init_SoundUtils = function init_SoundUtils
	set ref_function_init_TargetsAllowed = function init_TargetsAllowed
	set ref_function_init_Buildings = function init_Buildings
	set ref_function_init_Doodads = function init_Doodads
	set ref_function_init_Icons = function init_Icons
	set ref_function_init_Objects = function init_Objects
	set ref_function_init_Soundsets = function init_Soundsets
	set ref_function_init_Textures = function init_Textures
	set ref_function_init_UI = function init_UI
	set ref_function_init_Units = function init_Units
	set ref_function_init_UnitIds = function init_UnitIds
	set ref_function_init_WeatherEffects = function init_WeatherEffects
	set ref_function_init_HashList = function init_HashList
	set ref_function_bridge_init_RegisterEvents = function bridge_init_RegisterEvents
	set ref_function_init_MapBounds = function init_MapBounds
	set ref_function_bridge_init_DummyRecycler = function bridge_init_DummyRecycler
	set ref_function_bridge_init_StringUtils = function bridge_init_StringUtils
	set ref_function_init_ObjectIds = function init_ObjectIds
	set ref_function_init_ClosureTimers = function init_ClosureTimers
	set ref_function_init_ClosureForGroups = function init_ClosureForGroups
	set ref_function_bridge_init_Preloader = function bridge_init_Preloader
	set ref_function_bridge_init_ObjectIdGenerator = function bridge_init_ObjectIdGenerator
	set ref_function_bridge_init_OnUnitEnterLeave = function bridge_init_OnUnitEnterLeave
	set ref_function_init_UnitIndexer = function init_UnitIndexer
	set ref_function_init_DayCycle = function init_DayCycle
	set ref_function_bridge_init_General = function bridge_init_General
	set ref_function_init_BossAdd = function init_BossAdd
	set ref_function_init_FadeAndFilters = function init_FadeAndFilters
	set ref_function_bridge_init_BossEvent = function bridge_init_BossEvent
	set ref_function_init_ExecutableEffect = function init_ExecutableEffect
	set ref_function_init_BossInformation = function init_BossInformation
	set ref_function_init_DiseaseCloud = function init_DiseaseCloud
	set ref_function_init_InstantDummyCaster = function init_InstantDummyCaster
	set ref_function_init_Orders = function init_Orders
	set ref_function_bridge_init_InteractableObjects = function bridge_init_InteractableObjects
	set ref_function_init_UnitLightning = function init_UnitLightning
	set ref_function_bridge_init_ZoneTransition = function bridge_init_ZoneTransition
	set ref_function_init_bear_Main = function init_bear_Main
	set ref_function_init_bear_Bleed = function init_bear_Bleed
	set ref_function_bridge_init_bear_Frenzy = function bridge_init_bear_Frenzy
	set ref_function_bridge_init_bear_Attack = function bridge_init_bear_Attack
	set ref_function_bridge_init_bear_Charge = function bridge_init_bear_Charge
	set ref_function_init_bear_Enrage = function init_bear_Enrage
	set ref_function_bridge_init_bear_Shockwave = function bridge_init_bear_Shockwave
	set ref_function_init_nec_Archer = function init_nec_Archer
	set ref_function_init_nec_Cauldron = function init_nec_Cauldron
	set ref_function_init_nec_Ghoul = function init_nec_Ghoul
	set ref_function_init_nec_Mage = function init_nec_Mage
	set ref_function_init_nec_Zombie = function init_nec_Zombie
	set ref_function_init_nec_Main = function init_nec_Main
	set ref_function_bridge_init_tm_MagicCrystal = function bridge_init_tm_MagicCrystal
	set ref_function_bridge_init_tm_Main = function bridge_init_tm_Main
	set ref_function_bridge_init_tm_ArcaneBeing = function bridge_init_tm_ArcaneBeing
	set ref_function_bridge_init_tm_FlameStrike = function bridge_init_tm_FlameStrike
	set ref_function_bridge_init_tm_IceBlast = function bridge_init_tm_IceBlast
	set ref_function_bridge_AddSpawner_spawnAdd = function bridge_AddSpawner_spawnAdd
	set ref_function_bridge_Add_attack = function bridge_Add_attack
	set ref_function_BossEvent_toShop = function BossEvent_toShop
	set ref_function_BossEvent_inShop = function BossEvent_inShop
	set ref_function_bridge_BossEvent_failed_soundDelay = function bridge_BossEvent_failed_soundDelay
	set ref_function_bridge_BossEvent_startFade = function bridge_BossEvent_startFade
	set ref_function_bridge_BossEvent_startFade_2 = function bridge_BossEvent_startFade_3
	set ref_function_bridge_BossEvent_win_soundDelay = function bridge_BossEvent_win_soundDelay
	set ref_function_bridge_BossEvent_startFade_3 = function bridge_BossEvent_startFade_2
	set ref_function_BossEvent_onFade = function BossEvent_onFade
	set ref_function_bridge_ClickableObject_registerClick = function bridge_ClickableObject_registerClick
	set ref_function_ClickableObject_stopAttack = function ClickableObject_stopAttack
	set ref_function_bridge_ClosureForGroups_closure_impl = function bridge_ClosureForGroups_closure_impl
	set ref_function_bridge_CallbackSingle_closure_impl = function bridge_CallbackSingle_closure_impl
	set ref_function_bridge_removeFromHitTargets = function bridge_removeFromHitTargets
	set ref_function_bridge_DiseaseCloud_closure_impl = function bridge_DiseaseCloud_closure_impl
	set ref_function_bridge_DiseaseCloud_orderDamage = function bridge_DiseaseCloud_orderDamage
	set ref_function_bridge_Disease_unitDies = function bridge_Disease_unitDies
	set ref_function_bridge_Disease_unitIsRemoved = function bridge_Disease_unitIsRemoved
	set ref_function_bridge_Disease_orderDamage = function bridge_Disease_orderDamage
	set ref_function_bridge_DelayNode_recycle = function bridge_DelayNode_recycle
	set ref_function_bridge_ExecutableEffect_stop = function bridge_ExecutableEffect_stop
	set ref_function_bridge_Fade_OnFadeIn = function bridge_Fade_OnFadeIn
	set ref_function_bridge_Fade_fadeIn = function bridge_Fade_fadeIn
	set ref_function_bridge_Fade_endFade = function bridge_Fade_endFade
	set ref_function_bridge_Fade_OnFadeOut = function bridge_Fade_OnFadeOut
	set ref_function_bridge_Fade_fadeOut = function bridge_Fade_fadeOut
	set ref_function_bridge_Fade_fadeIn_2 = function bridge_Fade_fadeIn_2
	set ref_function_GameTimer_closure_impl = function GameTimer_closure_impl
	set ref_function_checkCoordinates = function checkCoordinates
	set ref_function_checkCoordinates2 = function checkCoordinates2
	set ref_function_pickup = function pickup
	set ref_function_getUnitIndex = function getUnitIndex
	set ref_function_bridge_delayedInit = function bridge_delayedInit_2
	set ref_function_selectionFilter = function selectionFilter
	set ref_function_Group_closure_impl = function Group_closure_impl_2
	set ref_function_Group_closure_impl_2 = function Group_closure_impl_3
	set ref_function_Group_closure_impl_3 = function Group_closure_impl
	set ref_function_bridge_isOrdered = function bridge_isOrdered
	set ref_function_InteractableObject_filter = function InteractableObject_filter
	set ref_function_bridge_InteractableObject_checkDistance = function bridge_InteractableObject_checkDistance
	set ref_function_replayMusic = function replayMusic
	set ref_function_OnUnitEnterLeave_closure_impl = function OnUnitEnterLeave_closure_impl_3
	set ref_function_OnUnitEnterLeave_closure_impl_2 = function OnUnitEnterLeave_closure_impl_2
	set ref_function_OnUnitEnterLeave_closure_impl_3 = function OnUnitEnterLeave_closure_impl
	set ref_function_bridge_RegisterEvents_closure_impl = function bridge_RegisterEvents_closure_impl
	set ref_function_bridge_DynamicSound_TimedLoop_onExpire = function bridge_DynamicSound_TimedLoop_onExpire
	set ref_function_bridge_SoundDefinition_playSound = function bridge_SoundDefinition_playSound
	set ref_function_bridge_SoundDefinition_recycle = function bridge_SoundDefinition_recycle
	set ref_function_bridge_SoundDefinition_playSound_2 = function bridge_SoundDefinition_playSound_2
	set ref_function_Stats_train = function Stats_train
	set ref_function_bridge_EffectDuration_destr = function bridge_EffectDuration_destr
	set ref_function_bridge_UnitIndexer_closure_impl = function bridge_UnitIndexer_closure_impl
	set ref_function_bridge_UnitIndexer_closure_impl_2 = function bridge_UnitIndexer_closure_impl_2
	set ref_function_bridge_UnitLightning_update = function bridge_UnitLightning_update
	set ref_function_bridge_UnitLightning_kill = function bridge_UnitLightning_kill
	set ref_function_bridge_delayedInit_2 = function bridge_delayedInit
	set ref_function_bridge_Attack_onHit = function bridge_Attack_onHit
	set ref_function_Attack_setUpdateMove = function Attack_setUpdateMove
	set ref_function_Attack_cooldownFinished = function Attack_cooldownFinished
	set ref_function_Bleed_updateText = function Bleed_updateText
	set ref_function_Bleed_dealDamage = function Bleed_dealDamage
	set ref_function_Bleed_removeStacks = function Bleed_removeStacks
	set ref_function_bridge_Charge_startDelay1 = function bridge_Charge_startDelay1
	set ref_function_Charge_startDelay2 = function Charge_startDelay2
	set ref_function_bridge_Charge_move = function bridge_Charge_move
	set ref_function_Charge_animation = function Charge_animation
	set ref_function_Charge_moveSFX = function Charge_moveSFX
	set ref_function_Charge_stop = function Charge_stop
	set ref_function_Charge_stopShake = function Charge_stopShake
	set ref_function_Charge_setReady = function Charge_setReady
	set ref_function_Frenzy_growth = function Frenzy_growth
	set ref_function_Frenzy_stop = function Frenzy_stop
	set ref_function_Frenzy_setReady = function Frenzy_setReady
	set ref_function_TheBear_idle = function TheBear_idle
	set ref_function_bridge_TheBear_initEvent = function bridge_TheBear_initEvent
	set ref_function_TheBear_someoneDies = function TheBear_someoneDies
	set ref_function_bridge_TheBear_clearEvent = function bridge_TheBear_clearEvent_2
	set ref_function_bridge_TheBear_clearEvent_2 = function bridge_TheBear_clearEvent
	set ref_function_bridge_TheBear_mainLoop = function bridge_TheBear_mainLoop
	set ref_function_bridge_TheBear_onEventInit = function bridge_TheBear_onEventInit
	set ref_function_TheBear_initFight = function TheBear_initFight
	set ref_function_Shockwave_onCast = function Shockwave_onCast
	set ref_function_Shockwave_checkStatus = function Shockwave_checkStatus
	set ref_function_Shockwave_endDelay = function Shockwave_endDelay
	set ref_function_Shockwave_resetDelay = function Shockwave_resetDelay
	set ref_function_Shockwave_move = function Shockwave_move
	set ref_function_Shockwave_finishCooldown = function Shockwave_finishCooldown
	set ref_function_Shockwave_dmgFilter = function Shockwave_dmgFilter
	set ref_function_Cauldron_endCountDown = function Cauldron_endCountDown
	set ref_function_bridge_TheNecromancer_initEvent = function bridge_TheNecromancer_initEvent
	set ref_function_TheNecromancer_someoneDies = function TheNecromancer_someoneDies
	set ref_function_bridge_TheNecromancer_phase1 = function bridge_TheNecromancer_phase1
	set ref_function_bridge_TheNecromancer_onEventInit = function bridge_TheNecromancer_onEventInit
	set ref_function_TheNecromancer_initFight = function TheNecromancer_initFight
	set ref_function_bridge_ArcaneBeing_createBossInfo = function bridge_ArcaneBeing_createBossInfo
	set ref_function_bridge_ArcaneBeing_spawn = function bridge_ArcaneBeing_spawn
	set ref_function_bridge_ArcaneBeing_onDeathDelay = function bridge_ArcaneBeing_onDeathDelay
	set ref_function_bridge_ArcaneBeing_grow = function bridge_ArcaneBeing_grow
	set ref_function_bridge_ArcaneBeing_orderAttack = function bridge_ArcaneBeing_orderAttack
	set ref_function_bridge_FlameStrike_onGameInit = function bridge_FlameStrike_onGameInit
	set ref_function_bridge_FlameStrike_onCast = function bridge_FlameStrike_onCast
	set ref_function_FlameStrike_setReady = function FlameStrike_setReady
	set ref_function_FlameStrike_burnDmg = function FlameStrike_burnDmg
	set ref_function_FlameStrike_burnStackPrevent = function FlameStrike_burnStackPrevent
	set ref_function_bridge_FlameStrike_initialDamage = function bridge_FlameStrike_initialDamage
	set ref_function_bridge_FlameStrike_initialEffect = function bridge_FlameStrike_initialEffect
	set ref_function_bridge_IceBlast_onCast = function bridge_IceBlast_onCast
	set ref_function_bridge_IceBlast_setupBossInfo = function bridge_IceBlast_setupBossInfo
	set ref_function_IceBlast_setReady = function IceBlast_setReady
	set ref_function_bridge_MagicCrystal_dies = function bridge_MagicCrystal_dies
	set ref_function_bridge_MagicCrystal_createBossInfo = function bridge_MagicCrystal_createBossInfo
	set ref_function_MagicCrystal_releaseBossDelay1 = function MagicCrystal_releaseBossDelay1
	set ref_function_MagicCrystal_releaseBossDelay2 = function MagicCrystal_releaseBossDelay2
	set ref_function_MagicCrystal_moveSFX = function MagicCrystal_moveSFX
	set ref_function_bridge_MagicCrystal_finishAbsorb = function bridge_MagicCrystal_finishAbsorb_2
	set ref_function_bridge_MagicCrystal_finishAbsorb_2 = function bridge_MagicCrystal_finishAbsorb
	set ref_function_bridge_MagicCrystal_loopSound = function bridge_MagicCrystal_loopSound
	set ref_function_MagicCrystal_animation = function MagicCrystal_animation
	set ref_function_bridge_MagicCrystal_lightning_Fire = function bridge_MagicCrystal_lightning_Fire
	set ref_function_bridge_MagicCrystal_initiateAbsorbDelay1 = function bridge_MagicCrystal_initiateAbsorbDelay1
	set ref_function_bridge_MagicCrystal_checkDistance = function bridge_MagicCrystal_checkDistance
	set ref_function_bridge_initEvent = function bridge_initEvent
	set ref_function_bridge_someoneDies = function bridge_someoneDies
	set ref_function_bridge_leaveEvent = function bridge_leaveEvent
	set ref_function_bridge_delayedInit_3 = function bridge_delayedInit_3
	set ref_function_idle = function idle
	set ref_function_bridge_onEventInit = function bridge_onEventInit
	set ref_function_initFight = function initFight
	set ref_function_ambient = function ambient
	set ref_function_bridge_clear = function bridge_clear
	set ref_function_bridge_clear_2 = function bridge_clear_2
	set ref_function_bridge_mainLoop = function bridge_mainLoop
endfunction

function main takes nothing returns nothing
	local trigger initTrig
	call initGlobals()
	call SetCameraBounds(( - 15616.0) + GetCameraMargin(CAMERA_MARGIN_LEFT), ( - 15872.0) + GetCameraMargin(CAMERA_MARGIN_BOTTOM), 15616.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), 15360.0 - GetCameraMargin(CAMERA_MARGIN_TOP), ( - 15616.0) + GetCameraMargin(CAMERA_MARGIN_LEFT), 15360.0 - GetCameraMargin(CAMERA_MARGIN_TOP), 15616.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), ( - 15872.0) + GetCameraMargin(CAMERA_MARGIN_BOTTOM))
	call SetDayNightModels("Environment\\DNC\\DNCLordaeron\\DNCLordaeronTerrain\\DNCLordaeronTerrain.mdl", "Environment\\DNC\\DNCLordaeron\\DNCLordaeronUnit\\DNCLordaeronUnit.mdl")
	call NewSoundEnvironment("Default")
	call SetAmbientDaySound("CityScapeDay")
	call SetAmbientNightSound("CityScapeNight")
	call SetMapMusic("Music", true, 0)
	call InitSounds()
	call CreateRegions()
	call CreateAllDestructables()
	call CreateAllItems()
	call CreateAllUnits()
	call InitBlizzard()
	call InitGlobals()
	call InitCustomTriggers()
	call RunInitializationTriggers()
	set initTrig = CreateTrigger()
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Abilities))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Abilities.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_AbilityIds))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package AbilityIds.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Real))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Real.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Integer))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Integer.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Angle))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Angle.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_String))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package String.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Vectors))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Vectors.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Player))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Player.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Basics))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Basics.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Sounds))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Sounds.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Table))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Table.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Printing))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Printing.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_GameTimer))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package GameTimer.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_MagicFunctions))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package MagicFunctions.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_ErrorHandling))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package ErrorHandling.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_TimerUtils))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package TimerUtils.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Playercolor))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Playercolor.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_Colors))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Colors.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Group))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Group.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Lightning))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Lightning.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Maths))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Maths.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_TypeCasting))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package TypeCasting.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_Music))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Music.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Stats))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Stats.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_LinkedList))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package LinkedList.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Simulate3dSound))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Simulate3dSound.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_SoundUtils))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package SoundUtils.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_TargetsAllowed))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package TargetsAllowed.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Buildings))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Buildings.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Doodads))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Doodads.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Icons))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Icons.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Objects))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Objects.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Soundsets))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Soundsets.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Textures))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Textures.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_UI))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package UI.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Units))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Units.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_UnitIds))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package UnitIds.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_WeatherEffects))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package WeatherEffects.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_HashList))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package HashList.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_RegisterEvents))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package RegisterEvents.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_MapBounds))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package MapBounds.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_DummyRecycler))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package DummyRecycler.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_StringUtils))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package StringUtils.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_ObjectIds))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package ObjectIds.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_ClosureTimers))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package ClosureTimers.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_ClosureForGroups))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package ClosureForGroups.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_Preloader))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Preloader.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_ObjectIdGenerator))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package ObjectIdGenerator.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_OnUnitEnterLeave))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package OnUnitEnterLeave.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_UnitIndexer))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package UnitIndexer.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_DayCycle))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package DayCycle.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_General))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package General.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_BossAdd))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package BossAdd.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_FadeAndFilters))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package FadeAndFilters.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_BossEvent))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package BossEvent.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_ExecutableEffect))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package ExecutableEffect.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_BossInformation))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package BossInformation.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_DiseaseCloud))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package DiseaseCloud.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_InstantDummyCaster))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package InstantDummyCaster.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_Orders))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package Orders.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_InteractableObjects))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package InteractableObjects.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_UnitLightning))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package UnitLightning.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_ZoneTransition))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package ZoneTransition.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_bear_Main))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package bear_Main.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_bear_Bleed))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package bear_Bleed.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_bear_Frenzy))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package bear_Frenzy.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_bear_Attack))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package bear_Attack.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_bear_Charge))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package bear_Charge.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_bear_Enrage))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package bear_Enrage.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_bear_Shockwave))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package bear_Shockwave.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_nec_Archer))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package nec_Archer.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_nec_Cauldron))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package nec_Cauldron.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_nec_Ghoul))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package nec_Ghoul.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_nec_Mage))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package nec_Mage.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_nec_Zombie))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package nec_Zombie.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_init_nec_Main))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package nec_Main.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_tm_MagicCrystal))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package tm_MagicCrystal.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_tm_Main))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package tm_Main.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_tm_ArcaneBeing))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package tm_ArcaneBeing.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_tm_FlameStrike))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package tm_FlameStrike.")
	endif
	call TriggerClearConditions(initTrig)
	call TriggerAddCondition(initTrig, Condition(ref_function_bridge_init_tm_IceBlast))
	if  not TriggerEvaluate(initTrig) then
		call DisplayTimedTextToPlayer(GetLocalPlayer(), 0., 0., 45., "Could not initialize package tm_IceBlast.")
	endif
	call TriggerClearConditions(initTrig)
	call DestroyTrigger(initTrig)
	set initTrig = null
endfunction

function InitCustomPlayerSlots takes nothing returns nothing
	call SetPlayerStartLocation(Player(0), 0)
	call SetPlayerColor(Player(0), ConvertPlayerColor(0))
	call SetPlayerRacePreference(Player(0), RACE_PREF_HUMAN)
	call SetPlayerRaceSelectable(Player(0), false)
	call SetPlayerController(Player(0), MAP_CONTROL_USER)
endfunction

function InitCustomTeams takes nothing returns nothing
	call SetPlayerTeam(Player(0), 0)
endfunction

function config takes nothing returns nothing
	call SetMapName("TRIGSTR_006")
	call SetMapDescription("TRIGSTR_008")
	call SetPlayers(1)
	call SetTeams(1)
	call SetGamePlacement(MAP_PLACEMENT_USE_MAP_SETTINGS)
	call DefineStartLocation(0,  - 7872.0,  - 128.0)
	call InitCustomPlayerSlots()
	call InitCustomTeams()
endfunction

