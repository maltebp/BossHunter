package Buffer
import Table
import ErrorHandling
import LinkedList

/**
	Enables or disables various runtime safety checks in the Buffer classes.
	Do not disable this unless you are 100% sure your code works correctly.
**/
@configurable constant SAFETY_CHECKS_ENABLED = true

/**
	Interface to be implemented by classes that wish to be directly
	written to classes implementing Buffer.
*/
public interface BufferSerializable
	function serialize(Buffer buffer)
	function deserialize(Buffer buffer)

/**
	Since buffers are mainly used for Network/File I/O operations,
	it is necessary to sometimes lock them in specific states.
**/
public enum BufferMode
	READ // only read operations permitted
	WRITE // only write operations permitted
	READ_WRITE // all operations permitted
	LOCKED // no operations permitted

public function BufferMode.toString() returns string
	var value = ""
	switch this
		case READ
			value = "READ"
		case WRITE
			value = "WRITE"
		case READ_WRITE
			value = "READ_WRITE"
		case LOCKED
			value = "LOCKED"
	return value

/**
	Specifies the various failure types that can occur inside Buffer implementations.
	INTERNAL_ERROR will always result in an error() call and halt the thread.
	EOF, MALFORMED_INPUT and INCORRECT_TYPE will set a flag and (optionally) print warnings.
**/
public enum BufferFailureMode
	// no failure has occured, buffer can continue to be used
	NONE
	// reached end-of-file, no further data is available to be consumed
	EOF
	// some internal error has occured
	INTERNAL_ERROR
	// the input is malformed and cannot be processed properly
	MALFORMED_INPUT
	// tried to read incorrect data type at current position
	INCORRECT_TYPE

/**
	Generic buffer interface with operations to read/write
	integers, booleans, reals and strings in sequential order.
**/
public interface Buffer
	/** Reads an int from the buffer **/
	function readInt() returns int
	/** Reads a boolean from the buffer **/
	function readBoolean() returns boolean
	/** Reads a real from the buffer **/
	function readReal() returns real
	/** Reads a string from the buffer **/
	function readString() returns string

	/** Writes an int to the buffer **/
	function writeInt(int value)
	/** Writes a boolean to the buffer **/
	function writeBoolean(boolean value)
	/** Writes a real to the buffer **/
	function writeReal(real value)
	/** Writes a string to the buffer **/
	function writeString(string value)

	/** Writes an object implementing BufferSerializable to the buffer. **/
	function write(BufferSerializable value)
	/**
		Reads an object implementing BufferSerializable from the buffer.
		It mutates the object passed to the method instead of
		returning a new instance.
	**/
	function read(BufferSerializable value)

	/** Clears the buffer of any data **/
	function clear()

	/** Returns the current buffer mode. **/
	function getMode() returns BufferMode

	/** Sets the current buffer mode. **/
	function setMode(BufferMode mode)

	/** Tests whether the buffer is writeable. **/
	function isWriteable() returns boolean

	/** Returns whether the buffer is readable. **/
	function isReadable() returns boolean

	/** Returns whether the buffer is in a valid state, and no errors occured **/
	function isValid() returns boolean

	/** Returns the set failure mode, if any **/
	function getFailure() returns BufferFailureMode

	/** Returns the last error message, if any **/
	function getErrorMessage() returns string

/**
	Abstract class implementing read/write protection for buffers, as well
	as a generic "failed" state.
**/
public abstract class AbstractBuffer implements Buffer
	private var mode = BufferMode.READ_WRITE
	private var failureMode = BufferFailureMode.NONE
	private var failureMessage = ""

	protected function checkFailed()
		if SAFETY_CHECKS_ENABLED and not isValid()
			error("Buffer: trying to use a failed buffer")

	protected function fail(BufferFailureMode mode, string message)
		failureMode = mode
		failureMessage = message
		if mode == BufferFailureMode.INTERNAL_ERROR
			error("Buffer: " + message)
		else
			Log.warn("Buffer: " + message)

	override function setMode(BufferMode newMode)
		mode = newMode

	override function getMode() returns BufferMode
		return mode

	override function isWriteable() returns boolean
		return mode == BufferMode.WRITE or mode == BufferMode.READ_WRITE

	override function isReadable() returns boolean
		return mode == BufferMode.READ or mode == BufferMode.READ_WRITE

	override function isValid() returns boolean
		return failureMode == BufferFailureMode.NONE

	override function getFailure() returns BufferFailureMode
		return failureMode

	override function getErrorMessage() returns string
		return failureMessage

	/**
		Extending classes should call this in write methods.
		This function will be eliminated with optimizations turned on and when SAFETY_CHECKS_ENABLED == false.
	**/
	protected function checkWrite()
		checkFailed()
		if SAFETY_CHECKS_ENABLED and not isWriteable()
			error("Buffer: cannot write to buffer with mode " + mode.toString())

	/**
		Extending classes should call this in read methods.
		This function will be eliminated with optimizations turned on and when SAFETY_CHECKS_ENABLED == false.
	**/
	protected function checkRead()
		checkFailed()
		if SAFETY_CHECKS_ENABLED and not isReadable()
			error("Buffer: cannot read from buffer with mode " + mode.toString())

	override function write(BufferSerializable object)
		checkWrite()
		object.serialize(this)

	override function read(BufferSerializable object)
		checkRead()
		object.deserialize(this)

/**
	Implementation of Buffer backed by a hashtable. Primarily used in Network.
**/
public class HashBuffer extends AbstractBuffer
	private var buffer = new Table()

	/*
		Store read/write indices for each
		independent type buffer.
	*/
	private var integerWriteIndex = -1
	private var realWriteIndex    = -1
	private var booleanWriteIndex = -1
	private var stringWriteIndex  = -1

	private var integerReadIndex = -1
	private var realReadIndex    = -1
	private var booleanReadIndex = -1
	private var stringReadIndex  = -1

	ondestroy
		destroy buffer

	override function writeInt(int value)
		checkWrite()
		integerWriteIndex++
		buffer.saveInt(integerWriteIndex, value)

	override function writeReal(real value)
		checkWrite()
		realWriteIndex++
		buffer.saveReal(realWriteIndex, value)

	override function writeString(string value)
		checkWrite()
		stringWriteIndex++
		buffer.saveString(stringWriteIndex, value)

	override function writeBoolean(bool value)
		checkWrite()
		booleanWriteIndex++
		buffer.saveBoolean(booleanWriteIndex, value)

	/* These functions have mandatory safety checks, because they are necessary to
		detect errors in deserialization code when reading from files. */

	override function readInt() returns int
		checkRead()
		integerReadIndex++
		if not buffer.hasInt(integerReadIndex)
			error("HashBuffer: trying to read non-present int at pos#" + integerReadIndex.toString())
		return buffer.loadInt(integerReadIndex)

	override function readReal() returns real
		checkRead()
		realReadIndex++
		if not buffer.hasReal(realReadIndex)
			error("HashBuffer: trying to read non-present real at pos#" + realReadIndex.toString())
		return buffer.loadReal(realReadIndex)

	override function readString() returns string
		checkRead()
		stringReadIndex++
		if not buffer.hasString(stringReadIndex)
			error("HashBuffer: trying to read non-present string at pos#" + stringReadIndex.toString())
		return buffer.loadString(stringReadIndex)

	override function readBoolean() returns bool
		checkRead()
		booleanReadIndex++
		if not buffer.hasBoolean(booleanReadIndex)
			error("HashBuffer: trying to read non-present boolean at pos#" + booleanReadIndex.toString())
		return buffer.loadBoolean(booleanReadIndex)

	/* 'Unsafe' variants that will have safety checks disabled when the config demands it.
		These should be used when sending across network because we know we'll never hit
		a non-existent value.
		
		You shoudln't use these in your code unless you absolutely know what you are doing.
	*/

	function readIntUnsafe() returns int
		checkRead()
		integerReadIndex++
		if SAFETY_CHECKS_ENABLED and not buffer.hasInt(integerReadIndex)
			error("HashBuffer: trying to read non-present int at pos#" + integerReadIndex.toString())
		return buffer.loadInt(integerReadIndex)

	function readRealUnsafe() returns real
		checkRead()
		realReadIndex++
		if SAFETY_CHECKS_ENABLED and not buffer.hasReal(realReadIndex)
			error("HashBuffer: trying to read non-present real at pos#" + realReadIndex.toString())
		return buffer.loadReal(realReadIndex)

	function readStringUnsafe() returns string
		checkRead()
		stringReadIndex++
		if SAFETY_CHECKS_ENABLED and not buffer.hasString(stringReadIndex)
			error("HashBuffer: trying to read non-present string at pos#" + stringReadIndex.toString())
		return buffer.loadString(stringReadIndex)

	function readBooleanUnsafe() returns bool
		checkRead()
		booleanReadIndex++
		if SAFETY_CHECKS_ENABLED and not buffer.hasBoolean(booleanReadIndex)
			error("HashBuffer: trying to read non-present boolean at pos#" + booleanReadIndex.toString())
		return buffer.loadBoolean(booleanReadIndex)


	override function clear()
		buffer.flush()

	function resetRead()
		integerReadIndex = -1
		realReadIndex = -1
		booleanReadIndex = -1
		stringReadIndex = -1

	function getIntCount() returns int
		return integerWriteIndex + 1

	function getRealCount() returns int
		return realWriteIndex + 1

	function getBooleanCount() returns int
		return booleanWriteIndex + 1

	function getStringCount() returns int
		return stringWriteIndex + 1

	function hasInt() returns boolean
		return integerReadIndex < integerWriteIndex

	function hasReal() returns boolean
		return realReadIndex < realWriteIndex

	function hasBoolean() returns boolean
		return booleanReadIndex < booleanWriteIndex
	
	function hasString() returns boolean
		return stringReadIndex < stringWriteIndex

enum ValueType
	INTEGER
	REAL
	STRING
	BOOLEAN
	INVALID

function ValueType.toString() returns string
	var id = ""
	switch this
		case INTEGER
			id = "i"
		case REAL
			id = "r"
		case BOOLEAN
			id = "b"
		case STRING
			id = "s"
		case INVALID
			error("ValueType: INVALID should never be serializable")
	return id

function valueTypeFromString(string value) returns ValueType
	var valueType = ValueType.INVALID
	switch value
		case "i"
			valueType = ValueType.INTEGER
		case "r"
			valueType = ValueType.REAL
		case "b"
			valueType = ValueType.BOOLEAN
		case "s"
			valueType = ValueType.STRING
	return valueType

class ChunkElement
	var content = ""

	construct(string value)
		content = value
/**
	Implementation of Buffer backed by a list of strings. Everything
	is serialized/deserialized into strings.

	Since we may be dealing with user input in this class, it is
	important to keep in mind that it might be malformed or invalid.

	For this reason, the class doesn't instantly error out on attempts
	to read incorrect data, and the users of the class should call
	StringBuffer.isValid() during/after reading data to make sure that
	it is correct.

	Trying to read from a buffer that has entered an erroneous state
	will not terminate the thread, but will instead return default values:
		ints - 0
		booleans - false
		reals - 0.0
		strings - null

	This allows you to check for the error right after reading.

	You can use StringBuffer.getFailure() and StringBuffer.getErrorMessage()
	to inspect the error further, if there is any.

	The serialized values keep track of their type, and do not fixed-length
	encoding anywhere, instead relying on a special 'terminator' character
	to determine the end of a value.

	Strings are encoded with a length-field prepending them.

	Examples of serialized values:
		1. "i50392|" - int 50392
		2. "r3.1415|" - real 3.1415
		3. "b1" - boolean true
		4. "s10|0123456789" - string 0123456789
		5. "s5|01234i10|b1b0r1.0005|" - string 012345, int 10, bool true, bool false, real 1.0005
**/
public class StringBuffer extends AbstractBuffer
	private static constant TERMINATOR = "|"
	private static constant MAX_BACKBUFFER_SIZE = 512
	private static constant MAX_BUFFER_SIZE = 1024

	// list of "chunks" that can grow/shrink as required
	private var chunks = new LinkedList<ChunkElement>()
	private var readBuffer = ""
	private var writeBuffer = ""

	// this is the maximum size of each chunk element
	// we should keep this below 512 so that currentBuffer can reliably
	// fit at least two buffers of that size, while staying under 1024 characters
	private int maxBufferSize

	construct(int maxSize)
		if maxSize > MAX_BACKBUFFER_SIZE
			Log.warn("Trying to instantiate an instance of StringBuffer with maxSize=" + maxSize.toString() +
			", but MAX_BACKBUFFER_SIZE is " + MAX_BACKBUFFER_SIZE.toString())
			Log.warn("The value will be clamped to " + MAX_BACKBUFFER_SIZE.toString())

		maxBufferSize = min(maxSize, MAX_BACKBUFFER_SIZE)

	ondestroy
		for chunk in chunks
			destroy chunk
		destroy chunks

	/*
		Write auxiliary methods.
	*/

	/**
		Call this function once after you've finished writing to commit any pending data.
	**/
	function flush()
		if writeBuffer.length() > 0
			flushBuffer()

	// flushes the current buffer to the chunks
	private function flushBuffer()
		chunks.push(new ChunkElement(writeBuffer))
		writeBuffer = ""

	// pushes a string to the current buffer, flushing if we exceed maxBufferSize
	private function pushString(string data)
		var remaining = data
		if data.length() > MAX_BUFFER_SIZE
			error("StringBuffer: trying to push a string above MAX_BUFFER_SIZE")

		var overflow = data.length() + writeBuffer.length() - maxBufferSize
		while overflow > 0
			// we do not want the buffer to exceed maxBufferSize for each flush
			let toAppend = min(remaining.length(), maxBufferSize - writeBuffer.length())
			writeBuffer += remaining.substring(0, toAppend)
			remaining = remaining.substring(toAppend)
			overflow -= maxBufferSize
			flushBuffer()

		writeBuffer += remaining

	private function pushTerminator()
		pushString(TERMINATOR)

	private function pushTypeIdentifier(ValueType valueType)
		pushString(valueType.toString())

	/*
		Read auxiliary methods.
	*/

	private function isDataAvailable() returns boolean
		return chunks.size() > 0 or readBuffer.length() > 0

	private function checkDataAvailable()
		if not isDataAvailable()
			fail(BufferFailureMode.EOF, "reached EOF")

	private function getNextChunkSize() returns int
		return chunks.getFirst().content.length()

	// loads the next chunk into the buffer
	private function nextChunk()
		if chunks.isEmpty()
			fail(BufferFailureMode.EOF, "reached EOF")
			return

		let chunk = chunks.dequeue()
		readBuffer += chunk.content
		destroy chunk

	// returns all data remaining in the buffer and loads the next chunk
	private function popAll() returns string
		checkDataAvailable()
		let value = readBuffer
		readBuffer = ""
		nextChunk()
		return value

	// attempts to load a string up to the next terminator character
	private function popUntilTerminator() returns string
		var value = ""
		var terminatorIndex = -1
		while terminatorIndex < 0
			// if we start exceeding the buffer limit in the return value, that
			// probably means something is wrong and that the input data is malformed
			if value.length() > MAX_BUFFER_SIZE
				fail(BufferFailureMode.MALFORMED_INPUT, "failed to find terminator character")
				return null

			terminatorIndex = readBuffer.indexOf(TERMINATOR)

			if terminatorIndex < 0
				// if we haven't found the terminator character in the buffer,
				// we can be sure that we'll need to return the contents of the
				// current buffer, and then search in the next chunk
				value += popAll()
			else
				// add the contents up to the terminator character, and then pop
				// it from the buffer
				value += readBuffer.substring(0, terminatorIndex)
				// skip the terminator
				readBuffer = readBuffer.substring(terminatorIndex + 1)
		return value

	// returns length amount of characters from the buffer, if there is enough
	private function popString(int length) returns string
		if SAFETY_CHECKS_ENABLED and length > MAX_BUFFER_SIZE
			fail(BufferFailureMode.INTERNAL_ERROR, "trying to pop a string above max size")

		// length 0 is a special case for a string, so just return it immediately
		if length == 0
			return ""

		checkDataAvailable()
		// if there isn't enough data in the readBuffer, load additional chunks
		while isValid() and readBuffer.length() < length
			nextChunk()

		if isValid()
			// if we haven't errored out at this point, it's safe to pop the string
			let value = readBuffer.substring(0, length)
			readBuffer = readBuffer.substring(length)

			return value
		else
			return null

	// attempts to read the current position as a value type
	private function popTypeIdentifier() returns ValueType
		let valueType = valueTypeFromString(popString(1))
		if valueType == ValueType.INVALID
			fail(BufferFailureMode.MALFORMED_INPUT, "malformed input")
		return valueType

	// checks that we are reading the correct type
	private function checkType(ValueType toCheck) returns boolean
		let currentType = popTypeIdentifier()
		// might have malformed input after popping type identifier, so check that first
		if not isValid()
			return false
		if currentType != toCheck
			fail(BufferFailureMode.INCORRECT_TYPE, "tried to read " + toCheck.toString() + " but was " + currentType.toString())
			return false
		return true

	/*
		Interface implementation
	*/

	override function writeInt(int value)
		checkWrite()
		pushTypeIdentifier(ValueType.INTEGER)
		pushString(value.toString())
		pushTerminator()

	override function writeReal(real value)
		checkWrite()
		pushTypeIdentifier(ValueType.REAL)
		pushString(value.toString())
		pushTerminator()

	override function writeString(string value)
		if value.length() > MAX_BUFFER_SIZE
			error("StringBuffer: trying to write string above MAX_BUFFER_SIZE")
		checkWrite()
		pushTypeIdentifier(ValueType.STRING)
		pushString(value.length().toString())
		pushTerminator()
		pushString(value)

	override function writeBoolean(bool value)
		checkWrite()
		pushTypeIdentifier(ValueType.BOOLEAN)
		pushString(value.toInt().toString())

	private function readIntInternal() returns int
		return popUntilTerminator().toInt()

	override function readInt() returns int
		checkRead()
		return checkType(ValueType.INTEGER) ? readIntInternal() : 0

	override function readReal() returns real
		checkRead()
		return checkType(ValueType.REAL) ? popUntilTerminator().toReal() : 0

	override function readString() returns string
		checkRead()
		string value = null
		if checkType(ValueType.STRING)
			let length = readIntInternal()
			if length < 0 or length > MAX_BUFFER_SIZE
				fail(BufferFailureMode.MALFORMED_INPUT, "tried to read string of length " + length.toString() +
					", but max is " + MAX_BUFFER_SIZE.toString())
			else
				value = popString(length)
		return value

	override function readBoolean() returns bool
		checkRead()
		return checkType(ValueType.BOOLEAN) ? (popString(1) == "1") : false

	override function clear()
		for chunk in chunks
			destroy chunk
		chunks.clear()
		readBuffer = ""
		writeBuffer = ""

	/** Looks at the type of the next value, if any. **/
	function peekType() returns ValueType
		let valueType = popTypeIdentifier()
		// put the identifier back into the buffer
		readBuffer = valueType.toString() + readBuffer
		return valueType

	function canRead() returns boolean
		return isDataAvailable()

	/*
		Methods to directly manipulate the underlying chunk storage
	*/
	function writeChunk(string value)
		chunks.push(new ChunkElement(value))

	function hasChunk() returns boolean
		return chunks.size() > 0

	function readChunk() returns string
		if not hasChunk()
			error("StringBuffer: trying to pop non-existent chunk")
		let chunk = chunks.dequeue()
		let value = chunk.content
		destroy chunk
		return value
