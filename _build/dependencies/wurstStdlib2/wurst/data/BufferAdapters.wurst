package BufferAdapters

import Buffer
import Execute
import MultifileIO

function StringBuffer.transferValueTo(HashBuffer sink)
	let valueType = this.peekType()

	switch valueType
		case INTEGER
			sink.writeInt(this.readInt())
		case REAL
			sink.writeReal(this.readReal())
		case STRING
			sink.writeString(this.readString())
		case BOOLEAN
			sink.writeBoolean(this.readBoolean())
		default

public function StringBuffer.transfer(HashBuffer sink)
	while this.canRead()
		execute() ->
			var counter = 0
			while this.canRead() and counter < 64
				this.transferValueTo(sink)
				counter++


public function StringBuffer.populateFromFile(FileReader reader)
	while reader.canRead()
		execute() ->
			var counter = 0
			while reader.canRead()and counter < 64
				this.writeChunk(reader.readLine())
				counter++


public function FileWriter.populateFromBuffer(StringBuffer buffer)
	while buffer.hasChunk()
		execute() ->
			var counter = 0
			while buffer.hasChunk() and counter < 64
				this.writeLine(buffer.readChunk())
				counter++	
