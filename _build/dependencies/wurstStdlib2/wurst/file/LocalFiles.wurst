package LocalFiles

import PreloadIO
import ClosureTimers
import Network
import ErrorHandling
import LinkedList

interface LocalFilesCallback
	function run()

/**
	Utility class used to check if the LocalFiles registry property of the
	player is enabled.

	In other words, this checks if the user can reliably write/read files.
	This also includes a fallback mechanism for the 1.26 patch and before,
	which uses the Logs\ folder to write files in.
**/
public class LocalFiles
	private static constant testDestination = "localtest.txt"
	private static constant fallbackDestination = "Logs\\localtest.txt"
	private static constant testString = "test"
	private static var callbacks = new LinkedList<LocalFilesCallback>

	static var checkedAll = false
	private static var checked = false
	private static var enabled = false
	private static var fallback = false
	private static boolean array enabledPlayers

	static function registerLocalFilesChecked(LocalFilesCallback cb)
		callbacks.add(cb)

	/** 
		Checks whether Local Files are enabled for this local player. 
		You should not call this function too early in your init,
		because the check might not have completed yet.
	**/
	static function isEnabled() returns boolean
		if not checked
			error("Trying to check Local Files too early. You should delay your init.")
		return enabled

	static function isEnabled(player who) returns boolean
		if not checkedAll
			error("Trying to check Local Files too early. You should delay your init.")
		return enabledPlayers[who.getId()]

	/** Checks whether 1.26 patch fallback is enabled. **/
	static function isFallback() returns boolean
		return fallback
		
	/** 
		Performs the actual checking for this local player.
		This function is only meant to be called once.
	**/
	private static function check()
		checked = true

		// try regular writing/reading first
		IOWriter.prepareWrite()
		IOWriter.writePacket(testString)
		IOWriter.flushFile(testDestination)
		IOReader.load(testDestination)
		if IOReader.getPacket(0) == testString
			enabled = true
			return
	
		// now try 1.26 fallback
		IOWriter.prepareWrite()
		IOWriter.writePacket(testString)
		IOWriter.flushFile(fallbackDestination)
		IOReader.load(fallbackDestination)
		if IOReader.getPacket(0) == testString
			enabled = true
			fallback = true
			return
		
	/**
		Performs the checking for all players,
		and sends the results to others.
	**/
	protected static function checkAll()
		let synchronizer = new SimpleSynchronizer()
		check()

		for i = 0 to bj_MAX_PLAYER_SLOTS - 1
			enabledPlayers[i] = false
			let network = new Network(players[i])
			if localPlayer == players[i]
				network.getData().writeBoolean(LocalFiles.isEnabled())
			network.start() (NetworkResult status, Buffer data) ->
				if status == NetworkResult.SUCCESS
					enabledPlayers[i] = data.readBoolean()
				else
					enabledPlayers[i] = false

				if players[i] == localPlayer
					synchronizer.sync()

		synchronizer.onSynced() ->
			checkedAll = true

			for cb in callbacks
				cb.run()

init
	nullTimer(() -> LocalFiles.checkAll())
	