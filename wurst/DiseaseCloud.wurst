package DiseaseCloud

import HashMap
import TimerUtils
import LinkedList


// ===============================================================================================

// Ability Constants

constant boolean DEBUG = true
constant real DAMAGEFREQ = 2
constant string SFX = "Abilities\\Spells\\Undead\\PlagueCloud\\PlagueCloudCaster.mdl"

// ===============================================================================================

unit array hitTargets
int hitTargets_HighestIndex = 0


function debugMsg(string stringToPrint)
         if DEBUG
             print(stringToPrint)


function unit.addToHitTargets()
    int index = 0

    while hitTargets[index] != null
        index++
    hitTargets[index] = this

    getTimer()
    ..setData(index)
    ..start(DAMAGEFREQ-0.01, function removeFromHitTargets )

    hitTargets_HighestIndex = (index > hitTargets_HighestIndex) ? index : hitTargets_HighestIndex

function unit.isHit() returns boolean
    for index=0 to hitTargets_HighestIndex
        if hitTargets[index] == this
            return true
    return false

function removeFromHitTargets()
    timer t = GetExpiredTimer()
    hitTargets[GetExpiredTimer().getData()] = null
    t.release()


function damage( unit source, real damage, real range )

    group targets = ENUM_GROUP

    debugMsg("Source: "+source.getName())

    targets.enumUnitsInRange(source.getPos(), range)

    //Filter Units
    for u in targets
        if( u == source or
            not u.isAlive() or
            u.getOwner().isAllyOf(source.getOwner()) or
            u.isHit() 
            )

            targets.removeUnit(u)
            //debugMsg("Removed "+u.getName())


    debugMsg("Filtered units!")

    int i = 0
    for u from targets
        debugMsg(source.getName()+" damaged "+u.getName() )
        source.damageTarget(u, damage)
        u.addToHitTargets()
        
        i++
        // Perhaps add a disease effect on the target


class Disease
    // The class that maintains the Disease Ability
    //----------------------------------------------
    private static constant boolean DAMAGESTACKS = false

    private static IterableMap<unit, timer> hitTargets

    private static IterableMap<unit, thistype> instances

    private static int instanceCount = 0

    private static trigger trg_UnitDies
    private static trigger trg_UnitIsRemoved
     
    private static boolean hasBeenInitialized = false
    
    private real damageFrequency
    private real diseaseDamage
    private real diseaseRange
    private real cloudDamage
    private real cloudDuration
    private real cloudRange


    private unit unitWithAbility
    private effect sfx
    private timer timer_Damage

    ondestroy
        instanceCount--
        if instanceCount == 0
            deactivateTriggers()
        instances.remove(unitWithAbility)

        sfx.destr()
        timer_Damage.release()
    

    static function unitHasBeenHit( unit whichUnit) returns boolean
        if hitTargets != null
            return hitTargets.has(whichUnit)
        return false

    private construct(unit whichUnit, real diseaseDamage, real cloudDamage, real diseaseRange, real cloudRange, real cloudDuration)
        if not hasBeenInitialized
            initialize()

        if instanceCount==0
            activateTriggers()
        instanceCount++
    
        debugMsg("Adding Disease to "+whichUnit.getName()+"...") 
        instances.put(whichUnit, this)
        this.unitWithAbility = whichUnit
        this.diseaseDamage = diseaseDamage
        this.cloudDamage = cloudDamage
        this.cloudRange = cloudRange
        this.diseaseRange = diseaseRange
        this.cloudDuration = cloudDuration

        sfx = unitWithAbility.addEffect(SFX, "origin")
        timer_Damage = getTimer()
        ..setData(this castTo int)
        ..startPeriodic(DAMAGEFREQ, function orderDamage)

        

        debugMsg("Finished adding Disease to unit")
            


    /** A simple addUnit. The parameters are for both the disease and the cloud. Damage frequency is 1 second. */
    static function addUnit(unit whichUnit, real damage, real cloudDuration, real range)
        debugMsg("Disease: addUnit() called")
        new Disease(whichUnit, damage, damage, range, range, cloudDuration)

    /** A custom addUnit. Full control over the disease and the cloud.*/
    static function addUnit(unit whichUnit, real diseaseDamage, real cloudDamage, real diseaseRange, real cloudRange, real cloudDuration)
        debugMsg("Disease: addUnit() called")
        new Disease(whichUnit, diseaseDamage, cloudDamage, diseaseRange, cloudRange, cloudDuration)

    /** Removes the unit from the Disease stack
     (basically removing the Disease ) from the unit*/
    static function removeUnit(unit unitToRemove)
        if instances.has(unitToRemove)
            destroy instances.get(unitToRemove)
    

    private static function orderDamage()
        thistype instance = GetExpiredTimer().getData() castTo thistype
        damage(instance.unitWithAbility, instance.diseaseDamage, instance.diseaseRange)
        



    private static function unitDies() returns boolean
        unit dyingUnit = GetDyingUnit()
        
        if instances.has(dyingUnit)
            debugMsg("Disease: Unit in instance died!")
            thistype instance = instances.get(dyingUnit)       
            new DiseaseCloud(instance.unitWithAbility.getOwner(), instance.unitWithAbility.getPos(), instance.cloudDamage, instance.cloudDuration, instance.cloudRange)
            destroy instance

        return false


    private static function unitIsRemoved() returns boolean
        // It's not tested if you leave the map rect when you get moved
        // To another place in the map.
        unit removedUnit = GetLeavingUnit()

        if instances.has(removedUnit)
            destroy instances.get(removedUnit)

        return false


    /** Activates Unit death and removal detection (the triggers)  */
    static function activateTriggers()
        debugMsg("Disease: Activating triggers!")
        trg_UnitDies.enable()
        trg_UnitIsRemoved.enable()

    /** Deactivates Unit death and removal detection (the triggers)  */
    static function deactivateTriggers()
        trg_UnitDies.disable()
        trg_UnitIsRemoved.disable()
        

    private static function initialize()
        
        if not hasBeenInitialized
            debugMsg("Disease: Initializing Class")
            hasBeenInitialized = true

            instances = new IterableMap<unit, thistype>
            hitTargets = new IterableMap<unit, timer>

            trg_UnitDies = CreateTrigger()
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
            ..addCondition(Condition(function unitDies))
            ..disable()

            region map = CreateRegion()..addRect(GetPlayableMapRect())
            trg_UnitIsRemoved = CreateTrigger()
            ..registerLeaveRegion(map, Filter(function unitIsRemoved))
            ..disable()



class DiseaseCloud
    // The class that maintains the disease clouds after unit death

    private static LinkedList<thistype> instances

    private static boolean hasBeenInitialized

    timer timer_Damage
    timer timer_Duration
    real damage
    vec2 pos
    player owner
    unit dummy
    real range
    effect sfx

    

    ondestroy
        debugMsg("Destroying Cloud!")
        instances.remove(this)
        dummy.remove()
        sfx.destr()
        timer_Damage.release()
        timer_Duration.release()

    static function orderDamage()
        thistype instance = GetExpiredTimer().getData() castTo thistype
        print("On orderDamage: "+instance.dummy.getName())
        damage(instance.dummy, instance.damage, instance.range)


    construct(player owner, vec2 pos, real damage, real duration, real range)
        debugMsg("Creating new cloud! Stats: "+
                    "Player"+owner.getId().toString()+
                    ", Position:"+pos.toString()+
                    ", Damage: "+damage.toString()+
                    ", Duration: "+duration.toString()+
                    ", Range: "+range.toString() )
        if not hasBeenInitialized
            initialize()

        instances.add(this)
            
        this.owner = owner
        this.pos = pos
        this.damage = damage
        this.range = range

        sfx = addEffect(SFX, pos.withTerrainZ(100) ) 
        dummy = createUnit(owner, 'h004', this.pos, angle(0) )

        
        timer_Duration = getTimer()
        if duration>0
            timer_Duration
            ..setData(this castTo int)
            ..start( duration+0.1, () -> destroy GetExpiredTimer().getData() castTo thistype )

        timer_Damage = getTimer()
        ..setData(this castTo int)
        ..startPeriodic( DAMAGEFREQ, function orderDamage )

        
    static function destroyAll()
        for instance in instances
            destroy instance


    /** 
    Initialize the class: creating instance list.
    It's automatically initialized when creating
    a new instance */

    private static function initialize()
        debugMsg("Initializing DiseaseCloud class")
        if not hasBeenInitialized
            hasBeenInitialized = true
            instances = new LinkedList<thistype>


function delayedInit()
    GetExpiredTimer().release()
    unit u = createUnit(Player(0), 'hpea', vec2(-13935,-14250), angle(0))
    Disease.addUnit(u, 50, 10, 300)


init
    unit u = createUnit(Player(0), 'hfoo', vec2(-13935,-14250), angle(0))
    Disease.addUnit(u, 50, 10, 300)
    getTimer().start(0.75, function delayedInit )

    // Testing LinkedList Index
    LinkedList<unit> testList = new LinkedList<unit>
    

    

    