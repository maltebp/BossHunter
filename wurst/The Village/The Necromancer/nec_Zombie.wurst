package nec_Zombie

import BossAdd
import General
import LinkedList
import TimerUtils
import HashMap
 
public class Zombie

//========================================================================================================================================

    // Unit Stats
    private static int  DAMAGE = 10
    private static real ARMOR = 0
    private static int HEALTH = 100
    private static int MANA   = 100
    private static real MOVESPEED = 270
    private static real ATTACKSPEED = 2
    
    private static real SPAWNFREQ = 9

    private static constant DEBUGMSG = true

//========================================================================================================================================

    // Constants
    static integer ID = 'u002'
    static AddSpawner spawner
    static rect spawnRect = gg_rct_TheNec_MobSpawn 

    static function stopSpawn()
        spawner.stop()

    static function startSpawn()
        spawner.start()

    static function activate()
        spawner = new AddSpawner()
        ..setUnit(ID, Player(11), HEALTH, MANA, DAMAGE, ARMOR, ATTACKSPEED, MOVESPEED)
        ..setSpawnRandom(spawnRect, SPAWNFREQ)
        ..setTarget(hunter)
        ..setSpawnEffect("Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl")

        Disease.activate()

    static function deactivate()
        destroy spawner
    
    //TODO: Add code to launch to BossAdd
    

class Disease
    // The class that maintains the Disease Ability
    //----------------------------------------------

    private static IterableMap<unit, thistype> instances = new IterableMap<unit, thistype>

    private static trigger trg_UnitDies
    private static trigger trg_UnitIsRemoved
    private static constant boolean DISABLETRIGGERSONINIT = true 

    
    real damageFrequency = 1
    real diseaseDamage
    real range
    real cloudDamage
    real cloudDuration
    real cloudRange
    unit unitWithAbility
    effect sfx
    timer timer_Damage

    ondestroy

    private construct( unit whichUnit, real diseaseDamage, real cloudDamage, real damageFrequency, real range )
        instances.put(whichUnit, this)
    
    static function addUnit(unit whichUnit, real diseaseDamage, real cloudDamage)

    static function addUnit(unit whichUnit, real damage, real damageFrequency, real range)

    private static function damage()


    private static function unitDies() returns boolean
        unit dyingUnit = GetDyingUnit()
        
        if instances.has(dyingUnit)
            // Do stuff when dying  
            thistype instance = instances.get(dyingUnit)       
            new DiseaseCloud(dyingUnit.getPos(), instance.cloudDamage, instance.cloudDuration, instance.cloudRange)
            destroy instance

        return false

    private static function unitIsRemoved() returns boolean
        // It's not tested if you leave the map rect when you get moved
        // To another place in the map.
        unit removedUnit = GetLeavingUnit()

        if instances.has(removedUnit)
            destroy instances.get(removedUnit)

        return false


    /** Activates Unit death and removal detection (the triggers)
    */
    static function activate()
        trg_UnitDies.enable()
        trg_UnitIsRemoved.disable()

    /** Deactivates Unit death and removal detection (the triggers)
    */
    static function deactivate()
        trg_UnitDies.disable()
        trg_UnitIsRemoved.disable()
        


    static function initialize()
        trg_UnitDies = CreateTrigger()
        ..addCondition(Condition(function unitDies))

        trg_UnitIsRemoved = CreateTrigger()
        ..addCondition(Condition(function unitIsRemoved))

        if( not DISABLETRIGGERSONINIT )
            trg_UnitDies.disable()
            trg_UnitIsRemoved.disable()


class DiseaseCloud
    // The class that maintains the disease clouds after unit death
    
    private static LinkedList<DiseaseCloud> allClouds = new LinkedList<DiseaseCloud>    
    private static trigger trg_UnitDies

    private static constant int ABILITYID = 'A02I'

    timer timer_Damage
    timer timer_EndEffect
    real damagePerSecond
    vec2 pos
    

    ondestroy
        timer_Damage.release()
        timer_EndEffect.release()

    static function endEffect()

    static function damage()

    construct(vec2 pos, real damagePerSecond, real duration, real aoe)
        //If duration = 0, it lasts forever


    static function destroyAll()


    static function unitDies() returns boolean
        unit dyingUnit = GetDyingUnit()
        
        return false


    static function setup()
        trg_UnitDies = CreateTrigger()
        ..addCondition(Condition(function unitDies))
        ..disable()

// ------------------------------ 
// Functions specific for BossHunter Map

    static function activate()
        

    static function deactivate()
        destroyAll()


init
    DiseaseCloud.setup()
    Disease.initialize()