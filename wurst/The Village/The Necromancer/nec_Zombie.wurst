package nec_Zombie

import BossAdd
import General
import LinkedList
import TimerUtils
import HashMap
 
public class Zombie

//========================================================================================================================================

    // Unit Stats
    private static int  DAMAGE = 10
    private static real ARMOR = 0
    private static int HEALTH = 100
    private static int MANA   = 100
    private static real MOVESPEED = 270
    private static real ATTACKSPEED = 2
    
    private static real SPAWNFREQ = 9

    private static constant DEBUGMSG = true

//========================================================================================================================================

    // Constants
    static integer ID = 'u002'
    static AddSpawner spawner
    static rect spawnRect = gg_rct_TheNec_MobSpawn 

    static function stopSpawn()
        spawner.stop()

    static function startSpawn()
        spawner.start()

    static function activate()
        spawner = new AddSpawner()
        ..setUnit(ID, Player(11), HEALTH, MANA, DAMAGE, ARMOR, ATTACKSPEED, MOVESPEED)
        ..setSpawnRandom(spawnRect, SPAWNFREQ)
        ..setTarget(hunter)
        ..setSpawnEffect("Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl")

        Disease.activate()

    static function deactivate()
        destroy spawner
    
    //TODO: Add code to launch to BossAdd
    

interface Filter
    function isTarget() returns bool

class Disease
    // The class that maintains the Disease Ability
    //----------------------------------------------

    private static constant boolean DEBUGMSG = true
    private static constant boolean DISABLETRIGGERSONINIT = true

    private static IterableMap<unit, thistype> instances = new IterableMap<unit, thistype>

    private static trigger trg_UnitDies
    private static trigger trg_UnitIsRemoved
     
    private static boolean hasBeenInitialized = false
    
    private real damageFrequency
    private real diseaseDamage
    private real diseaseRange
    private real cloudDamage
    private real cloudDuration
    private real cloudRange

    private unit unitWithAbility
    private effect sfx
    private timer timer_Damage

    ondestroy

    private static function print(string stringToPrint)
        if DEBUGMSG
            print(stringToPrint)

    private construct(unit whichUnit, real diseaseDamage, real cloudDamage, real diseaseRange, real cloudRange, real cloudDuration, real damageFrequency)
        if DEBUGMSG
            print("Adding Disease to "+whichUnit.getName()+"...") 
            instances.put(whichUnit, this)
            this.unitWithAbility = whichUnit
            this.diseaseDamage = diseaseDamage
            this.cloudDamage = cloudDamage
            this.cloudRange = cloudRange
            this.diseaseRange = diseaseRange
            this.cloudDuration = cloudDuration
            this.damageFrequency = damageFrequency

            sfx = unitWithAbility.addEffect("Abilities\\Spells\\Undead\\PlagueCloud\\PlagueCloudCaster.mdl", "chest")
            timer_Damage = getTimer()
            ..setData(this castTo int)
            ..startPeriodic(damageFrequency, function damage)

            if not hasBeenInitialized 
                initialize()

            print("Finished adding Disease to unit")
            


    /** A simple addUnit. The parameters are for both the disease and the cloud. Damage frequency is 1 second. */
    static function addUnit(unit whichUnit, real damage, real cloudDuration, real range)
        new Disease(whichUnit, damage, damage, range, range, cloudDuration, 1)

    /** A custom addUnit. Full control over the disease and the cloud.*/
    static function addUnit(unit whichUnit, real diseaseDamage, real cloudDamage, real diseaseRange, real cloudRange, real cloudDuration, real damageFrequency)
        new Disease(whichUnit, diseaseDamage, cloudDamage, diseaseRange, cloudRange, cloudDuration, damageFrequency)

    /** Removes the unit from the Disease stack
     (basically removing the Disease ) from the unit*/
    static function removeUnit(unit unitToRemove)
        if instances.has(unitToRemove)
            destroy instances.get(unitToRemove)

    private static function targetFilter()

    

    private static function damage()
        thistype instance = GetExpiredTimer().getData() castTo thistype
        group targets = ENUM_GROUP
        
        targets.enumUnitsInRange(instance.unitWithAbility.getPos(), instance.diseaseRange,
         Filter( () -> GetFilterUnit().isAlive() ) )
        
        print("filtered units!")

        int i = 0
        for u from targets
            print("Target "+i.toString()+": "+ u.getName() )


        

    private static function unitDies() returns boolean
        unit dyingUnit = GetDyingUnit()
        
        if instances.has(dyingUnit)
            // Do stuff when dying  
            thistype instance = instances.get(dyingUnit)       
            new DiseaseCloud(dyingUnit.getPos(), instance.cloudDamage, instance.cloudDuration, instance.cloudRange)
            destroy instance

        return false

    private static function unitIsRemoved() returns boolean
        // It's not tested if you leave the map rect when you get moved
        // To another place in the map.
        unit removedUnit = GetLeavingUnit()

        if instances.has(removedUnit)
            destroy instances.get(removedUnit)

        return false


    /** Activates Unit death and removal detection (the triggers)
    */
    static function activate()
        trg_UnitDies.enable()
        trg_UnitIsRemoved.disable()

    /** Deactivates Unit death and removal detection (the triggers)
    */
    static function deactivate()
        trg_UnitDies.disable()
        trg_UnitIsRemoved.disable()
        

    private static function initialize()
        hasBeenInitialized = true

        trg_UnitDies = CreateTrigger()
        ..addCondition(Condition(function unitDies))

        trg_UnitIsRemoved = CreateTrigger()
        ..addCondition(Condition(function unitIsRemoved))

        if( DISABLETRIGGERSONINIT )
            trg_UnitDies.disable()
            trg_UnitIsRemoved.disable()




class DiseaseCloud
    // The class that maintains the disease clouds after unit death
    
    private static LinkedList<DiseaseCloud> allClouds = new LinkedList<DiseaseCloud>    
    private static trigger trg_UnitDies

    private static constant int ABILITYID = 'A02I'

    timer timer_Damage
    timer timer_EndEffect
    real damagePerSecond
    vec2 pos
    

    ondestroy
        timer_Damage.release()
        timer_EndEffect.release()

    static function endEffect()

    static function damage()

    construct(vec2 pos, real damagePerSecond, real duration, real aoe)
        //If duration = 0, it lasts forever


    static function destroyAll()


    static function unitDies() returns boolean
        unit dyingUnit = GetDyingUnit()
        
        return false


    static function setup()
        trg_UnitDies = CreateTrigger()
        ..addCondition(Condition(function unitDies))
        ..disable()

// ------------------------------ 
// Functions specific for BossHunter Map

    static function activate()
        

    static function deactivate()
        destroyAll()


init
    DiseaseCloud.setup()

    unit u = createUnit(Player(0), 'hfoo', vec2(-13935,-14250), GetRandomAngle())
    Disease.addUnit(u, 2, 10, 300)

    //Units\Undead\PlagueCloud\PlagueCloudtarget.mdl